//  ProteinEvolverABC_GUI.java
//  ProteinEvolverABC_GUI
//
//  Created by Miguel Arenas.
//  Copyright (c) 2020 __MyCompanyName__. All rights reserved.
//
//	For information on setting Java configuration information, including 
//	setting Java properties, refer to the documentation at
//		http://developer.apple.com/techpubs/java/java.html
//
// PURPOSE: 
// ProteinEvolverABC_GUI builds a settings file for running ProteinEvolverABC
// The code requires Java SE 5 or higher to compile.
//
//
//

import java.io.*;
import java.io.File;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileReader.*;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Enumeration;
import java.util.Vector;
import java.util.*;
import java.lang.ProcessBuilder;
import java.lang.*;
import java.net.URL;
import java.awt.*;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.BorderLayout;
import java.awt.event.*;
import java.applet.Applet;
import java.awt.Button;
import java.awt.Event;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.Dimension;
import java.awt.Container;
import java.awt.FlowLayout;
//import com.apple.eawt.*;
import javax.swing.*;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JSplitPane;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JComponent;
import javax.swing.ImageIcon;
import javax.swing.text.*;
import javax.swing.BorderFactory;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.JScrollPane;
import javax.swing.JApplet;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.ButtonGroup;
import javax.swing.JTextArea;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.util.Scanner;
import java.util.Scanner.*;
import java.net.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.nio.*;
import java.lang.Math;


public class ProteinEvolverABC_GUI extends JFrame 
	{
	String TargetFile = "*NameOfPhylipFile=";
	String address = "";
	String address2 = "";
	String fileName = "";

	int NumberReplicates = 0;
	String ProteinEvolverABC_NumberReplicates = "*NumberOfSimulations=";
	String ProteinEvolverABC_NumberProcessors = "NumberOfProcessors=";
	String SaveSimulations = "*SaveSimulations=";
    String ShowInformationScreen = "*ShowInformationScreen=";
    String Indels = "*Indels=";
	int SaveSims = 0;
	int SampleSize = 0;
	int SequenceLengthNt = 0;
    int ShowInfo = 0;
    int DoIndels = 0;

	String ProteinEvolverABC_PopSize = "*PopulationSize=";
	int PopSize_MAX = -1;


	String ProteinEvolverABC_HapDip = "*Haploid/Diploid=";
	String ProteinEvolverABC_DatedTips = "#DatedTips=4 1995 1 10 2003 11 16 1997 17 26 2001 27 29";
	String ProteinEvolverABC_GenerationTime = "#GenerationTime=fix 1200";
	String ProteinEvolverABC_IslandModel = "#MigrationModel=1 4 12 10 3 4";
	String ProteinEvolverABC_SteppStoneModel = "#MigrationModel=2 4 12 10 3 4";
	String ProteinEvolverABC_ContIslandModel = "#MigrationModel=3 4 12 10 3 4";
	String ProteinEvolverABC_ConvDemes = "#Species/populationsTree=3 1 2 300 3 4 600 5 6 700";
	String ProteinEvolverABC_MigrationRate = "#MigrationRate=1 0.005";
	String ProteinEvolverABC_GrowthRate = "#GrowthRate=fix 2.3e-03";
	String ProteinEvolverABC_DemogPeriods = "#DemographicPeriods=1 1 10 100 500";
	String ProteinEvolverABC_DemogPeriodsStructPop_CTE = "#DemographicsSpeciesTree_ConstantPops=2 7 1000 500 900 800 1300 1000 700";
	String ProteinEvolverABC_DemogPeriodsStructPop_VARY = "#DemographicsSpeciesTree_VariablePops=3 7 1000 1200 500 600 900 1000 100 200 800 900 2000 1900 900";
	int NoDemographics = 0;
	//String ProteinEvolverABC_HotspotsRec = "[hUserHetRec]";
	//String ProteinEvolverABC_Outgroup = "[o0.1]";
	String CoalHomogRecRate = "*RecombinationRate=";
	double Rho_MIN = 0;
	double Rho_MAX = 0;

	String CoalSubsRate = "*SubstitutionRate=";
	double Theta_MIN = 0;
	double Theta_MAX = 0;
	String AVtheta = "";
	String ProteinSubstitutionModel_Str = "*SubstitutionModel=";
	String ProteinEvolverABCNormalAAFreqs = "#AminoacidFrequencies=fix 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05";
    String ProteinEvolverABC_AA_Gamongsites = "#RateHetSites=uniform 0.76 0.90";
	String ProteinEvolverABC_AA_I = "#PropInvSites=uniform 0.3 0.5";

	String ABC_Iterations = "*ABCIterations=";
	String ABC_Tolerance = "*ABCTolerance=";
	String ABC_Method = "*ABCMethod=";
	String ABC_Transf = "*ABCTransf=";
	String ABC_Corr = "*ABCHCorr=";
	String ABC_SummaryStatistics = "*SummaryStatistics=";
	String ABC_MultiPage = "*MultiPage=";


	private		JTabbedPane tabbedPane;
	JPanel topPanel = new JPanel();
	JPanel panel1 = new JPanel();
	JPanel panel01 = new JPanel();
	JPanel panel2 = new JPanel();
	JPanel panel3 = new JPanel();
	JPanel panel4 = new JPanel();
	JPanel panel5 = new JPanel();
	JPanel panel6 = new JPanel();
	JPanel panel7 = new JPanel();
	JPanel panel8 = new JPanel();
	JPanel panel9 = new JPanel();
	JPanel panel10 = new JPanel();
	JPanel panel11 = new JPanel();
	JPanel panel12 = new JPanel();
	JPanel panel13 = new JPanel();
	JPanel panel14 = new JPanel();
	JPanel panel15 = new JPanel();
	JPanel panel16 = new JPanel();
	JPanel panel17 = new JPanel();
	JPanel panel18 = new JPanel();
	JPanel panel19 = new JPanel();
	JPanel panel20 = new JPanel();
	JPanel panel21 = new JPanel();
	JPanel panel22 = new JPanel();
	JPanel panel23 = new JPanel();
	JPanel panel24 = new JPanel();
	JPanel panel25 = new JPanel();
	JPanel panel26 = new JPanel();
	JPanel panel27 = new JPanel();
	JPanel panel28 = new JPanel();
	JPanel panel29 = new JPanel();
	JPanel panel30 = new JPanel();
	JPanel panel31 = new JPanel();
	JPanel panel32 = new JPanel();
	JPanel panel33 = new JPanel();
	JPanel panel34 = new JPanel();
	JPanel panel35 = new JPanel();
    JPanel panel40 = new JPanel();
    JPanel panel41 = new JPanel();
    JPanel panel42 = new JPanel();
    JPanel panel43 = new JPanel();
    
	
	JScrollPane scroll1 = new JScrollPane( panel1 );
	JScrollPane scroll01 = new JScrollPane( panel01 );
	JScrollPane scroll2 = new JScrollPane( panel2 );
	JScrollPane scroll3 = new JScrollPane( panel3 );
	JScrollPane scroll4 = new JScrollPane( panel4 );
	JScrollPane scroll5 = new JScrollPane( panel5 );
	JScrollPane scroll6 = new JScrollPane( panel6 );
	JScrollPane scroll7 = new JScrollPane( panel7 );
	JScrollPane scroll8 = new JScrollPane( panel8 );
	JScrollPane scroll9 = new JScrollPane( panel9 );
	JScrollPane scroll10 = new JScrollPane( panel10 );
	JScrollPane scroll11 = new JScrollPane( panel11 );
	JScrollPane scroll12 = new JScrollPane( panel12 );
	JScrollPane scroll13 = new JScrollPane( panel13 );
	JScrollPane scroll14 = new JScrollPane( panel14 );
	JScrollPane scroll15 = new JScrollPane( panel15 );
	JScrollPane scroll16 = new JScrollPane( panel16 );
	JScrollPane scroll17 = new JScrollPane( panel17 );
	JScrollPane scroll18 = new JScrollPane( panel18 );
	JScrollPane scroll19 = new JScrollPane( panel19 );
	JScrollPane scroll20 = new JScrollPane( panel20 );
	JScrollPane scroll21 = new JScrollPane( panel21 );
	JScrollPane scroll22 = new JScrollPane( panel22 );
	JScrollPane scroll23 = new JScrollPane( panel23 );
	JScrollPane scroll24 = new JScrollPane( panel24 );
	JScrollPane scroll25 = new JScrollPane( panel25 );
	JScrollPane scroll26 = new JScrollPane( panel26 );
	JScrollPane scroll27 = new JScrollPane( panel27 );
	JScrollPane scroll28 = new JScrollPane( panel28 );
	JScrollPane scroll29 = new JScrollPane( panel29 );
	JScrollPane scroll30 = new JScrollPane( panel30 );
	JScrollPane scroll31 = new JScrollPane( panel31 );
	JScrollPane scroll32 = new JScrollPane( panel32 );
	JScrollPane scroll33 = new JScrollPane( panel33 );
	JScrollPane scroll34 = new JScrollPane( panel34 );
	JScrollPane scroll35 = new JScrollPane( panel35 );
    JScrollPane scroll40 = new JScrollPane( panel40 );
    JScrollPane scroll41 = new JScrollPane( panel41 );
    JScrollPane scroll42 = new JScrollPane( panel42 );
    JScrollPane scroll43 = new JScrollPane( panel43 );
        
	//// General Variables	
	private Font PLAINAtt;
	int Error = 0;
	int Ipar1 = -1;
	int Ipar2 = -1;
	double par1 = -2.34e-10;
	double par2 = -2.34e-10;
	String trunc = "t";
	double par3 = -2.34e-10;
	double par4 = -2.34e-10;
	String Spar1 = "";
 	String Spar2 = "";
	String Spar3 = "";
	String Spar4 = "";
	String OutputDistribution = "";
	int OkFile = 0;


	//// TABS DECLARATIONS
	private ExitButtonHandler ebHandler;
	private runButtonHandler runHandler;
	JLabel link1 = new JLabel();
	static String URL1 = "https://github.com/MiguelArenas/proteinevolverabc/";
	static String textlinked1 = "";
	static String textlinked2 = "";
	JLabel link3 = new JLabel();
	static String URL3 = "http://sing.ei.uvigo.es/ALTER/";
	static String textlinked3 = "";
	JLabel link1b = new JLabel();
	static String URL1b = "mailto:miguelmmmab@gmail.com?subject=ProteinEvolverABC_Question";
	static String textlinked1b = "";
	JLabel link1c = new JLabel();
	static String URL1c = "mailto:marenas@uvigo.es?subject=ProteinEvolverABC_Question";
	static String textlinked1c = "";
	
	JLabel link2 = new JLabel();
	private runButton01Handler run01Handler;
	JButton ButtonNext01 = new JButton("Save and next");

	private runButtonUploadFile run1UploadFile;
	JLabel LabelTargetFile = new JLabel();
	JTextField TextNumberReplicates = new JTextField(10);
	JTextField TextNumberProcessors = new JTextField(10);
    private ButtonGroup KindIndels_group = new ButtonGroup();
    private JRadioButton KindIndels_NO = new JRadioButton("Ignore", false), KindIndels_YES = new JRadioButton("New state", false);
	private ButtonGroup KindSaveSimulations_group = new ButtonGroup();
    private JRadioButton KindSaveSimulations_NO = new JRadioButton("No", false), KindSaveSimulations_YES = new JRadioButton("Yes", false);
    private ButtonGroup KindShowInformationScreen_group = new ButtonGroup();
    private JRadioButton KindShowInformationScreen_NO = new JRadioButton("No", false), KindShowInformationScreen_YES = new JRadioButton("Yes", false);
	private runButton2Handler run2Handler;

    JLabel label3b = new JLabel();
    JLabel label3f = new JLabel();
	JLabel label3e = new JLabel();
    private runButton3Handler run3Handler;

	JLabel label4ab = new JLabel();
	JLabel label4c = new JLabel();
	JLabel label4ca = new JLabel();
	JLabel label4cb = new JLabel();
	JLabel label4d = new JLabel();
	JLabel label4d2 = new JLabel();
	JLabel label4e = new JLabel();
	JLabel label4f = new JLabel();
	JLabel label4line1 = new JLabel();
	JLabel label4g = new JLabel();
	JLabel label4h = new JLabel();
	JLabel label4line2 = new JLabel();
	JLabel label4line3 = new JLabel();
	JLabel label4j = new JLabel();
	JLabel label4k = new JLabel();
	JLabel label4l = new JLabel();
	JLabel label4ll = new JLabel();
	JLabel label4line4 = new JLabel();
	JLabel label4m = new JLabel();
	JLabel label4line5 = new JLabel();
	JLabel label4n = new JLabel();
	JLabel label4b = new JLabel();
	JLabel TextSampleSizeProteinEvolverABC = new JLabel();
	JLabel TextLengthProteinEvolverABC = new JLabel();	
	JLabel TextPopSizeProteinEvolverABC = new JLabel();
	String HerePopSize = "1000"; /* new! for demographics.. */
	String[] PopSizeProteinEvolverABCOptions = {"fix"/*, "uniform"*/};
    JComboBox PopSizeProteinEvolverABC = new JComboBox(PopSizeProteinEvolverABCOptions);
	String[] KindDataTypeOptions = {"haploid", "diploid"};
	String KindDataProteinEvolverABC = "diploid";
	private ButtonGroup KindDataProteinEvolverABC_group = new ButtonGroup();
    private JRadioButton KindDataProteinEvolverABC_Hap = new JRadioButton("Haploid", false), KindDataProteinEvolverABC_Dip = new JRadioButton("Diploid", false);
	private ButtonGroup DatedTipsProteinEvolverABC_group = new ButtonGroup();
    private JRadioButton DatedTipsProteinEvolverABC_No = new JRadioButton("No", false), DatedTipsProteinEvolverABC_Yes = new JRadioButton("Yes", false);
	//
	JLabel label4ee = new JLabel();
	int OneDatedTips_int = 0;
	static JFrame MultDatedTipsWindow = new JFrame("User-specified dated tips");
	int FirstTimeMultDatedTipsWindow = 0;
	JButton ButtonNextFrameMultDatedTips_SaveNext = new JButton("Save dated tips");
	private runButtonMultDatedTipsSaveNextHandler runMultDatedTipsSaveNextHandler;
	JButton ButtonNextFrameMultDatedTips_Back = new JButton("Exit without saving dated tips");
	private runButtonMultDatedTipsExitHandler runMultDatedTipsExitHandler;
	String[] NumberOfMultDatedTipsProteinEvolverABCOptions = {"2", "3", "4", "5", "6", "7", "8", "9", "10"};
	JComboBox NumberOfMultDatedTipsProteinEvolverABC_ = new JComboBox(NumberOfMultDatedTipsProteinEvolverABCOptions);
	JTextField TextNumberOfMultDatedTipsProteinEvolverABC = new JTextField(60);
	JLabel labelXXd1 = new JLabel();
	JLabel labelXXd2 = new JLabel();
	JLabel labelXXd3 = new JLabel();
	JLabel labelXXd4 = new JLabel();
	JLabel labelXXd5 = new JLabel();
	JLabel labelXXd6 = new JLabel();
	JLabel labelXXd7 = new JLabel();
	JLabel labelXXd8 = new JLabel();
	JLabel labelXXd9 = new JLabel();
	JLabel labelXXd10 = new JLabel();
	JTextField TextMultDatedTips_Reg1_1 = new JTextField(60);
	JTextField TextMultDatedTips_Reg1_2 = new JTextField(60);
	JTextField TextMultDatedTips_Reg1_3 = new JTextField(60);
	JTextField TextMultDatedTips_Reg1_4 = new JTextField(60);
	JTextField TextMultDatedTips_Reg1_5 = new JTextField(60);
	JTextField TextMultDatedTips_Reg1_6 = new JTextField(60);
	JTextField TextMultDatedTips_Reg1_7 = new JTextField(60);
	JTextField TextMultDatedTips_Reg1_8 = new JTextField(60);
	JTextField TextMultDatedTips_Reg1_9 = new JTextField(60);
	JTextField TextMultDatedTips_Reg1_10 = new JTextField(60);
	JTextField TextMultDatedTips_Reg2_1 = new JTextField(60);
	JTextField TextMultDatedTips_Reg2_2 = new JTextField(60);
	JTextField TextMultDatedTips_Reg2_3 = new JTextField(60);
	JTextField TextMultDatedTips_Reg2_4 = new JTextField(60);
	JTextField TextMultDatedTips_Reg2_5 = new JTextField(60);
	JTextField TextMultDatedTips_Reg2_6 = new JTextField(60);
	JTextField TextMultDatedTips_Reg2_7 = new JTextField(60);
	JTextField TextMultDatedTips_Reg2_8 = new JTextField(60);
	JTextField TextMultDatedTips_Reg2_9 = new JTextField(60);
	JTextField TextMultDatedTips_Reg2_10 = new JTextField(60);
	JTextField TextMultDatedTipsProteinEvolverABC_1 = new JTextField(60);
	JTextField TextMultDatedTipsProteinEvolverABC_2 = new JTextField(60);
	JTextField TextMultDatedTipsProteinEvolverABC_3 = new JTextField(60);
	JTextField TextMultDatedTipsProteinEvolverABC_4 = new JTextField(60);
	JTextField TextMultDatedTipsProteinEvolverABC_5 = new JTextField(60);
	JTextField TextMultDatedTipsProteinEvolverABC_6 = new JTextField(60);
	JTextField TextMultDatedTipsProteinEvolverABC_7 = new JTextField(60);
	JTextField TextMultDatedTipsProteinEvolverABC_8 = new JTextField(60);
	JTextField TextMultDatedTipsProteinEvolverABC_9 = new JTextField(60);
	JTextField TextMultDatedTipsProteinEvolverABC_10 = new JTextField(60);		
	int SavedMultDatedTips = 0;
	//
	JLabel TextGenTimeProteinEvolverABC =  new JLabel();
	String[] GenTimeProteinEvolverABCOptions = {"fix", "uniform"};
    JComboBox GenTimeProteinEvolverABC = new JComboBox(GenTimeProteinEvolverABCOptions);
	int TextGenTimeProteinEvolverABC_int = 0;
	private ButtonGroup GenTimeProteinEvolverABC_group = new ButtonGroup();
    private JRadioButton GenTimeProteinEvolverABC_No = new JRadioButton("No", false), GenTimeProteinEvolverABC_Yes = new JRadioButton("Yes", false);
	String[] VariablePopSizeOptions = {"No","growth rate", "demographic periods","demographics along branches (constant N branch)","demographics along branches (variable N branch)"};
    JComboBox VariablePopSize = new JComboBox(VariablePopSizeOptions);
	String[] GrowthRateProteinEvolverABCOptions = {"fix", "uniform", "exponential", "normal", "gamma", "beta"}; // fix, unif, norm(t), exp(t), gamma(t), beta(t)
    JComboBox GrowthRateProteinEvolverABC = new JComboBox(GrowthRateProteinEvolverABCOptions);
	JLabel TextGrowthRateProteinEvolverABC = new JLabel();
	////	
	JLabel label4i1 = new JLabel();
	JLabel label4i2 = new JLabel();
	String[] MigrationModelsOptions = {"No", "island", "stepping-stone", "island-continent"};
    JComboBox MigrationModels = new JComboBox(MigrationModelsOptions);
	//
	JLabel label4eeeIsland = new JLabel();
	int OneIsland_int = 0;
	static JFrame MultIslandWindow = new JFrame("User-specified demes");
	int FirstTimeMultIslandWindow = 0;
	JButton ButtonNextFrameMultIsland_SaveNext = new JButton("Save demes");
	private runButtonMultIslandSaveNextHandler runMultIslandSaveNextHandler;
	JButton ButtonNextFrameMultIsland_Back = new JButton("Exit without saving periods");
	private runButtonMultIslandExitHandler runMultIslandExitHandler;
	String[] NumberOfMultIslandProteinEvolverABCOptions = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"};
	JComboBox NumberOfMultIslandProteinEvolverABC_ = new JComboBox(NumberOfMultIslandProteinEvolverABCOptions);
	JTextField TextNumberOfMultIslandProteinEvolverABC = new JTextField(60);
	JLabel labelXZIslandd1 = new JLabel();
	JLabel labelXZIslandd2 = new JLabel();
	JLabel labelXZIslandd3 = new JLabel();
	JLabel labelXZIslandd4 = new JLabel();
	JLabel labelXZIslandd5 = new JLabel();
	JLabel labelXZIslandd6 = new JLabel();
	JLabel labelXZIslandd7 = new JLabel();
	JLabel labelXZIslandd8 = new JLabel();
	JLabel labelXZIslandd9 = new JLabel();
	JLabel labelXZIslandd10 = new JLabel();
	JLabel labelXZIslandd11 = new JLabel();
	JLabel labelXZIslandd12 = new JLabel();
	JLabel labelXZIslandd13 = new JLabel();
	JLabel labelXZIslandd14 = new JLabel();
	JLabel labelXZIslandd15 = new JLabel();
	JLabel labelXZIslandd16 = new JLabel();
	JLabel labelXZIslandd17 = new JLabel();
	JLabel labelXZIslandd18 = new JLabel();
	JLabel labelXZIslandd19 = new JLabel();
	JLabel labelXZIslandd20 = new JLabel();
	JTextField TextMultIsland_Reg1_1 = new JTextField(60);
	JTextField TextMultIsland_Reg1_2 = new JTextField(60);
	JTextField TextMultIsland_Reg1_3 = new JTextField(60);
	JTextField TextMultIsland_Reg1_4 = new JTextField(60);
	JTextField TextMultIsland_Reg1_5 = new JTextField(60);
	JTextField TextMultIsland_Reg1_6 = new JTextField(60);
	JTextField TextMultIsland_Reg1_7 = new JTextField(60);
	JTextField TextMultIsland_Reg1_8 = new JTextField(60);
	JTextField TextMultIsland_Reg1_9 = new JTextField(60);
	JTextField TextMultIsland_Reg1_10 = new JTextField(60);
	JTextField TextMultIsland_Reg1_11 = new JTextField(60);
	JTextField TextMultIsland_Reg1_12 = new JTextField(60);
	JTextField TextMultIsland_Reg1_13 = new JTextField(60);
	JTextField TextMultIsland_Reg1_14 = new JTextField(60);
	JTextField TextMultIsland_Reg1_15 = new JTextField(60);
	JTextField TextMultIsland_Reg1_16 = new JTextField(60);
	JTextField TextMultIsland_Reg1_17 = new JTextField(60);
	JTextField TextMultIsland_Reg1_18 = new JTextField(60);
	JTextField TextMultIsland_Reg1_19 = new JTextField(60);
	JTextField TextMultIsland_Reg1_20 = new JTextField(60);
	int SavedMultIsland = 0;
	//
	JLabel label4eeeSteppStone = new JLabel();
	int OneSteppStone_int = 0;
	static JFrame MultSteppStoneWindow = new JFrame("User-specified demes");
	int FirstTimeMultSteppStoneWindow = 0;
	JButton ButtonNextFrameMultSteppStone_SaveNext = new JButton("Save demes");
	private runButtonMultSteppStoneSaveNextHandler runMultSteppStoneSaveNextHandler;
	JButton ButtonNextFrameMultSteppStone_Back = new JButton("Exit without saving periods");
	private runButtonMultSteppStoneExitHandler runMultSteppStoneExitHandler;
	String[] NumberOfMultSteppStoneProteinEvolverABCOptions = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"};
	JComboBox NumberOfMultSteppStoneProteinEvolverABC_ = new JComboBox(NumberOfMultSteppStoneProteinEvolverABCOptions);
	JTextField TextNumberOfMultSteppStoneProteinEvolverABC = new JTextField(60);
	JLabel labelXZSteppStoned1 = new JLabel();
	JLabel labelXZSteppStoned2 = new JLabel();
	JLabel labelXZSteppStoned3 = new JLabel();
	JLabel labelXZSteppStoned4 = new JLabel();
	JLabel labelXZSteppStoned5 = new JLabel();
	JLabel labelXZSteppStoned6 = new JLabel();
	JLabel labelXZSteppStoned7 = new JLabel();
	JLabel labelXZSteppStoned8 = new JLabel();
	JLabel labelXZSteppStoned9 = new JLabel();
	JLabel labelXZSteppStoned10 = new JLabel();
	JLabel labelXZSteppStoned11 = new JLabel();
	JLabel labelXZSteppStoned12 = new JLabel();
	JLabel labelXZSteppStoned13 = new JLabel();
	JLabel labelXZSteppStoned14 = new JLabel();
	JLabel labelXZSteppStoned15 = new JLabel();
	JLabel labelXZSteppStoned16 = new JLabel();
	JLabel labelXZSteppStoned17 = new JLabel();
	JLabel labelXZSteppStoned18 = new JLabel();
	JLabel labelXZSteppStoned19 = new JLabel();
	JLabel labelXZSteppStoned20 = new JLabel();
	JTextField TextMultSteppStone_Reg1_1 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_2 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_3 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_4 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_5 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_6 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_7 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_8 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_9 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_10 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_11 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_12 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_13 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_14 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_15 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_16 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_17 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_18 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_19 = new JTextField(60);
	JTextField TextMultSteppStone_Reg1_20 = new JTextField(60);
	int SavedMultSteppStone = 0;
	//
	JLabel label4eeeContIsland = new JLabel();
	int OneContIsland_int = 0;
	static JFrame MultContIslandWindow = new JFrame("User-specified demes");
	int FirstTimeMultContIslandWindow = 0;
	JButton ButtonNextFrameMultContIsland_SaveNext = new JButton("Save demes");
	private runButtonMultContIslandSaveNextHandler runMultContIslandSaveNextHandler;
	JButton ButtonNextFrameMultContIsland_Back = new JButton("Exit without saving periods");
	private runButtonMultContIslandExitHandler runMultContIslandExitHandler;
	String[] NumberOfMultContIslandProteinEvolverABCOptions = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"};
	JComboBox NumberOfMultContIslandProteinEvolverABC_ = new JComboBox(NumberOfMultContIslandProteinEvolverABCOptions);
	JTextField TextNumberOfMultContIslandProteinEvolverABC = new JTextField(60);
	JLabel labelXZContIslandd1 = new JLabel();
	JLabel labelXZContIslandd2 = new JLabel();
	JLabel labelXZContIslandd3 = new JLabel();
	JLabel labelXZContIslandd4 = new JLabel();
	JLabel labelXZContIslandd5 = new JLabel();
	JLabel labelXZContIslandd6 = new JLabel();
	JLabel labelXZContIslandd7 = new JLabel();
	JLabel labelXZContIslandd8 = new JLabel();
	JLabel labelXZContIslandd9 = new JLabel();
	JLabel labelXZContIslandd10 = new JLabel();
	JLabel labelXZContIslandd11 = new JLabel();
	JLabel labelXZContIslandd12 = new JLabel();
	JLabel labelXZContIslandd13 = new JLabel();
	JLabel labelXZContIslandd14 = new JLabel();
	JLabel labelXZContIslandd15 = new JLabel();
	JLabel labelXZContIslandd16 = new JLabel();
	JLabel labelXZContIslandd17 = new JLabel();
	JLabel labelXZContIslandd18 = new JLabel();
	JLabel labelXZContIslandd19 = new JLabel();
	JLabel labelXZContIslandd20 = new JLabel();
	JTextField TextMultContIsland_Reg1_1 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_2 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_3 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_4 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_5 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_6 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_7 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_8 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_9 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_10 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_11 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_12 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_13 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_14 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_15 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_16 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_17 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_18 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_19 = new JTextField(60);
	JTextField TextMultContIsland_Reg1_20 = new JTextField(60);
	int SavedMultContIsland = 0;
	//
	private ButtonGroup ConvergenceDemesProteinEvolverABC_group = new ButtonGroup();
    private JRadioButton ConvergenceDemesProteinEvolverABC_No = new JRadioButton("No", false), ConvergenceDemesProteinEvolverABC_Yes = new JRadioButton("Yes", false);
	int NumberOfDemes = 0;
	//
	int NumberOfConvDemes = 0;
	JLabel label4eeeM = new JLabel();
	static JFrame MultPopStructWindow = new JFrame("User-specified demes tree");
	int FirstTimeMultPopStructWindow = 0;
	JButton ButtonNextFrameMultPopStruct_SaveNext = new JButton("Save demes tree");
	private runButtonMultPopStructSaveNextHandler runMultPopStructSaveNextHandler;
	JButton ButtonNextFrameMultPopStruct_Back = new JButton("Exit without saving");
	private runButtonMultPopStructExitHandler runMultPopStructExitHandler;
	String[] NumberOfMultPopStructProteinEvolverABCOptions = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"};
	JComboBox NumberOfMultPopStructProteinEvolverABC_ = new JComboBox(NumberOfMultPopStructProteinEvolverABCOptions);
	JTextField TextNumberOfMultPopStructProteinEvolverABC = new JTextField(60);
	JLabel labelXZdd1 = new JLabel();
	JLabel labelXZdd2 = new JLabel();
	JLabel labelXZdd3 = new JLabel();
	JLabel labelXZdd4 = new JLabel();
	JLabel labelXZdd5 = new JLabel();
	JLabel labelXZdd6 = new JLabel();
	JLabel labelXZdd7 = new JLabel();
	JLabel labelXZdd8 = new JLabel();
	JLabel labelXZdd9 = new JLabel();
	JLabel labelXZdd10 = new JLabel();
	JTextField TextMultPopStruct_Reg1_1 = new JTextField(60);
	JTextField TextMultPopStruct_Reg1_2 = new JTextField(60);
	JTextField TextMultPopStruct_Reg1_3 = new JTextField(60);
	JTextField TextMultPopStruct_Reg1_4 = new JTextField(60);
	JTextField TextMultPopStruct_Reg1_5 = new JTextField(60);
	JTextField TextMultPopStruct_Reg1_6 = new JTextField(60);
	JTextField TextMultPopStruct_Reg1_7 = new JTextField(60);
	JTextField TextMultPopStruct_Reg1_8 = new JTextField(60);
	JTextField TextMultPopStruct_Reg1_9 = new JTextField(60);
	JTextField TextMultPopStruct_Reg1_10 = new JTextField(60);
	JTextField TextMultPopStruct_Reg2_1 = new JTextField(60);
	JTextField TextMultPopStruct_Reg2_2 = new JTextField(60);
	JTextField TextMultPopStruct_Reg2_3 = new JTextField(60);
	JTextField TextMultPopStruct_Reg2_4 = new JTextField(60);
	JTextField TextMultPopStruct_Reg2_5 = new JTextField(60);
	JTextField TextMultPopStruct_Reg2_6 = new JTextField(60);
	JTextField TextMultPopStruct_Reg2_7 = new JTextField(60);
	JTextField TextMultPopStruct_Reg2_8 = new JTextField(60);
	JTextField TextMultPopStruct_Reg2_9 = new JTextField(60);
	JTextField TextMultPopStruct_Reg2_10 = new JTextField(60);
	JTextField TextMultPopStructProteinEvolverABC_1 = new JTextField(60);
	JTextField TextMultPopStructProteinEvolverABC_2 = new JTextField(60);
	JTextField TextMultPopStructProteinEvolverABC_3 = new JTextField(60);
	JTextField TextMultPopStructProteinEvolverABC_4 = new JTextField(60);
	JTextField TextMultPopStructProteinEvolverABC_5 = new JTextField(60);
	JTextField TextMultPopStructProteinEvolverABC_6 = new JTextField(60);
	JTextField TextMultPopStructProteinEvolverABC_7 = new JTextField(60);
	JTextField TextMultPopStructProteinEvolverABC_8 = new JTextField(60);
	JTextField TextMultPopStructProteinEvolverABC_9 = new JTextField(60);
	JTextField TextMultPopStructProteinEvolverABC_10 = new JTextField(60);		
	int SavedMultPopStruct = 0;
	//
	JLabel label4eeeSD = new JLabel();
	static JFrame MultMigrationRatesWindow = new JFrame("Variable Migration rates with time");
	int FirstTimeMultMigrationRatesWindow = 0;
	JButton ButtonNextFrameMultMigrationRates_SaveNext = new JButton("Save");
	private runButtonMultMigrationRatesSaveNextHandler runMultMigrationRatesSaveNextHandler;
	JButton ButtonNextFrameMultMigrationRates_Back = new JButton("Exit");
	private runButtonMultMigrationRatesExitHandler runMultMigrationRatesExitHandler;
	String[] NumberOfMultMigrationRatesProteinEvolverABCOptions = {"1", "2", "3", "4", "5"/*, "6", "7"*/};
	JComboBox NumberOfMultMigrationRatesProteinEvolverABC_ = new JComboBox(NumberOfMultMigrationRatesProteinEvolverABCOptions);
	JTextField TextNumberOfMultMigrationRatesProteinEvolverABC = new JTextField(60);
	JLabel labelSD1 = new JLabel();
	JLabel labelSD2 = new JLabel();
	JLabel labelSD3 = new JLabel();
	JLabel labelSD4 = new JLabel();
	JLabel labelSD5 = new JLabel();
	JLabel labelSD6 = new JLabel();
	JLabel labelSD7 = new JLabel();
	JTextField TextMultMigrationRates_Reg1_1 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg1_2 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg1_2 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg2_2 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg1_3 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg1_3 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg2_3 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg2_3 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg3_3 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg1_4 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg1_4 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg2_4 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg2_4 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg3_4 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg3_4 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg4_4 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg1_5 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg1_5 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg2_5 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg2_5 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg3_5 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg3_5 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg4_5 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg4_5 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg5_5 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg1_6 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg1_6 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg2_6 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg2_6 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg3_6 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg3_6 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg4_6 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg4_6 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg5_6 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg5_6 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg6_6 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg1_7 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg1_7 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg2_7 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg2_7 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg3_7 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg3_7 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg4_7 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg4_7 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg5_7 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg5_7 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg6_7 = new JTextField(60);
	JTextField TextMultMigrationRatesTime_Reg6_7 = new JTextField(60);
	JTextField TextMultMigrationRates_Reg7_7 = new JTextField(60);
	int SavedMultMigrationRates = 0;
	//
	private ButtonGroup MigrationRate_group = new ButtonGroup();
    private JRadioButton MigrationRate_Cte = new JRadioButton("Constant with time", false), MigrationRate_Var = new JRadioButton("Variable with time", false);
	JTextField TextMigrationRateProteinEvolverABC = new JTextField(80);
	/////
	JLabel label4eee = new JLabel();
	static JFrame MultDemogPeriodsWindow = new JFrame("User-specified demographic periods");
	int FirstTimeMultDemogPeriodsWindow = 0;
	JButton ButtonNextFrameMultDemogPeriods_SaveNext = new JButton("Save demographic periods");
	private runButtonMultDemogPeriodsSaveNextHandler runMultDemogPeriodsSaveNextHandler;
	JButton ButtonNextFrameMultDemogPeriods_Back = new JButton("Exit without saving periods");
	private runButtonMultDemogPeriodsExitHandler runMultDemogPeriodsExitHandler;
	String[] NumberOfMultDemogPeriodsProteinEvolverABCOptions = {"2", "3", "4", "5", "6", "7", "8", "9", "10"};
	JComboBox NumberOfMultDemogPeriodsProteinEvolverABC_ = new JComboBox(NumberOfMultDemogPeriodsProteinEvolverABCOptions);
	JTextField TextNumberOfMultDemogPeriodsProteinEvolverABC = new JTextField(60);
	JLabel labelXZd1 = new JLabel();
	JLabel labelXZd2 = new JLabel();
	JLabel labelXZd3 = new JLabel();
	JLabel labelXZd4 = new JLabel();
	JLabel labelXZd5 = new JLabel();
	JLabel labelXZd6 = new JLabel();
	JLabel labelXZd7 = new JLabel();
	JLabel labelXZd8 = new JLabel();
	JLabel labelXZd9 = new JLabel();
	JLabel labelXZd10 = new JLabel();
	JTextField TextMultDemogPeriods_Reg1_1 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg1_2 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg1_3 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg1_4 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg1_5 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg1_6 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg1_7 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg1_8 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg1_9 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg1_10 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg2_1 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg2_2 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg2_3 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg2_4 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg2_5 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg2_6 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg2_7 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg2_8 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg2_9 = new JTextField(60);
	JTextField TextMultDemogPeriods_Reg2_10 = new JTextField(60);
	JTextField TextMultDemogPeriodsProteinEvolverABC_1 = new JTextField(60);
	JTextField TextMultDemogPeriodsProteinEvolverABC_2 = new JTextField(60);
	JTextField TextMultDemogPeriodsProteinEvolverABC_3 = new JTextField(60);
	JTextField TextMultDemogPeriodsProteinEvolverABC_4 = new JTextField(60);
	JTextField TextMultDemogPeriodsProteinEvolverABC_5 = new JTextField(60);
	JTextField TextMultDemogPeriodsProteinEvolverABC_6 = new JTextField(60);
	JTextField TextMultDemogPeriodsProteinEvolverABC_7 = new JTextField(60);
	JTextField TextMultDemogPeriodsProteinEvolverABC_8 = new JTextField(60);
	JTextField TextMultDemogPeriodsProteinEvolverABC_9 = new JTextField(60);
	JTextField TextMultDemogPeriodsProteinEvolverABC_10 = new JTextField(60);		
	int SavedMultDemogPeriods = 0;
	/////
	static JFrame MultDemogPeriodsStructPop_VARYWindow = new JFrame("User-specified demographic periods");
	int FirstTimeMultDemogPeriodsStructPop_VARYWindow = 0;
	JButton ButtonNextFrameMultDemogPeriodsStructPop_VARY_SaveNext = new JButton("Save demographics");
	private runButtonMultDemogPeriodsStructPop_VARYSaveNextHandler runMultDemogPeriodsStructPop_VARYSaveNextHandler;
	JButton ButtonNextFrameMultDemogPeriodsStructPop_VARY_Back = new JButton("Exit without saving demographics");
	private runButtonMultDemogPeriodsStructPop_VARYExitHandler runMultDemogPeriodsStructPop_VARYExitHandler;
	String[] NumberOfMultDemogPeriodsStructPop_VARYProteinEvolverABCOptions = {"2", "3", "4", "5", "6", "7", "8", "9", "10"};
	JComboBox NumberOfMultDemogPeriodsStructPop_VARYProteinEvolverABC_ = new JComboBox(NumberOfMultDemogPeriodsStructPop_VARYProteinEvolverABCOptions);
	JTextField TextNumberOfMultDemogPeriodsStructPop_VARYProteinEvolverABC = new JTextField(60);
	JLabel labelRZd1 = new JLabel();
	JLabel labelRZd2 = new JLabel();
	JLabel labelRZd3 = new JLabel();
	JLabel labelRZd4 = new JLabel();
	JLabel labelRZd5 = new JLabel();
	JLabel labelRZd6 = new JLabel();
	JLabel labelRZd7 = new JLabel();
	JLabel labelRZd8 = new JLabel();
	JLabel labelRZd9 = new JLabel();
	JLabel labelRZd10 = new JLabel();
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg1_1 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg1_2 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg1_3 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg1_4 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg1_5 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg1_6 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg1_7 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg1_8 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg1_9 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg1_10 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg2_1 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg2_2 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg2_3 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg2_4 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg2_5 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg2_6 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg2_7 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg2_8 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg2_9 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_VARY_Reg2_10 = new JTextField(60);
	int SavedMultDemogPeriodsStructPop_VARY = 0;
	/////
	static JFrame MultDemogPeriodsStructPop_CTEWindow = new JFrame("User-specified demographic periods");
	int FirstTimeMultDemogPeriodsStructPop_CTEWindow = 0;
	JButton ButtonNextFrameMultDemogPeriodsStructPop_CTE_SaveNext = new JButton("Save demographics");
	private runButtonMultDemogPeriodsStructPop_CTESaveNextHandler runMultDemogPeriodsStructPop_CTESaveNextHandler;
	JButton ButtonNextFrameMultDemogPeriodsStructPop_CTE_Back = new JButton("Exit without saving demographics");
	private runButtonMultDemogPeriodsStructPop_CTEExitHandler runMultDemogPeriodsStructPop_CTEExitHandler;
	String[] NumberOfMultDemogPeriodsStructPop_CTEProteinEvolverABCOptions = {"2", "3", "4", "5", "6", "7", "8", "9", "10"};
	JComboBox NumberOfMultDemogPeriodsStructPop_CTEProteinEvolverABC_ = new JComboBox(NumberOfMultDemogPeriodsStructPop_CTEProteinEvolverABCOptions);
	JTextField TextNumberOfMultDemogPeriodsStructPop_CTEProteinEvolverABC = new JTextField(60);
	JLabel labelAZd1 = new JLabel();
	JLabel labelAZd2 = new JLabel();
	JLabel labelAZd3 = new JLabel();
	JLabel labelAZd4 = new JLabel();
	JLabel labelAZd5 = new JLabel();
	JLabel labelAZd6 = new JLabel();
	JLabel labelAZd7 = new JLabel();
	JLabel labelAZd8 = new JLabel();
	JLabel labelAZd9 = new JLabel();
	JLabel labelAZd10 = new JLabel();
	JTextField TextMultDemogPeriodsStructPop_CTE_Reg1_1 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_CTE_Reg1_2 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_CTE_Reg1_3 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_CTE_Reg1_4 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_CTE_Reg1_5 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_CTE_Reg1_6 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_CTE_Reg1_7 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_CTE_Reg1_8 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_CTE_Reg1_9 = new JTextField(60);
	JTextField TextMultDemogPeriodsStructPop_CTE_Reg1_10 = new JTextField(60);
	int SavedMultDemogPeriodsStructPop_CTE = 0;
	////
	String[] HomRecRateProteinEvolverABCOptions = {"fix", "uniform", "exponential", "normal", "gamma", "beta"}; // fix, unif, norm(t), exp(t), gamma(t), beta(t)
    JComboBox HomRecRateProteinEvolverABC = new JComboBox(HomRecRateProteinEvolverABCOptions);
	JLabel TextHomRecRateProteinEvolverABC = new JLabel();
	JLabel Rho = new JLabel();
	String AVrho = "";
	int PrintRho = 1; // 1 yes, 0 no
	double rfix = -1;
	double rtwomin = -1;
	double rtwomax = -1;
	int rtype = 1; // 0 fix, 1 two
	/*private ButtonGroup RecHotspotsProteinEvolverABC_group = new ButtonGroup();
    private JRadioButton RecHotspotsProteinEvolverABC_No = new JRadioButton("No", false), RecHotspotsProteinEvolverABC_Yes = new JRadioButton("Yes", false);
	JTextField TextRecHotspotsProteinEvolverABC = new JTextField(90);
	int TextRecHotspotsProteinEvolverABC_int = 0;
	private ButtonGroup OutgroupProteinEvolverABC_group = new ButtonGroup();
    private JRadioButton OutgroupProteinEvolverABC_No = new JRadioButton("No", false), OutgroupProteinEvolverABC_Yes = new JRadioButton("Yes", false);
	JTextField TextOutgroupProteinEvolverABC = new JTextField(50);
	int TextOutgroupProteinEvolverABC_int = 0;	*/
	private runButton4Handler run4Handler;

	private runButton5Handler run5Handler;

	private runButton6Handler run6Handler;


	String[] SubstitutionRateProteinEvolverABCOptions = {"fix", "uniform", "exponential", "normal", "gamma", "beta"}; // fix, unif, norm(t), exp(t), gamma(t), beta(t)
    JComboBox SubstitutionRateProteinEvolverABC = new JComboBox(SubstitutionRateProteinEvolverABCOptions);
	JLabel TextSubstitutionRateProteinEvolverABC = new JLabel();
	JLabel Theta = new JLabel();
	JLabel label7cz = new JLabel(); /// dN/dS
	JLabel TextProteinSubstitutionModel = new JLabel();
    JLabel TextProteinSubstitutionModel_W = new JLabel();
	String[] ProteinSubstitutionModelOptions = {"Blosum62", "CpRev", "Dayhoff", "DayhoffDCMUT", "HIVb", "HIVw", "JTT", "JonesDCMUT", "LG", "Mtart", "Mtmam", "Mtrev24", "RtRev", "VT", "WAG", "UserEAAM"};
    JComboBox ProteinSubstitutionModel = new JComboBox(ProteinSubstitutionModelOptions);
	String ProteinEvolverABCTypeOfAAFreqs = "";
	private ButtonGroup ProteinEvolverABCTypeOfAAFreqs_group = new ButtonGroup();
    private JRadioButton ProteinEvolverABCTypeOfAAFreqs_NO = new JRadioButton("No", false), ProteinEvolverABCTypeOfAAFreqs_YES = new JRadioButton("Yes", false);
	//
	static JFrame AA_normal_Freqs_ProteinEvolverABCWindow = new JFrame("Amino acid frequencies");
	JTextField TextAAFreqsProteinEvolverABC_1A = new JTextField(90);
	JTextField TextAAFreqsProteinEvolverABC_1R = new JTextField(90);
	JTextField TextAAFreqsProteinEvolverABC_1N = new JTextField(90);
	JTextField TextAAFreqsProteinEvolverABC_1D = new JTextField(90);
	JTextField TextAAFreqsProteinEvolverABC_1C = new JTextField(90);
	JTextField TextAAFreqsProteinEvolverABC_1Q = new JTextField(90);
	JTextField TextAAFreqsProteinEvolverABC_1E = new JTextField(90);
	JTextField TextAAFreqsProteinEvolverABC_1G = new JTextField(90);
	JTextField TextAAFreqsProteinEvolverABC_1H = new JTextField(90);
	JTextField TextAAFreqsProteinEvolverABC_1I = new JTextField(90);
	JTextField TextAAFreqsProteinEvolverABC_1L = new JTextField(90);
	JTextField TextAAFreqsProteinEvolverABC_1K = new JTextField(90);
    JTextField TextAAFreqsProteinEvolverABC_1M = new JTextField(90);
    JTextField TextAAFreqsProteinEvolverABC_1F = new JTextField(90);
    JTextField TextAAFreqsProteinEvolverABC_1P = new JTextField(90);
    JTextField TextAAFreqsProteinEvolverABC_1S = new JTextField(90);
    JTextField TextAAFreqsProteinEvolverABC_1T = new JTextField(90);
    JTextField TextAAFreqsProteinEvolverABC_1W = new JTextField(90);
    JTextField TextAAFreqsProteinEvolverABC_1Y = new JTextField(90);
    JTextField TextAAFreqsProteinEvolverABC_1V = new JTextField(90);
        
	String[] ProteinEvolverABCTypeOfAAFreqs_FixDir1_Options = {"fix", "dirichlet"};
    JComboBox ProteinEvolverABCTypeOfAAFreqs_FixDir1_ = new JComboBox(ProteinEvolverABCTypeOfAAFreqs_FixDir1_Options);
	JButton ButtonNextFrameAA_normal_Freqs_ProteinEvolverABC_SaveNext = new JButton("Save frequencies");
	private runButtonAA_normal_Freqs_ProteinEvolverABCSaveNextHandler runAA_normal_Freqs_ProteinEvolverABCSaveNextHandler;
	JButton ButtonNextFrameAA_normal_Freqs_ProteinEvolverABC_Back = new JButton("Exit without saving frequencies");
	private runButtonAA_normal_Freqs_ProteinEvolverABCExitHandler runAA_normal_Freqs_ProteinEvolverABCExitHandler;
	int FirstTimeAA_normal_Freqs_ProteinEvolverABCWindow = 0;
	JLabel TextAAFreqsNormalProteinEvolverABC = new JLabel();
	///////
	JLabel TextAA_I_ProteinEvolverABC = new JLabel();
	String[] AA_I_ProteinEvolverABCOptions = {"fix", "uniform", "exponential", "normal", "gamma", "beta"}; // fix, unif, norm(t), exp(t), gamma(t), beta(t)
    JComboBox AA_I_ProteinEvolverABC = new JComboBox(AA_I_ProteinEvolverABCOptions);
	String[] AA_Gsites_ProteinEvolverABCOptions = {"fix", "uniform", "exponential", "normal", "gamma", "beta"}; // fix, unif, norm(t), exp(t), gamma(t), beta(t)
    JComboBox AA_Gsites_ProteinEvolverABC = new JComboBox(AA_Gsites_ProteinEvolverABCOptions);
	JLabel TextAA_Gsites_ProteinEvolverABC = new JLabel();
	JLabel label7j = new JLabel();
	JLabel label7ha = new JLabel();
	JLabel label7i = new JLabel();
	private ButtonGroup KindAA_I_group = new ButtonGroup();
    private JRadioButton KindAA_I_NO = new JRadioButton("No", false), KindAA_I_YES = new JRadioButton("Yes", false);
	private ButtonGroup KindAA_Gsites_group = new ButtonGroup();
    private JRadioButton KindAA_Gsites_NO = new JRadioButton("No", false), KindAA_Gsites_YES = new JRadioButton("Yes", false);
	private runButton7Handler run7Handler;
	//

	private runButton8Handler run8Handler;
	private runButton9Handler run9Handler;
	private runButton11Handler run11Handler;
	private runButton12Handler run12Handler;
	private runButton13Handler run13Handler;
	
	JTextField TextABCIterations = new JTextField(10);
	JTextField TextABCTolerance = new JTextField(10);
	private ButtonGroup KindABCmethod_group = new ButtonGroup();
    private JRadioButton KindABCmethod_rej = new JRadioButton("Rejection", false), KindABCmethod_log = new JRadioButton("Loclinear", false);
	private ButtonGroup KindABCtransformation_group = new ButtonGroup();
    private JRadioButton KindABCtransformation_None = new JRadioButton("None", false), KindABCtransformation_Log = new JRadioButton("Log", false), KindABCtransformation_Logit = new JRadioButton("Logit", false);
	private ButtonGroup KindABCcorrection_group = new ButtonGroup();
    private JRadioButton KindABCcorrection_No = new JRadioButton("No", false), KindABCcorrection_Yes = new JRadioButton("Yes", false);
	JTextField TextABCSummaryStatistics = new JTextField(10);
	String SS1 = " 1";
	String SS2 = " 2";
	String SS3 = " 3";
	String SS4 = " 4";
	String SS5 = " 5";
	String SS6 = " 6";
	String SS7 = " 7";
	String SS8 = " 8";
	String SS9 = " 9";
	String SS10 = " 10";
	String SS11 = " 11";
	String SS12 = " 12";
	String SS13 = " 13";
	String SS14 = " 14";
	String SS15 = " 15";
	String SS16 = " 16";
	/*String SS17 = " 17";
	String SS18 = " 18";
	String SS19 = " 19";
	String SS20 = " 20";
	String SS21 = " 21";
	String SS22 = " 22";
	String SS23 = " 23";
	String SS24 = " 24";
	String SS25 = " 25";
	String SS26 = " 26";*/
    JCheckBox SS_choose1 = new JCheckBox("Phi", true);
    boolean selectedSS_choose1;
    JCheckBox SS_choose2 = new JCheckBox("NSS", true);
    boolean selectedSS_choose2;
    JCheckBox SS_choose3 = new JCheckBox("MaxChiSquare", true);
    boolean selectedSS_choose3;
	JCheckBox SS_choose4 = new JCheckBox("AADiff_Avrge", true);
	boolean selectedSS_choose4;
	JCheckBox SS_choose5 = new JCheckBox("AADiff_Sd", true);
	boolean selectedSS_choose5;
	JCheckBox SS_choose6 = new JCheckBox("AADiff_Skewnss", true);
	boolean selectedSS_choose6;
	JCheckBox SS_choose7 = new JCheckBox("AADiff_Kurtosis", true);
	boolean selectedSS_choose7;
	JCheckBox SS_choose8 = new JCheckBox("AAHetrzgs_Avrge", true);
	boolean selectedSS_choose8;
	JCheckBox SS_choose9 = new JCheckBox("AAHetrzgs_Sd", true);
	boolean selectedSS_choose9;
	JCheckBox SS_choose10 = new JCheckBox("AAHetrzgs_Skewnss", true);
	boolean selectedSS_choose10;
	JCheckBox SS_choose11 = new JCheckBox("AAHetrzgs_Kurtosis", true);
	boolean selectedSS_choose11;
	JCheckBox SS_choose12 = new JCheckBox("AA_SegSites", true);
	boolean selectedSS_choose12;
	JCheckBox SS_choose13 = new JCheckBox("AASeqsId_Avrge", true);
	boolean selectedSS_choose13;
	JCheckBox SS_choose14 = new JCheckBox("AASeqsId_Sd", true);
	boolean selectedSS_choose14;
	JCheckBox SS_choose15 = new JCheckBox("AASeqsId_Skewnss", true);
	boolean selectedSS_choose15;
	JCheckBox SS_choose16 = new JCheckBox("AASeqsId_Kurtosis", true);
	boolean selectedSS_choose16;
	private ButtonGroup KindABCpages_group = new ButtonGroup();
    private JRadioButton KindABCpages_No = new JRadioButton("No", false), KindABCpages_Yes = new JRadioButton("Yes", false);
	private runButton15Handler run15Handler;

 	private runButton34Handler run34Handler;
	private runButton35Handler run35Handler;
	private runButton35bHandler run35bHandler;
    private runButton35dHandler run35dHandler;

    private runButton40Handler run40Handler;
    private runButton40dHandler run40dHandler;
    JTextField TextSettingsFile = new JTextField(15);
    JTextArea textAreaOut_1;
    JScrollPane scrolltextAreaOut_1;
        
    private runButton41Handler run41Handler;
    private runButton41dHandler run41dHandler;
    JTextArea textAreaOut_2;
    JScrollPane scrolltextAreaOut_2;
        
        
	/////// Fix/unif (integer) /////// Population size
	static JFrame FixInt_Window_PopSize = new JFrame("Fix (integer)");
	int FirstTimeFixInt_Window_PopSize = 0;
	JTextField TextFixInteger_PopSize = new JTextField(90);
	JButton ButtonNext_FixInt_Window_Next_PopSize = new JButton("Save and exit");
	JButton ButtonNext_FixInt_Window_Handler_Back_PopSize = new JButton("Exit without saving");
	static JFrame unifInt_Window_PopSize = new JFrame("unif (integer) distribution");
	int FirstTimeunifInt_Window_PopSize = 0;
	JTextField Textunif1Integer_PopSize = new JTextField(90);
	JTextField Textunif2Integer_PopSize = new JTextField(90);
	JButton ButtonNext_unifInt_Window_Next_PopSize = new JButton("Save and exit");
	JButton ButtonNext_unifInt_Window_Handler_Back_PopSize = new JButton("Exit without saving");
	String OutputDistribution_PopSize = "";

	
	/////// fix, unif, norm(t), exp(t), gamma(t), beta(t) (double) /////// HomRecRateProteinEvolverABC
	static JFrame Fix_Window_HomRecRate = new JFrame("Fix");
	int FirstTimeFix_Window_HomRecRate = 0;
	JTextField TextFix_HomRecRate = new JTextField(90);
	JButton ButtonNext_Fix_Window_Next_HomRecRate = new JButton("Save and exit");
	JButton ButtonNext_Fix_Window_Handler_Back_HomRecRate = new JButton("Exit without saving");
	static JFrame Unif_Window_HomRecRate = new JFrame("Uniform distribution");
	int FirstTimeUnif_Window_HomRecRate = 0;
	JTextField TextUnif1_HomRecRate = new JTextField(90);
	JTextField TextUnif2_HomRecRate = new JTextField(90);
	JButton ButtonNext_Unif_Window_Next_HomRecRate = new JButton("Save and exit");
	JButton ButtonNext_Unif_Window_Handler_Back_HomRecRate = new JButton("Exit without saving");
	static JFrame Exp_Window_HomRecRate = new JFrame("Exponential distribution");
	int FirstTimeExp_Window_HomRecRate = 0;
	JTextField TextExp1_HomRecRate = new JTextField(90);
	JTextField TextExp3_HomRecRate = new JTextField(90);
	JTextField TextExp4_HomRecRate = new JTextField(90);
	JButton ButtonNext_Exp_Window_Next_HomRecRate = new JButton("Save and exit");
	JButton ButtonNext_Exp_Window_Handler_Back_HomRecRate = new JButton("Exit without saving");
	JLabel HomRecRate_labelt1_Exp = new JLabel();
	JLabel HomRecRate_labelt2_Exp = new JLabel();
	static JFrame Norm_Window_HomRecRate = new JFrame("Normal distribution");
	int FirstTimeNorm_Window_HomRecRate = 0;
	JTextField TextNorm1_HomRecRate = new JTextField(90);
	JTextField TextNorm2_HomRecRate = new JTextField(90);
	JTextField TextNorm3_HomRecRate = new JTextField(90);
	JTextField TextNorm4_HomRecRate = new JTextField(90);
	JButton ButtonNext_Norm_Window_Next_HomRecRate = new JButton("Save and exit");
	JButton ButtonNext_Norm_Window_Handler_Back_HomRecRate = new JButton("Exit without saving");
	JLabel HomRecRate_labelt1_Norm = new JLabel();
	JLabel HomRecRate_labelt2_Norm = new JLabel();
	static JFrame Gamma_Window_HomRecRate = new JFrame("Gamma distribution");
	int FirstTimeGamma_Window_HomRecRate = 0;
	JTextField TextGamma1_HomRecRate = new JTextField(90);
	JTextField TextGamma2_HomRecRate = new JTextField(90);
	JTextField TextGamma3_HomRecRate = new JTextField(90);
	JTextField TextGamma4_HomRecRate = new JTextField(90);
	JButton ButtonNext_Gamma_Window_Next_HomRecRate = new JButton("Save and exit");
	JButton ButtonNext_Gamma_Window_Handler_Back_HomRecRate = new JButton("Exit without saving");
	JLabel HomRecRate_labelt1_Gamma = new JLabel();
	JLabel HomRecRate_labelt2_Gamma = new JLabel();
	static JFrame Beta_Window_HomRecRate = new JFrame("Beta distribution");
	int FirstTimeBeta_Window_HomRecRate = 0;
	JTextField TextBeta1_HomRecRate = new JTextField(90);
	JTextField TextBeta2_HomRecRate = new JTextField(90);
	JTextField TextBeta3_HomRecRate = new JTextField(90);
	JTextField TextBeta4_HomRecRate = new JTextField(90);
	JButton ButtonNext_Beta_Window_Next_HomRecRate = new JButton("Save and exit");
	JButton ButtonNext_Beta_Window_Handler_Back_HomRecRate = new JButton("Exit without saving");
	JLabel HomRecRate_labelt1_Beta = new JLabel();
	JLabel HomRecRate_labelt2_Beta = new JLabel();
	String OutputDistribution_HomRecRate = "";


	/////// fix, unif, norm(t), exp(t), gamma(t), beta(t) (double) /////// GrowthRateProteinEvolverABC
	static JFrame Fix_Window_GrowthRate = new JFrame("Fix");
	int FirstTimeFix_Window_GrowthRate = 0;
	JTextField TextFix_GrowthRate = new JTextField(90);
	JButton ButtonNext_Fix_Window_Next_GrowthRate = new JButton("Save and exit");
	JButton ButtonNext_Fix_Window_Handler_Back_GrowthRate = new JButton("Exit without saving");
	static JFrame Unif_Window_GrowthRate = new JFrame("Uniform distribution");
	int FirstTimeUnif_Window_GrowthRate = 0;
	JTextField TextUnif1_GrowthRate = new JTextField(90);
	JTextField TextUnif2_GrowthRate = new JTextField(90);
	JButton ButtonNext_Unif_Window_Next_GrowthRate = new JButton("Save and exit");
	JButton ButtonNext_Unif_Window_Handler_Back_GrowthRate = new JButton("Exit without saving");
	static JFrame Exp_Window_GrowthRate = new JFrame("Exponential distribution");
	int FirstTimeExp_Window_GrowthRate = 0;
	JTextField TextExp1_GrowthRate = new JTextField(90);
	JTextField TextExp3_GrowthRate = new JTextField(90);
	JTextField TextExp4_GrowthRate = new JTextField(90);
	JButton ButtonNext_Exp_Window_Next_GrowthRate = new JButton("Save and exit");
	JButton ButtonNext_Exp_Window_Handler_Back_GrowthRate = new JButton("Exit without saving");
	JLabel GrowthRate_labelt1_Exp = new JLabel();
	JLabel GrowthRate_labelt2_Exp = new JLabel();
	static JFrame Norm_Window_GrowthRate = new JFrame("Normal distribution");
	int FirstTimeNorm_Window_GrowthRate = 0;
	JTextField TextNorm1_GrowthRate = new JTextField(90);
	JTextField TextNorm2_GrowthRate = new JTextField(90);
	JTextField TextNorm3_GrowthRate = new JTextField(90);
	JTextField TextNorm4_GrowthRate = new JTextField(90);
	JButton ButtonNext_Norm_Window_Next_GrowthRate = new JButton("Save and exit");
	JButton ButtonNext_Norm_Window_Handler_Back_GrowthRate = new JButton("Exit without saving");
	JLabel GrowthRate_labelt1_Norm = new JLabel();
	JLabel GrowthRate_labelt2_Norm = new JLabel();
	static JFrame Gamma_Window_GrowthRate = new JFrame("Gamma distribution");
	int FirstTimeGamma_Window_GrowthRate = 0;
	JTextField TextGamma1_GrowthRate = new JTextField(90);
	JTextField TextGamma2_GrowthRate = new JTextField(90);
	JTextField TextGamma3_GrowthRate = new JTextField(90);
	JTextField TextGamma4_GrowthRate = new JTextField(90);
	JButton ButtonNext_Gamma_Window_Next_GrowthRate = new JButton("Save and exit");
	JButton ButtonNext_Gamma_Window_Handler_Back_GrowthRate = new JButton("Exit without saving");
	JLabel GrowthRate_labelt1_Gamma = new JLabel();
	JLabel GrowthRate_labelt2_Gamma = new JLabel();
	static JFrame Beta_Window_GrowthRate = new JFrame("Beta distribution");
	int FirstTimeBeta_Window_GrowthRate = 0;
	JTextField TextBeta1_GrowthRate = new JTextField(90);
	JTextField TextBeta2_GrowthRate = new JTextField(90);
	JTextField TextBeta3_GrowthRate = new JTextField(90);
	JTextField TextBeta4_GrowthRate = new JTextField(90);
	JButton ButtonNext_Beta_Window_Next_GrowthRate = new JButton("Save and exit");
	JButton ButtonNext_Beta_Window_Handler_Back_GrowthRate = new JButton("Exit without saving");
	JLabel GrowthRate_labelt1_Beta = new JLabel();
	JLabel GrowthRate_labelt2_Beta = new JLabel();
	String OutputDistribution_GrowthRate = "";


	/////// Fix/unif (integer) /////// Generation time
	static JFrame FixInt_Window_GenTime = new JFrame("Fix (integer)");
	int FirstTimeFixInt_Window_GenTime = 0;
	JTextField TextFixInteger_GenTime = new JTextField(90);
	JButton ButtonNext_FixInt_Window_Next_GenTime = new JButton("Save and exit");
	JButton ButtonNext_FixInt_Window_Handler_Back_GenTime = new JButton("Exit without saving");
	static JFrame unifInt_Window_GenTime = new JFrame("unif (integer) distribution");
	int FirstTimeunifInt_Window_GenTime = 0;
	JTextField Textunif1Integer_GenTime = new JTextField(90);
	JTextField Textunif2Integer_GenTime = new JTextField(90);
	JButton ButtonNext_unifInt_Window_Next_GenTime = new JButton("Save and exit");
	JButton ButtonNext_unifInt_Window_Handler_Back_GenTime = new JButton("Exit without saving");
	String OutputDistribution_GenTime = "";

	
	/////// fix, unif, norm(t), exp(t), gamma(t), beta(t) (double) /////// SubstitutionRateProteinEvolverABC
	static JFrame Fix_Window_SubstitutionRate = new JFrame("Fix");
	int FirstTimeFix_Window_SubstitutionRate = 0;
	JTextField TextFix_SubstitutionRate = new JTextField(90);
	JButton ButtonNext_Fix_Window_Next_SubstitutionRate = new JButton("Save and exit");
	JButton ButtonNext_Fix_Window_Handler_Back_SubstitutionRate = new JButton("Exit without saving");
	static JFrame Unif_Window_SubstitutionRate = new JFrame("Uniform distribution");
	int FirstTimeUnif_Window_SubstitutionRate = 0;
	JTextField TextUnif1_SubstitutionRate = new JTextField(90);
	JTextField TextUnif2_SubstitutionRate = new JTextField(90);
	JButton ButtonNext_Unif_Window_Next_SubstitutionRate = new JButton("Save and exit");
	JButton ButtonNext_Unif_Window_Handler_Back_SubstitutionRate = new JButton("Exit without saving");
	static JFrame Exp_Window_SubstitutionRate = new JFrame("Exponential distribution");
	int FirstTimeExp_Window_SubstitutionRate = 0;
	JTextField TextExp1_SubstitutionRate = new JTextField(90);
	JTextField TextExp3_SubstitutionRate = new JTextField(90);
	JTextField TextExp4_SubstitutionRate = new JTextField(90);
	JButton ButtonNext_Exp_Window_Next_SubstitutionRate = new JButton("Save and exit");
	JButton ButtonNext_Exp_Window_Handler_Back_SubstitutionRate = new JButton("Exit without saving");
	JLabel SubstitutionRate_labelt1_Exp = new JLabel();
	JLabel SubstitutionRate_labelt2_Exp = new JLabel();
	static JFrame Norm_Window_SubstitutionRate = new JFrame("Normal distribution");
	int FirstTimeNorm_Window_SubstitutionRate = 0;
	JTextField TextNorm1_SubstitutionRate = new JTextField(90);
	JTextField TextNorm2_SubstitutionRate = new JTextField(90);
	JTextField TextNorm3_SubstitutionRate = new JTextField(90);
	JTextField TextNorm4_SubstitutionRate = new JTextField(90);
	JButton ButtonNext_Norm_Window_Next_SubstitutionRate = new JButton("Save and exit");
	JButton ButtonNext_Norm_Window_Handler_Back_SubstitutionRate = new JButton("Exit without saving");
	JLabel SubstitutionRate_labelt1_Norm = new JLabel();
	JLabel SubstitutionRate_labelt2_Norm = new JLabel();
	static JFrame Gamma_Window_SubstitutionRate = new JFrame("Gamma distribution");
	int FirstTimeGamma_Window_SubstitutionRate = 0;
	JTextField TextGamma1_SubstitutionRate = new JTextField(90);
	JTextField TextGamma2_SubstitutionRate = new JTextField(90);
	JTextField TextGamma3_SubstitutionRate = new JTextField(90);
	JTextField TextGamma4_SubstitutionRate = new JTextField(90);
	JButton ButtonNext_Gamma_Window_Next_SubstitutionRate = new JButton("Save and exit");
	JButton ButtonNext_Gamma_Window_Handler_Back_SubstitutionRate = new JButton("Exit without saving");
	JLabel SubstitutionRate_labelt1_Gamma = new JLabel();
	JLabel SubstitutionRate_labelt2_Gamma = new JLabel();
	static JFrame Beta_Window_SubstitutionRate = new JFrame("Beta distribution");
	int FirstTimeBeta_Window_SubstitutionRate = 0;
	JTextField TextBeta1_SubstitutionRate = new JTextField(90);
	JTextField TextBeta2_SubstitutionRate = new JTextField(90);
	JTextField TextBeta3_SubstitutionRate = new JTextField(90);
	JTextField TextBeta4_SubstitutionRate = new JTextField(90);
	JButton ButtonNext_Beta_Window_Next_SubstitutionRate = new JButton("Save and exit");
	JButton ButtonNext_Beta_Window_Handler_Back_SubstitutionRate = new JButton("Exit without saving");
	JLabel SubstitutionRate_labelt1_Beta = new JLabel();
	JLabel SubstitutionRate_labelt2_Beta = new JLabel();
	String OutputDistribution_SubstitutionRate = "";


	/////// Substitution model of protein evolution
	JTextField TextFix_ProteinSubstitutionModel = new JTextField(90);
	String OutputDistribution_ProteinSubstitutionModel = "";

	/////// fix, unif, norm(t), exp(t), gamma(t), beta(t) (double) /////// AA_I_ProteinEvolverABC
	static JFrame Fix_Window_AA_I_ProteinEvolverABC = new JFrame("Fix");
	int FirstTimeFix_Window_AA_I_ProteinEvolverABC = 0;
	JTextField TextFix_AA_I_ProteinEvolverABC = new JTextField(90);
	JButton ButtonNext_Fix_Window_Next_AA_I_ProteinEvolverABC = new JButton("Save and exit");
	JButton ButtonNext_Fix_Window_Handler_Back_AA_I_ProteinEvolverABC = new JButton("Exit without saving");
	static JFrame Unif_Window_AA_I_ProteinEvolverABC = new JFrame("Uniform distribution");
	int FirstTimeUnif_Window_AA_I_ProteinEvolverABC = 0;
	JTextField TextUnif1_AA_I_ProteinEvolverABC = new JTextField(90);
	JTextField TextUnif2_AA_I_ProteinEvolverABC = new JTextField(90);
	JButton ButtonNext_Unif_Window_Next_AA_I_ProteinEvolverABC = new JButton("Save and exit");
	JButton ButtonNext_Unif_Window_Handler_Back_AA_I_ProteinEvolverABC = new JButton("Exit without saving");
	static JFrame Exp_Window_AA_I_ProteinEvolverABC = new JFrame("Exponential distribution");
	int FirstTimeExp_Window_AA_I_ProteinEvolverABC = 0;
	JTextField TextExp1_AA_I_ProteinEvolverABC = new JTextField(90);
	JTextField TextExp3_AA_I_ProteinEvolverABC = new JTextField(90);
	JTextField TextExp4_AA_I_ProteinEvolverABC = new JTextField(90);
	JButton ButtonNext_Exp_Window_Next_AA_I_ProteinEvolverABC = new JButton("Save and exit");
	JButton ButtonNext_Exp_Window_Handler_Back_AA_I_ProteinEvolverABC = new JButton("Exit without saving");	
	JLabel AA_I_ProteinEvolverABC_labelt1_Exp = new JLabel();
	JLabel AA_I_ProteinEvolverABC_labelt2_Exp = new JLabel();
	static JFrame Norm_Window_AA_I_ProteinEvolverABC = new JFrame("Normal distribution");
	int FirstTimeNorm_Window_AA_I_ProteinEvolverABC = 0;
	JTextField TextNorm1_AA_I_ProteinEvolverABC = new JTextField(90);
	JTextField TextNorm2_AA_I_ProteinEvolverABC = new JTextField(90);
	JTextField TextNorm3_AA_I_ProteinEvolverABC = new JTextField(90);
	JTextField TextNorm4_AA_I_ProteinEvolverABC = new JTextField(90);
	JButton ButtonNext_Norm_Window_Next_AA_I_ProteinEvolverABC = new JButton("Save and exit");
	JButton ButtonNext_Norm_Window_Handler_Back_AA_I_ProteinEvolverABC = new JButton("Exit without saving");	
	JLabel AA_I_ProteinEvolverABC_labelt1_Norm = new JLabel();
	JLabel AA_I_ProteinEvolverABC_labelt2_Norm = new JLabel();
	static JFrame Gamma_Window_AA_I_ProteinEvolverABC = new JFrame("Gamma distribution");
	int FirstTimeGamma_Window_AA_I_ProteinEvolverABC = 0;
	JTextField TextGamma1_AA_I_ProteinEvolverABC = new JTextField(90);
	JTextField TextGamma2_AA_I_ProteinEvolverABC = new JTextField(90);
	JTextField TextGamma3_AA_I_ProteinEvolverABC = new JTextField(90);
	JTextField TextGamma4_AA_I_ProteinEvolverABC = new JTextField(90);
	JButton ButtonNext_Gamma_Window_Next_AA_I_ProteinEvolverABC = new JButton("Save and exit");
	JButton ButtonNext_Gamma_Window_Handler_Back_AA_I_ProteinEvolverABC = new JButton("Exit without saving");	
	JLabel AA_I_ProteinEvolverABC_labelt1_Gamma = new JLabel();
	JLabel AA_I_ProteinEvolverABC_labelt2_Gamma = new JLabel();
	static JFrame Beta_Window_AA_I_ProteinEvolverABC = new JFrame("Beta distribution");
	int FirstTimeBeta_Window_AA_I_ProteinEvolverABC = 0;
	JTextField TextBeta1_AA_I_ProteinEvolverABC = new JTextField(90);
	JTextField TextBeta2_AA_I_ProteinEvolverABC = new JTextField(90);
	JTextField TextBeta3_AA_I_ProteinEvolverABC = new JTextField(90);
	JTextField TextBeta4_AA_I_ProteinEvolverABC = new JTextField(90);
	JButton ButtonNext_Beta_Window_Next_AA_I_ProteinEvolverABC = new JButton("Save and exit");
	JButton ButtonNext_Beta_Window_Handler_Back_AA_I_ProteinEvolverABC = new JButton("Exit without saving");	
	JLabel AA_I_ProteinEvolverABC_labelt1_Beta = new JLabel();
	JLabel AA_I_ProteinEvolverABC_labelt2_Beta = new JLabel();
	String OutputDistribution_AA_I_ProteinEvolverABC = "";

	
	/////// fix, unif, norm(t), exp(t), gamma(t), beta(t) (double) /////// AA_Gsites_ProteinEvolverABC
	static JFrame Fix_Window_AA_Gsites_ProteinEvolverABC = new JFrame("Fix");
	int FirstTimeFix_Window_AA_Gsites_ProteinEvolverABC = 0;
	JTextField TextFix_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JButton ButtonNext_Fix_Window_Next_AA_Gsites_ProteinEvolverABC = new JButton("Save and exit");
	JButton ButtonNext_Fix_Window_Handler_Back_AA_Gsites_ProteinEvolverABC = new JButton("Exit without saving");
	static JFrame Unif_Window_AA_Gsites_ProteinEvolverABC = new JFrame("Uniform distribution");
	int FirstTimeUnif_Window_AA_Gsites_ProteinEvolverABC = 0;
	JTextField TextUnif1_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JTextField TextUnif2_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JButton ButtonNext_Unif_Window_Next_AA_Gsites_ProteinEvolverABC = new JButton("Save and exit");
	JButton ButtonNext_Unif_Window_Handler_Back_AA_Gsites_ProteinEvolverABC = new JButton("Exit without saving");
	static JFrame Exp_Window_AA_Gsites_ProteinEvolverABC = new JFrame("Exponential distribution");
	int FirstTimeExp_Window_AA_Gsites_ProteinEvolverABC = 0;
	JTextField TextExp1_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JTextField TextExp3_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JTextField TextExp4_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JButton ButtonNext_Exp_Window_Next_AA_Gsites_ProteinEvolverABC = new JButton("Save and exit");
	JButton ButtonNext_Exp_Window_Handler_Back_AA_Gsites_ProteinEvolverABC = new JButton("Exit without saving");	
	JLabel AA_Gsites_ProteinEvolverABC_labelt1_Exp = new JLabel();
	JLabel AA_Gsites_ProteinEvolverABC_labelt2_Exp = new JLabel();
	static JFrame Norm_Window_AA_Gsites_ProteinEvolverABC = new JFrame("Normal distribution");
	int FirstTimeNorm_Window_AA_Gsites_ProteinEvolverABC = 0;
	JTextField TextNorm1_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JTextField TextNorm2_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JTextField TextNorm3_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JTextField TextNorm4_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JButton ButtonNext_Norm_Window_Next_AA_Gsites_ProteinEvolverABC = new JButton("Save and exit");
	JButton ButtonNext_Norm_Window_Handler_Back_AA_Gsites_ProteinEvolverABC = new JButton("Exit without saving");	
	JLabel AA_Gsites_ProteinEvolverABC_labelt1_Norm = new JLabel();
	JLabel AA_Gsites_ProteinEvolverABC_labelt2_Norm = new JLabel();
	static JFrame Gamma_Window_AA_Gsites_ProteinEvolverABC = new JFrame("Gamma distribution");
	int FirstTimeGamma_Window_AA_Gsites_ProteinEvolverABC = 0;
	JTextField TextGamma1_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JTextField TextGamma2_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JTextField TextGamma3_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JTextField TextGamma4_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JButton ButtonNext_Gamma_Window_Next_AA_Gsites_ProteinEvolverABC = new JButton("Save and exit");
	JButton ButtonNext_Gamma_Window_Handler_Back_AA_Gsites_ProteinEvolverABC = new JButton("Exit without saving");	
	JLabel AA_Gsites_ProteinEvolverABC_labelt1_Gamma = new JLabel();
	JLabel AA_Gsites_ProteinEvolverABC_labelt2_Gamma = new JLabel();
	static JFrame Beta_Window_AA_Gsites_ProteinEvolverABC = new JFrame("Beta distribution");
	int FirstTimeBeta_Window_AA_Gsites_ProteinEvolverABC = 0;
	JTextField TextBeta1_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JTextField TextBeta2_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JTextField TextBeta3_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JTextField TextBeta4_AA_Gsites_ProteinEvolverABC = new JTextField(90);
	JButton ButtonNext_Beta_Window_Next_AA_Gsites_ProteinEvolverABC = new JButton("Save and exit");
	JButton ButtonNext_Beta_Window_Handler_Back_AA_Gsites_ProteinEvolverABC = new JButton("Exit without saving");	
	JLabel AA_Gsites_ProteinEvolverABC_labelt1_Beta = new JLabel();
	JLabel AA_Gsites_ProteinEvolverABC_labelt2_Beta = new JLabel();
	String OutputDistribution_AA_Gsites_ProteinEvolverABC = "";

    private PrintStream standardOut;


	
	// Main 
	public static void main(String args[])
		{
		ProteinEvolverABC_GUI mainFrame	= new ProteinEvolverABC_GUI();
		mainFrame.setVisible( true );		
		}


	public ProteinEvolverABC_GUI()
		{
		setTitle( "ProteinEvolverABC (GUI)" );
		setSize(1100, 800);
	//	setBackground(Color.orange);
		setBackground(new Color(255, 255, 255)); // other colors: http://www.akgupta.com/Java/ColorChooser.htm  http://www.december.com/html/spec/colorpicker.html
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

		// Create a tabbed pane
		tabbedPane = new JTabbedPane(JTabbedPane.TOP, JTabbedPane.SCROLL_TAB_LAYOUT);

		topPanel.setLayout( new BorderLayout() );
		getContentPane().add( topPanel );
		topPanel.add( tabbedPane, BorderLayout.CENTER );
        
        // Create first tab page
		createPage1();		
		tabbedPane.addTab("Purpose", scroll1);
		
		// This font is for the user-specified settings
		/*PLAINAtt = new Font("Helvetica", Font.PLAIN, 13);*/ 
		}



	/*************************************************************************************/
	/* TABS */ 
	/*************************************************************************************/

	/* TAB 1: Purpose */
	public void createPage1()
		{
		panel1.setLayout( null );
		panel1.setPreferredSize(new Dimension(1100,800));
						
		JLabel label1 = new JLabel();
       	label1.setText("*** ProteinEvolverABC (GUI) ***");
		//label1.setBounds(100, 2, 1200, 30);
		label1.setFont(new Font("Arial", Font.BOLD, 17));
		label1.setLocation(380, 20); // right, down
        label1.setSize(1200, 30); // long, high
      	panel1.add( label1 );
      	
      	JLabel label1m = new JLabel();
       	label1m.setText("Estimation of recombination and substitution rates in a protein MSA with approximate Bayesian computation");
		label1m.setFont(new Font("Arial", Font.BOLD, 17));
		label1m.setLocation(100, 50); // right, down
        label1m.setSize(1200, 30); // long, high
      	panel1.add( label1m );
		
		ImageIcon myIcon = new ImageIcon("LogoProteinEvolverABC.gif"); // needs path of the icon
		JLabel labelimage = new JLabel(myIcon);
		labelimage.setLocation(520, 430); // right, down
        labelimage.setSize(430, 250); // long, high
      	panel1.add( labelimage );

		
		JButton RUNButton1 = new JButton("Run ProteinEvolverABC (GUI)");
		RUNButton1.setFont(new Font("Arial", Font.BOLD, 15));
		RUNButton1.setLocation(200, 110);
        RUNButton1.setSize(260, 200);
		runHandler = new runButtonHandler();
		RUNButton1.addActionListener(runHandler);
    	panel1.add(RUNButton1);

		JButton EXITButton = new JButton("Exit ProteinEvolverABC (GUI)");
		EXITButton.setFont(new Font("Arial", Font.PLAIN, 15));
    	EXITButton.setLocation(510, 110);
        EXITButton.setSize(260, 200);
		ebHandler = new ExitButtonHandler();
		EXITButton.addActionListener(ebHandler);
		panel1.add(EXITButton, BorderLayout.WEST);

		JLabel label1b = new JLabel();
       	label1b.setText("ProteinEvolverABC (GUI), by Miguel Arenas");
		label1b.setFont(new Font("Arial", Font.BOLD, 13));
		label1b.setLocation(100, 450); // right, down
        label1b.setSize(1200, 30); // long, high
      	panel1.add( label1b );

		JLabel label1c = new JLabel();
       	label1c.setText("Copyright (c) 2020. All rights reserved. ");
		label1c.setFont(new Font("Arial", Font.BOLD, 13));
		label1c.setLocation(100, 480); // right, down
        label1c.setSize(1200, 30); // long, high
      	panel1.add( label1c );
      	
      	///////
      	textlinked1 = "https://github.com/MiguelArenas/proteinevolverabc/";
      	link1.setLocation(100, 510); // right, down
   		link1.setSize(1100, 30); // long, high
      	link1.setText("<HTML><FONT color=\"#000099\"><B>"+textlinked1+"</B></FONT></HTML>");
    	link1.setCursor(new Cursor(Cursor.HAND_CURSOR));
    	panel1.add(link1);
      	setVisible(true);
      	
      	link1.addMouseListener(new MouseListener()
    		{    		
        	public void mouseExited(MouseEvent arg0)
        		{
  	          	link1.setText("<HTML><FONT color=\"#000099\"><B>"+textlinked1+"</B></FONT></HTML>");
        		}

        	public void mouseEntered(MouseEvent arg0)
        		{
            	link1.setText("<HTML><FONT color=\"#000099\"><U><B>"+textlinked1+"</B></U></FONT></HTML>");
        		}

        	public void mouseClicked(MouseEvent arg0)
        		{
				// if we do not have Java SE 6
				String osName = System.getProperty("os.name");
				try
					{
					if (osName.startsWith ("Windows"))
						{
						Runtime.getRuntime ().exec ("rundll32 url.dll,FileProtocolHandler " + URL1);
						}
					else if (osName.startsWith ("Mac OS"))
						{
						Class<?> fileMgr = Class.forName ("com.apple.eio.FileManager");
						java.lang.reflect.Method openURL = fileMgr.getDeclaredMethod ("openURL", new Class[] {String.class});
						openURL.invoke (null, new Object[] {URL1});
						} 
					else
						{
						//check for $BROWSER
						java.util.Map<String, String> env = System.getenv ();
							if (env.get ("BROWSER") != null)
								{
								Runtime.getRuntime ().exec (env.get ("BROWSER") + " " + URL1);
								return;
								}
				
						//check for common browsers
						String[] browsers = { "firefox", "iceweasel", "chrome", "opera", "konqueror", "epiphany", "mozilla", "netscape"};
						String browser = null;
						for (int count = 0; count < browsers.length && browser == null; count++)
							if (Runtime.getRuntime ().exec (new String[] {"which", browsers[count]}).waitFor () == 0)
								{
								browser = browsers[count];
								break;
								}
						if (browser == null)
							throw new RuntimeException ("couldn't find any browser...");
						else
							Runtime.getRuntime ().exec (new String[] {browser, URL1});
						}
					}
				catch (Exception e)
					{
					javax.swing.JOptionPane.showMessageDialog (null, "couldn't find a webbrowser to use...\nPlease browser for yourself:\n" + URL1);
					}

				// if we have Java SE 6...
				/*try
                	{
                 	Desktop.getDesktop().browse(uri); // this requires Java SE 6
                	}
                	catch (Exception e)
                	{
                    e.printStackTrace();
                	}*/
        		}

        	public void mousePressed(MouseEvent e)
        		{
        		;
       			}
        	public void mouseReleased(MouseEvent e)
        		{
        		;
        		}
    		});
		////////
		
		///////
      	textlinked1b = "miguelmmmab@gmail.com";
      	link1b.setLocation(100, 540); // right, down
   		link1b.setSize(1100, 30); // long, high
      	link1b.setText("<HTML><FONT color=\"#000099\"><B>"+textlinked1b+"</B></FONT></HTML>");
    	link1b.setCursor(new Cursor(Cursor.HAND_CURSOR));
    	panel1.add(link1b);
      	setVisible(true);
      	
      	link1b.addMouseListener(new MouseListener()
    		{
        	public void mouseExited(MouseEvent arg0)
        		{
  	          	link1b.setText("<HTML><FONT color=\"#000099\"><B>"+textlinked1b+"</B></FONT></HTML>");
        		}

        	public void mouseEntered(MouseEvent arg0)
        		{
            	link1b.setText("<HTML><FONT color=\"#000099\"><U><B>"+textlinked1b+"</B></U></FONT></HTML>");
        		}

        	public void mouseClicked(MouseEvent arg0)
        		{
				// if we do not have Java SE 6
				String osName = System.getProperty("os.name");
				try
					{
					if (osName.startsWith ("Windows"))
						{
						Runtime.getRuntime ().exec ("rundll32 url.dll,FileProtocolHandler " + URL1b);
						}
					else if (osName.startsWith ("Mac OS"))
						{
							Class<?> fileMgr = Class.forName ("com.apple.eio.FileManager");
							java.lang.reflect.Method openURL = fileMgr.getDeclaredMethod ("openURL", new Class[] {String.class});
							openURL.invoke (null, new Object[] {URL1b});
						} 
					else
						{
						//check for $BROWSER
							java.util.Map<String, String> env = System.getenv ();
							if (env.get ("BROWSER") != null)
								{
								Runtime.getRuntime ().exec (env.get ("BROWSER") + " " + URL1b);
								return;
								}
				
						//check for common browsers
						String[] browsers = { "firefox", "iceweasel", "chrome", "opera", "konqueror", "epiphany", "mozilla", "netscape"};
						String browser = null;
						for (int count = 0; count < browsers.length && browser == null; count++)
							if (Runtime.getRuntime ().exec (new String[] {"which", browsers[count]}).waitFor () == 0)
								{
								browser = browsers[count];
								break;
								}
						if (browser == null)
							throw new RuntimeException ("couldn't find any browser...");
						else
							Runtime.getRuntime ().exec (new String[] {browser, URL1b});
						}
					}
				catch (Exception e)
					{
					javax.swing.JOptionPane.showMessageDialog (null, "couldn't find a webbrowser to use...\nPlease browser for yourself:\n" + URL1b);
					}

				// if we have Java SE 6...
				/*try
                	{
                 	Desktop.getDesktop().browse(uri); // this requires Java SE 6
                	}
                	catch (Exception e)
                	{
                    e.printStackTrace();
                	}*/
        		}

        	public void mousePressed(MouseEvent e)
        		{
        		;
       			}
        	public void mouseReleased(MouseEvent e)
        		{
        		;
        		}
    		});
		////////
		
		///////
      	textlinked1c = "marenas@uvigo.es";
      	link1c.setLocation(100, 570); // right, down
   		link1c.setSize(1100, 30); // long, high
      	link1c.setText("<HTML><FONT color=\"#000099\"><B>"+textlinked1c+"</B></FONT></HTML>");
    	link1c.setCursor(new Cursor(Cursor.HAND_CURSOR));
    	panel1.add(link1c);
      	setVisible(true);
      	
      	link1c.addMouseListener(new MouseListener()
    		{
        	public void mouseExited(MouseEvent arg0)
        		{
  	          	link1c.setText("<HTML><FONT color=\"#000099\"><B>"+textlinked1c+"</B></FONT></HTML>");
        		}

        	public void mouseEntered(MouseEvent arg0)
        		{
            	link1c.setText("<HTML><FONT color=\"#000099\"><U><B>"+textlinked1c+"</B></U></FONT></HTML>");
        		}

        	public void mouseClicked(MouseEvent arg0)
        		{
				// if we do not have Java SE 6
				String osName = System.getProperty("os.name");
				try
					{
					if (osName.startsWith ("Windows"))
						{
						Runtime.getRuntime ().exec ("rundll32 url.dll,FileProtocolHandler " + URL1c);
						}
					else if (osName.startsWith ("Mac OS"))
						{
							Class<?> fileMgr = Class.forName ("com.apple.eio.FileManager");
							java.lang.reflect.Method openURL = fileMgr.getDeclaredMethod ("openURL", new Class[] {String.class});
							openURL.invoke (null, new Object[] {URL1c});
						} 
					else
						{
						//check for $BROWSER
							java.util.Map<String, String> env = System.getenv ();
							if (env.get ("BROWSER") != null)
								{
								Runtime.getRuntime ().exec (env.get ("BROWSER") + " " + URL1c);
								return;
								}
				
						//check for common browsers
						String[] browsers = { "firefox", "iceweasel", "chrome", "opera", "konqueror", "epiphany", "mozilla", "netscape"};
						String browser = null;
						for (int count = 0; count < browsers.length && browser == null; count++)
							if (Runtime.getRuntime ().exec (new String[] {"which", browsers[count]}).waitFor () == 0)
								{
								browser = browsers[count];
								break;
								}
						if (browser == null)
							throw new RuntimeException ("couldn't find any browser...");
						else
							Runtime.getRuntime ().exec (new String[] {browser, URL1c});
						}
					}
				catch (Exception e)
					{
					javax.swing.JOptionPane.showMessageDialog (null, "couldn't find a webbrowser to use...\nPlease browser for yourself:\n" + URL1c);
					}

				// if we have Java SE 6...
				/*try
                	{
                 	Desktop.getDesktop().browse(uri); // this requires Java SE 6
                	}
                	catch (Exception e)
                	{
                    e.printStackTrace();
                	}*/
        		}

        	public void mousePressed(MouseEvent e)
        		{
        		;
       			}
        	public void mouseReleased(MouseEvent e)
        		{
        		;
        		}
    		});
		////////      	
		}


	/* TAB 01: Information */
	public void createPage01()
		{
		panel01.setLayout( null );
		panel01.setPreferredSize(new Dimension(1100,800));
    
		/*
		Font myFont = new Font("Arial", Font.BOLD, 14);
        Color myColor = Color.BLACK;
        TitledBorder titledBorder = BorderFactory.createTitledBorder(null, "Information", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, myFont, myColor);
        panel01.setBorder(titledBorder);
        */     
		/*
		panel01.setBorder(BorderFactory.createLineBorder(Color.black));
		panel01.setBorder(BorderFactory.createEmptyBorder(0,10,10,10));
		*/
		
		JLabel label01 = new JLabel();
       	label01.setText("Information");
		label01.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 14));
		label01.setLocation(30, 20); // right, down
        label01.setSize(1200, 30); // long, high
      	panel01.add(label01);
		
		JLabel label011 = new JLabel();
       	label011.setText("ProteinEvolverABC (GUI) is designed for creating the main settings file to be run later on the command line");
		label011.setLocation(30, 60); // right, down
        label011.setSize(1100, 30); // long, high
      	panel01.add(label011);
		
		/*JLabel label012 = new JLabel();
       	label012.setText("(1) Specifying settings for running ProteinEvolverABC later on the command line.");
		label012.setLocation(30, 90); // right, down
        label012.setSize(1100, 30); // long, high
      	panel01.add(label012);
            
        JLabel label012c = new JLabel();
        label012c.setText("(2) Specifying settings for running directly ProteinEvolverABC on this GUI (see requirements in the documentation).");
        label012c.setLocation(30, 120); // right, down
        label012c.setSize(1100, 30); // long, high
        panel01.add(label012c);*/
		
        JLabel label012d = new JLabel();
        label012d.setText("Settings specified within each tab must be saved by pressing the button \"Save and next\", placed at the right-botton");
        label012d.setLocation(30, 90); // right, down
        label012d.setSize(1100, 30); // long, high
        panel01.add(label012d);
            
		JLabel label013 = new JLabel();
       	label013.setText("This button will also move the process towards a new tab");
		label013.setLocation(50, 120); // right, down
        label013.setSize(1100, 30); // long, high
      	panel01.add(label013);
      	
      	JLabel label014 = new JLabel();
       	label014.setText("The user can also move among open tabs, however settings are only applied by pressing the button");
		label014.setLocation(50, 150); // right, down
        label014.setSize(1100, 30); // long, high
      	panel01.add(label014);
      	
      	/*JLabel label014b = new JLabel();
       	label014b.setText("- Examples will display all required tabs and settings for the corresponding example, so these do not need to be saved");
		label014b.setLocation(30, 180); // right, down
        label014b.setSize(1100, 30); // long, high
      	panel01.add(label014b);
      	
      	JLabel label014c = new JLabel();
       	label014c.setText("However, posterior modifications must be saved by pressing the button");
		label014c.setLocation(50, 210); // right, down
        label014c.setSize(1100, 30); // long, high
      	panel01.add(label014c);*/
      	
      	JLabel label015 = new JLabel();
       	label015.setText("Settings should be introduced with biological meaning. Please see examples provided with the package");
		label015.setLocation(30, 180); // right, down
        label015.setSize(1100, 30); // long, high
      	panel01.add(label015);
      	

      	textlinked2 = "documentation";
      	link2.setLocation(790, 180); // right, down
   		link2.setSize(1100, 30); // long, high
      	link2.setText("<HTML><FONT color=\"#000099\">"+textlinked2+"</FONT></HTML>");
    	link2.setCursor(new Cursor(Cursor.HAND_CURSOR));
    	panel01.add(link2);
      	setVisible(true);
      	
      	link2.addMouseListener(new MouseListener()
    		{
        	public void mouseExited(MouseEvent arg0)
        		{
  	          	link2.setText("<HTML><FONT color=\"#000099\">"+textlinked2+"</FONT></HTML>");
        		}

        	public void mouseEntered(MouseEvent arg0)
        		{
            	link2.setText("<HTML><FONT color=\"#000099\"><U>"+textlinked2+"</U></FONT></HTML>");
        		}

        	public void mouseClicked(MouseEvent arg0)
        		{
				// if we do not have Java SE 6
				String osName = System.getProperty("os.name");
				try
					{
					if (osName.startsWith ("Windows"))
						{
						Runtime.getRuntime ().exec ("rundll32 url.dll,FileProtocolHandler " + URL1);
						}
					else if (osName.startsWith ("Mac OS"))
						{
							Class<?> fileMgr = Class.forName ("com.apple.eio.FileManager");
							java.lang.reflect.Method openURL = fileMgr.getDeclaredMethod ("openURL", new Class[] {String.class});
							openURL.invoke (null, new Object[] {URL1});
						} 
					else
						{
						//check for $BROWSER
							java.util.Map<String, String> env = System.getenv ();
							if (env.get ("BROWSER") != null)
								{
								Runtime.getRuntime ().exec (env.get ("BROWSER") + " " + URL1);
								return;
								}
				
						//check for common browsers
						String[] browsers = { "firefox", "iceweasel", "chrome", "opera", "konqueror", "epiphany", "mozilla", "netscape"};
						String browser = null;
						for (int count = 0; count < browsers.length && browser == null; count++)
							if (Runtime.getRuntime ().exec (new String[] {"which", browsers[count]}).waitFor () == 0)
								{
								browser = browsers[count];
								break;
								}
						if (browser == null)
							throw new RuntimeException ("couldn't find any browser...");
						else
							Runtime.getRuntime ().exec (new String[] {browser, URL1});
						}
					}
				catch (Exception e)
					{
					javax.swing.JOptionPane.showMessageDialog (null, "couldn't find a webbrowser to use...\nPlease browser for yourself:\n" + URL1);
					}

				// if we have Java SE 6...
				/*try
                	{
                 	Desktop.getDesktop().browse(uri); // this requires Java SE 6
                	}
                	catch (Exception e)
                	{
                    e.printStackTrace();
                	}*/
        		}

        	public void mousePressed(MouseEvent e)
        		{
        		;
       			}
        	public void mouseReleased(MouseEvent e)
        		{
        		;
        		}
    		});
		////////
      	
		JLabel label016 = new JLabel();
       	label016.setText("A multiple sequence alignment (MSA) is required in \"standard phylip sequential\" format. See documentation and input examples");
		label016.setLocation(30, 210); // right, down
        label016.setSize(1100, 30); // long, high
      	panel01.add(label016);
      	
		JLabel label016v = new JLabel();
       	label016v.setText("In order to avoid an input MSA with errors, generate the MSA with ALTER (MSA format converter) available at");
		label016v.setLocation(50, 240); // right, down
        label016v.setSize(1100, 30); // long, high
      	panel01.add(label016v);

		textlinked3 = "http://sing.ei.uvigo.es/ALTER/";
      	link3.setLocation(790, 240); // right, down
   		link3.setSize(1100, 30); // long, high
      	link3.setText("<HTML><FONT color=\"#000099\">"+textlinked3+"</FONT></HTML>");
    	link3.setCursor(new Cursor(Cursor.HAND_CURSOR));
    	panel01.add(link3);
      	setVisible(true);
      	
      	link3.addMouseListener(new MouseListener()
    		{
        	public void mouseExited(MouseEvent arg0)
        		{
  	          	link3.setText("<HTML><FONT color=\"#000099\">"+textlinked3+"</FONT></HTML>");
        		}

        	public void mouseEntered(MouseEvent arg0)
        		{
            	link3.setText("<HTML><FONT color=\"#000099\"><U>"+textlinked3+"</U></FONT></HTML>");
        		}

        	public void mouseClicked(MouseEvent arg0)
        		{
				// if we do not have Java SE 6
				String osName = System.getProperty("os.name");
				try
					{
					if (osName.startsWith ("Windows"))
						{
						Runtime.getRuntime ().exec ("rundll32 url.dll,FileProtocolHandler " + URL3);
						}
					else if (osName.startsWith ("Mac OS"))
						{
						Class<?> fileMgr = Class.forName ("com.apple.eio.FileManager");
						java.lang.reflect.Method openURL = fileMgr.getDeclaredMethod ("openURL", new Class[] {String.class});
						openURL.invoke (null, new Object[] {URL3});
						} 
					else
						{
						//check for $BROWSER
						java.util.Map<String, String> env = System.getenv ();
						if (env.get ("BROWSER") != null)
							{
							Runtime.getRuntime ().exec (env.get ("BROWSER") + " " + URL3);
							return;
							}
				
						//check for common browsers
						String[] browsers = { "firefox", "iceweasel", "chrome", "opera", "konqueror", "epiphany", "mozilla", "netscape"};
						String browser = null;
						for (int count = 0; count < browsers.length && browser == null; count++)
							if (Runtime.getRuntime ().exec (new String[] {"which", browsers[count]}).waitFor () == 0)
								{
								browser = browsers[count];
								break;
								}
						if (browser == null)
							throw new RuntimeException ("couldn't find any browser...");
						else
							Runtime.getRuntime ().exec (new String[] {browser, URL3});
						}
					}
				catch (Exception e)
					{
					javax.swing.JOptionPane.showMessageDialog (null, "couldn't find a webbrowser to use...\nPlease browser for yourself:\n" + URL3);
					}

				// if we have Java SE 6...
				/*try
                	{
                 	Desktop.getDesktop().browse(uri); // this requires Java SE 6
                	}
                	catch (Exception e)
                	{
                    e.printStackTrace();
                	}*/
        		}

        	public void mousePressed(MouseEvent e)
        		{
        		;
       			}
        	public void mouseReleased(MouseEvent e)
        		{
        		;
        		}
    		});
		////////
		
		JLabel label016w = new JLabel();
       	label016w.setText("In ALTER, as output MSA \"Select program\" CodABC within the \"Population Genetics\" section");
		label016w.setLocation(50, 270); // right, down
        label016w.setSize(1100, 30); // long, high
      	panel01.add(label016w);		


      	JLabel label016b = new JLabel();
       	label016b.setText("At the end of the process, a file \"Settings.txt\" can be written with the specified settings. This file is the main input file for running ProteinEvolverABC");
		label016b.setLocation(30, 300); // right, down
        label016b.setSize(1100, 30); // long, high
      	panel01.add(label016b);
      	
            
        /*JLabel label016bc = new JLabel();
        label016bc.setText("At that point it is also possible to run ProteinEvolverABC on the GUI (if requirements are installed, see documentation)");
        label016bc.setLocation(30, 400); // right, down
        label016bc.setSize(1100, 30); // long, high
        panel01.add(label016bc);*/
            
      			
		//This creates a new button
		ButtonNext01.setLocation(800, 620); // right, down
        ButtonNext01.setSize(170, 70); // long, high
       	ButtonNext01.setFont(new Font("Arial", Font.BOLD, 14));

        //This is an Action Listener which reacts to clicking on 
		run01Handler = new runButton01Handler();
		ButtonNext01.addActionListener(run01Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel01.add(ButtonNext01);       	
		}




	/* TAB 2: General Settings */
	public void createPage2()
		{
		panel2.setLayout( null );
		//panel2.setLayout(new GridLayout(6,0)); // rows, columns		
		panel2.setPreferredSize(new Dimension(1100,800));

		JLabel label2aa = new JLabel();
       	label2aa.setText("General Settings");
		label2aa.setFont(new Font("Arial", Font.BOLD, 14));
		label2aa.setLocation(30, 15); // right, down
        label2aa.setSize(800, 30); // long, high
      	panel2.add(label2aa);


		JLabel label2ab = new JLabel();
       	label2ab.setText("These settings are required");
		label2ab.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 14));
		label2ab.setLocation(30, 50); // right, down
        label2ab.setSize(300, 30); // long, high
      	panel2.add(label2ab);

	

		JLabel label2ax = new JLabel();
       	label2ax.setText("Name of input file with the MSA: ");
		label2ax.setLocation(30, 90); // right, down
        label2ax.setSize(400, 30); // long, high
      	panel2.add( label2ax );

       	JButton ButtonNext2_A = new JButton("Upload MSA");
		ButtonNext2_A.setLocation(360, 90); // right, down
        ButtonNext2_A.setSize(240, 50); // long, high
        //This is an Action Listener which reacts to clicking on 
		run1UploadFile = new runButtonUploadFile();
		ButtonNext2_A.addActionListener(run1UploadFile);
       	panel2.add(ButtonNext2_A);

		LabelTargetFile.setText("");
		LabelTargetFile.setLocation(630, 90); // right, down
        LabelTargetFile.setSize(550, 30); // long, high
		panel2.add(LabelTargetFile);



		JLabel label2a = new JLabel();
       	label2a.setText("Number of simulations (integer): ");
		label2a.setLocation(30, 200); // right, down
        label2a.setSize(400, 30); // long, high
      	panel2.add( label2a );

		TextNumberReplicates.setText("200");
		TextNumberReplicates.setLocation(300, 200); // right, down
        TextNumberReplicates.setSize(100, 30); // long, high
		panel2.add(TextNumberReplicates);

            
        JLabel label2aza = new JLabel();
        label2aza.setText("How to consider indels (gaps): ");
        label2aza.setLocation(30, 250); // right, down
        label2aza.setSize(400, 30); // long, high
        panel2.add( label2aza );
            
        KindIndels_group.add(KindIndels_NO);
        KindIndels_group.add(KindIndels_YES);
        KindIndels_NO.setSelected(true);
        KindIndels_NO.setLocation(300, 250);
        KindIndels_NO.setSize(90, 30); // long, high
        KindIndels_YES.setLocation(400, 250);
        KindIndels_YES.setSize(180, 30); // long, high
        panel2.add(KindIndels_NO);
        panel2.add(KindIndels_YES);
        
        KindIndels_NO.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                DoIndels = 0;
                Indels = "*Indels=0";
                System.out.println("Ignore indels, Indels: " + DoIndels);
                }
            });
        KindIndels_YES.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                DoIndels = 1;
                Indels = "*Indels=1";
                System.out.println("Consider indels as a new state, Indels: " + DoIndels);
                }
            });
            
            
		JLabel label2az = new JLabel();
       	label2az.setText("Number of processors (integer): ");
		label2az.setLocation(30, 300); // right, down
        label2az.setSize(400, 30); // long, high
      	panel2.add( label2az );

		TextNumberProcessors.setText("1");
		TextNumberProcessors.setLocation(300, 300); // right, down
        TextNumberProcessors.setSize(100, 30); // long, high
		panel2.add(TextNumberProcessors);


		JLabel label2b = new JLabel();
       	label2b.setText("Save simulations? : ");
		label2b.setLocation(30, 350); // right, down
        label2b.setSize(400, 30); // long, high
      	panel2.add(label2b);

		KindSaveSimulations_group.add(KindSaveSimulations_NO);
		KindSaveSimulations_group.add(KindSaveSimulations_YES);		
		KindSaveSimulations_NO.setSelected(true);
		KindSaveSimulations_NO.setLocation(200, 350);
		KindSaveSimulations_NO.setSize(90, 30); // long, high
		KindSaveSimulations_YES.setLocation(300, 350);
		KindSaveSimulations_YES.setSize(90, 30); // long, high		
		panel2.add(KindSaveSimulations_NO);
		panel2.add(KindSaveSimulations_YES);

		KindSaveSimulations_NO.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			SaveSims = 0;
			SaveSimulations = "*SaveSimulations=0";
			System.out.println("Do not save simulations, SaveSimulations: " + SaveSimulations);
			}
		});
		KindSaveSimulations_YES.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			SaveSims = 1;
			SaveSimulations = "*SaveSimulations=1";
			System.out.println("Save simulations, SaveSimulations: " + SaveSimulations);
			}
		});
		

        JLabel label2bc = new JLabel();
        label2bc.setText("Show running information on the screen? : ");
        label2bc.setLocation(30, 400); // right, down
        label2bc.setSize(400, 30); // long, high
        panel2.add(label2bc);
            
        KindShowInformationScreen_group.add(KindShowInformationScreen_NO);
        KindShowInformationScreen_group.add(KindShowInformationScreen_YES);
        KindShowInformationScreen_NO.setSelected(true);
        KindShowInformationScreen_NO.setLocation(350, 400);
        KindShowInformationScreen_NO.setSize(90, 30); // long, high
        KindShowInformationScreen_YES.setLocation(450, 400);
        KindShowInformationScreen_YES.setSize(90, 30); // long, high
        panel2.add(KindShowInformationScreen_NO);
        panel2.add(KindShowInformationScreen_YES);
            
        KindShowInformationScreen_NO.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                ShowInfo = 0;
                ShowInformationScreen = "*ShowInformationScreen=0";
                System.out.println("Do not Show running information on the screen, ShowInformationScreen: " + ShowInformationScreen);
                }
            });
        KindShowInformationScreen_YES.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                ShowInfo = 1;
                ShowInformationScreen = "*ShowInformationScreen=1";
                System.out.println("Show running information on the screen, ShowInformationScreen: " + ShowInformationScreen);
                }
            });
            
            
        //This creates a new button
       	JButton ButtonNext2 = new JButton("Save and next");
		ButtonNext2.setLocation(800, 620); // right, down
        ButtonNext2.setSize(170, 70); // long, high
       	ButtonNext2.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run2Handler = new runButton2Handler();
		ButtonNext2.addActionListener(run2Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel2.add(ButtonNext2);
		}



	// upload file
	 class runButtonUploadFile implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			JLabel TextfileName = new JLabel();

			// make JFileChooser
			JFileChooser fileChooser = new JFileChooser();

			int seleccion = fileChooser.showSaveDialog(fileChooser);
			//Ok
			if (seleccion == JFileChooser.APPROVE_OPTION)
				{
				File myFile = fileChooser.getSelectedFile();
				//get the path
				address=myFile.getAbsolutePath();
				TextfileName.setText(myFile.getName());
				fileName = TextfileName.getText();
				//System.out.println("A file was uploaded: " + address + fileName);
				System.out.println("A file was uploaded, fileName: " + fileName);
				address2 = address;
				address2 = address.replaceAll(fileName, "");
				System.out.println("Path, address: " + address);
				System.out.println("Path, address2: " + address2);
				OkFile = 0;

				
				// checking the extension
		//		String extension = "";
		//		int i = fileName.lastIndexOf('.');
		//		if (i >= 0) {
    	//		extension = fileName.substring(i+1);
		//		}
		//		System.out.println("extension: " + extension);
		//		String phy = "phy";
		//		if(extension.equals(phy))
		//			{
		//			;	// ok
		//			}
		//		else
		//			{
		//			System.out.println("An extension .phy was not detected, notice that the MSA should be in phylip format: " + fileName);
		//			JOptionPane.showMessageDialog(null, "An extension .phy was not detected, notice that the MSA should be in phylip format: " + fileName, " ", JOptionPane. INFORMATION_MESSAGE);
		//			}
				
				// read the file
				String MyFileString = getContents(myFile);
				System.out.println("\nOriginal file contents: " + MyFileString);
				//System.out.println("Original file contents: " + getContents(myFile));

				String linesHere[] = MyFileString.split("\\r?\\n");
				int size = linesHere.length;
				//System.out.println("First Line: linesHere[0]: " + linesHere[0]);
				System.out.println("size: " + size);

				// checking sample size and sequence length
				int Error = 0;
				String SS = "";
				String LL = "";
				if (size > 1)
					{
					String noInStringArr[] = linesHere[0].split(" ");
					//System.out.println("noInStringArr[1]: " + noInStringArr[0]);
					//System.out.println("noInStringArr[2]: " + noInStringArr[1]);
					SS = noInStringArr[0];
					LL = noInStringArr[1];
					SampleSize = Integer.parseInt(noInStringArr[0]);
					SequenceLengthNt = Integer.parseInt(noInStringArr[1]);
					System.out.println("SampleSize: " + SampleSize);
					System.out.println("SequenceLengthNt: " + SequenceLengthNt);
					if (SampleSize < 2)
						{
						System.out.println("Sample size is incorrect, check the MSA file: " + SampleSize);
						JOptionPane.showMessageDialog(null, "Sample size is incorrect, check the MSA file: " + SampleSize, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					if (SequenceLengthNt < 1 && Error == 0)
						{
						System.out.println("Sequence length is incorrect, check the MSA file: " + SequenceLengthNt);
						JOptionPane.showMessageDialog(null, "Sequence length is incorrect, check the MSA file: " + SequenceLengthNt, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					}
				else
					{
					System.out.println("Check the MSA file, it seems too small ");
					JOptionPane.showMessageDialog(null, "Check the MSA file, it seems too small ", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}

				if ((size - 1) < SampleSize)
					{
					System.out.println("Missing sequences in the MSA?  ");
					JOptionPane.showMessageDialog(null, "Missing sequences in the MSA? ", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}


				int ThisCount = 0;
				int acceptedHere = 0;
				// checking sequences
				System.out.println("Checking.. 1");
				for (int numSeq=1; numSeq <= size-1; numSeq++) // per sequence
    				{
    				acceptedHere = 0;
					//System.out.println("numSeq1: " + numSeq);
					//System.out.println("linesHere[numSeq]: " + linesHere[numSeq]);
    				
    				if (linesHere[numSeq].trim().length() != 0)  // no empty line
						{
						for (int site=0; site < SequenceLengthNt + 1; site++) // per character
    						{
    	 			   		char c = linesHere[numSeq].charAt(site);
							if (site > 9) // sequence
								{
								if ((c == 'A') || (c == 'R') || (c == 'N') || (c == 'D') || (c == 'C') || (c == 'Q') || (c == 'E') || (c == 'G') || (c == 'H') || (c == 'I') || (c == 'L') || (c == 'K') || (c == 'M') || (c == 'F') || (c == 'P') || (c == 'S') || (c == 'T') || (c == 'W') || (c == 'Y') || (c == 'V') || (c == '-') || (c == '?') || (c == 'B') || (c == 'Z')) // ok
									{
	      							acceptedHere++; // ok 
	        						}
								else
									{
									if (Error == 0)
										{
										System.out.println("Check incorrect character in the sequence " + numSeq + ", character: " + c);
										JOptionPane.showMessageDialog(null, "Check incorrect character: " + c, "sequence: " + numSeq, JOptionPane. INFORMATION_MESSAGE);
										// System.exit(0);
										Error = Error + 1;
										}
									}
								}
							}
						}

						
					if (Error == 0 && acceptedHere > 0)
						{
						ThisCount++;
						}
					acceptedHere = 0;
					}

				if (ThisCount != SampleSize && Error == 0)
					{
					System.out.println("The number of sequences found (" + ThisCount + "), is different to the sample size: " + SampleSize);
					JOptionPane.showMessageDialog(null, "The number of sequences found (" + ThisCount, "), is different to the sample size: " + SampleSize, JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}	
				acceptedHere = 0;
				ThisCount = 0;


				// send final message
				String TellMeAboutTheFile = "";
				Error = 0; // accept aln
				if (Error == 0)
					{
					// correct file
					LabelTargetFile.setFont(new Font("Arial", Font.PLAIN, 14));
					LabelTargetFile.setForeground(Color.darkGray);
					TellMeAboutTheFile = fileName + " was succesfully uploaded!";
					LabelTargetFile.setText(TellMeAboutTheFile);
					LabelTargetFile.setVisible(true); // name saved
					TextSampleSizeProteinEvolverABC.setText(SS);
					TextLengthProteinEvolverABC.setText(LL);
					TargetFile = "*NameOfPhylipFile=" + fileName;
					OkFile = 1;
					}
				else
					{
					// incorrect file
					LabelTargetFile.setFont(new Font("Arial", Font.PLAIN, 14));
					LabelTargetFile.setForeground(Color.darkGray);
					TellMeAboutTheFile = fileName + " could not be saved because format-based errors!";
					LabelTargetFile.setText(TellMeAboutTheFile);
					LabelTargetFile.setVisible(true); // name saved

					SequenceLengthNt = 0;
					SampleSize = 0;
					System.out.println("Need to upload a correct MSA file. SampleSize: " + SampleSize);
					System.out.println("Need to upload a correct MSA file. SequenceLengthNt: " + SequenceLengthNt);
					OkFile = 0;
					SS = "";
					LL = "";
					}
				} 		
			else 
				{
				System.out.println("Open file cancelled by user");
				OkFile = 0;
        		}
			}
		}


	static public String getContents(File aFile) 
		{
    	//...checks on aFile
    	StringBuilder contents = new StringBuilder();
    
  		try 
			{
    		 //use buffering, reading one line at a time
      		 //FileReader always assumes default ensequence is OK!
      		 BufferedReader input =  new BufferedReader(new FileReader(aFile));
    	  	try 
				{
       		 	String line = null; //not declared within while loop
       		 	/*
       		 	* readLine is a bit quirky :
       		 	* it returns the content of a line MINUS the newline.
       		 	* it returns null only for the END of the stream.
       		 	* it returns an empty String if two newlines appear in a row.
       	 		*/
       		 	while (( line = input.readLine()) != null)
					{
          			contents.append(line);
          			contents.append(System.getProperty("line.separator"));
        			}
     		 	}
      		finally 
				{
        		input.close();
      			}
    		}
    	catch (IOException ex)
			{
     	 	ex.printStackTrace();
    		}

    	return contents.toString();
  		}



	
	/* TAB 3: Evolutionary history - user-specified tree/s */
	public void createPage3()
		{
		panel3.setLayout( null );
		panel3.setPreferredSize(new Dimension(1100,800));
		
		JLabel label3a = new JLabel();
       	label3a.setText("Evolutionary history by user-specified tree/s");
		label3a.setFont(new Font("Arial", Font.BOLD, 14));
		label3a.setLocation(30, 15); // right, down
        label3a.setSize(500, 30); // long, high
      	panel3.add(label3a);

						
		//This creates a new button
    	JButton ButtonNext3 = new JButton("Save and next");
		ButtonNext3.setLocation(800, 620); // right, down
        ButtonNext3.setSize(170, 70); // long, high
       	ButtonNext3.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run3Handler = new runButton3Handler();
		ButtonNext3.addActionListener(run3Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel3.add(ButtonNext3);
		}
	


	/* TAB 4: Evolutionary History - ProteinEvolverABC*/ /* coalescent simulation */
	public void createPage4()
		{
		panel4.setLayout( null );
		panel4.setPreferredSize(new Dimension(1100,800));

		JLabel label4a = new JLabel();
       	label4a.setText("Evolutionary history by the coalescent");
		label4a.setFont(new Font("Arial", Font.BOLD, 14));
		label4a.setLocation(30, 15); // right, down
        label4a.setSize(300, 30); // long, high
      	panel4.add(label4a);


       	label4ca.setText("Required settings");
		label4ca.setFont(new Font("Arial", Font.PLAIN | Font.BOLD, 14));
		label4ca.setLocation(30, 60); // right, down
        label4ca.setSize(200, 30); // long, high
      	panel4.add(label4ca);
		
       	label4cb.setText("Optional settings");
		label4cb.setFont(new Font("Arial", Font.PLAIN | Font.BOLD, 14));
		label4cb.setLocation(450, 60); // right, down
        label4cb.setSize(200, 30); // long, high
      	panel4.add(label4cb);


       	label4d.setText("Sample size (integer): ");
		label4d.setLocation(30, 100); // right, down
        label4d.setSize(200, 30); // long, high
      	panel4.add(label4d);

		TextSampleSizeProteinEvolverABC.setLocation(280, 100); // right, down
		TextSampleSizeProteinEvolverABC.setFont(new Font("Arial", Font.PLAIN | Font.BOLD, 14));
        TextSampleSizeProteinEvolverABC.setSize(90, 30); // long, high
		panel4.add(TextSampleSizeProteinEvolverABC);

		
		label4d2.setText("Sequence Length (integer): ");
		label4d2.setLocation(30, 140); // right, down
        label4d2.setSize(200, 30); // long, high
      	panel4.add(label4d2);

		TextLengthProteinEvolverABC.setLocation(280, 140); // right, down
		TextLengthProteinEvolverABC.setFont(new Font("Arial", Font.PLAIN | Font.BOLD, 14));
        TextLengthProteinEvolverABC.setSize(90, 30); // long, high
		panel4.add(TextLengthProteinEvolverABC);



       	label4e.setText("Effective population size (integer): ");
		label4e.setLocation(30, 180); // right, down
        label4e.setSize(360, 30); // long, high
      	panel4.add(label4e);

		PopSizeProteinEvolverABC.setLocation(280, 180); // right, down
        PopSizeProteinEvolverABC.setSize(100, 30); // long, high
		panel4.add(PopSizeProteinEvolverABC);

		PopSizeProteinEvolverABC.setSelectedItem("fix"); // default
		TextFixInteger_PopSize.setText("1000"); // default
		FixInt_Window_PopSize.setVisible(false); // default
		FixInt_Window_PopSize.dispose(); // default
		TextPopSizeProteinEvolverABC.setText("fix 1000"); // default
		HerePopSize = "1000";
		Textunif1Integer_PopSize.setText("500"); // default
		Textunif2Integer_PopSize.setText("1000"); // default
		PopSize_MAX = 1000; // default

		PopSizeProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				JComboBox KindOf = (JComboBox) e.getSource();
				String seletedKindOf = (String) KindOf.getSelectedItem();

				/*if (seletedKindOf == "no") 
					{
					FixInt_Window_PopSize.setVisible(false);
					unifInt_Window_PopSize.setVisible(false);
					OutputDistribution_PopSize = "";
					TextPopSizeProteinEvolverABC.setText(OutputDistribution_PopSize); 
        			} // end no*/

				if (seletedKindOf == "fix")
					{
					FirstTimeFixInt_Window_PopSize++;
					FixInt_Window_PopSize.setVisible( true );
									
					if (FirstTimeFixInt_Window_PopSize == 1)
						{
						FixInt_Window_PopSize.setTitle( "Fix (integer)" );
						FixInt_Window_PopSize.setSize(400, 300);
						FixInt_Window_PopSize.setLayout( new GridLayout( 3, 2 ) ); // 15 rows, 2 columns
						FixInt_Window_PopSize.setBackground(Color.white);
						FixInt_Window_PopSize.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				FixInt_Window_PopSize.setLocationRelativeTo(null);

						JLabel labelX1 = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1.setText("Value (integer) e.g., 1000");
						//labelX1.setLocation(30, 130); // right, down
        				//labelX1.setSize(300, 30); // long, high
      					FixInt_Window_PopSize.add(labelX1);
	
						FixInt_Window_PopSize.add(TextFixInteger_PopSize);	
					
						JLabel labelXB = new JLabel();
       					labelXB.setText(" ");
      					FixInt_Window_PopSize.add(labelXB);
						JLabel labelXC = new JLabel();
       					labelXC.setText(" ");
      					FixInt_Window_PopSize.add(labelXC);
				

						//This creates a new button 
       					ButtonNext_FixInt_Window_Next_PopSize.setSize(70, 70); // long, high
       	 				ButtonNext_FixInt_Window_Next_PopSize.setVisible(true); 
       					FixInt_Window_PopSize.add(ButtonNext_FixInt_Window_Next_PopSize);

						//This creates a new button 
    	   				ButtonNext_FixInt_Window_Handler_Back_PopSize.setSize(70, 70); // long, high
       	 				ButtonNext_FixInt_Window_Handler_Back_PopSize.setVisible(true); 
       					FixInt_Window_PopSize.add(ButtonNext_FixInt_Window_Handler_Back_PopSize);
						}
        			} // end fix

				if (seletedKindOf == "uniform")
					{
					
					FirstTimeunifInt_Window_PopSize++;
					unifInt_Window_PopSize.setVisible( true );
									
					if (FirstTimeunifInt_Window_PopSize == 1)
						{
						unifInt_Window_PopSize.setTitle( "uniform (integer) distribution" );
						unifInt_Window_PopSize.setSize(500, 300);
						unifInt_Window_PopSize.setLayout( new GridLayout( 4, 2 ) ); // 15 rows, 2 columns
						unifInt_Window_PopSize.setBackground(Color.white);
						unifInt_Window_PopSize.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				unifInt_Window_PopSize.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1b.setText("Minimum value (integer) e.g., 500");
      					unifInt_Window_PopSize.add(labelX1b);
	
						unifInt_Window_PopSize.add(Textunif1Integer_PopSize);	
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText("Maximum value (integer) e.g., 1000");
      					unifInt_Window_PopSize.add(labelX1c);
	
						unifInt_Window_PopSize.add(Textunif2Integer_PopSize);	
						
						JLabel labelXBc = new JLabel();
       					labelXBc.setText(" ");
      					unifInt_Window_PopSize.add(labelXBc);
						JLabel labelXCc = new JLabel();
    	   				labelXCc.setText(" ");
      					unifInt_Window_PopSize.add(labelXCc);
					
	
						//This creates a new button 
    	   				ButtonNext_unifInt_Window_Next_PopSize.setSize(70, 70); // long, high
        				ButtonNext_unifInt_Window_Next_PopSize.setVisible(true); 
       					unifInt_Window_PopSize.add(ButtonNext_unifInt_Window_Next_PopSize);
	
						//This creates a new button 
       					ButtonNext_unifInt_Window_Handler_Back_PopSize.setSize(70, 70); // long, high
        				ButtonNext_unifInt_Window_Handler_Back_PopSize.setVisible(true); 
       					unifInt_Window_PopSize.add(ButtonNext_unifInt_Window_Handler_Back_PopSize);
						}
        			} // end unif

				TextPopSizeProteinEvolverABC.setText(OutputDistribution_PopSize); 
				}
			});

		// Fix (integer) - exit NOT saving
		ButtonNext_FixInt_Window_Handler_Back_PopSize.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_PopSize = "";
				System.out.println("OutputDistribution_PopSize: " + OutputDistribution_PopSize);
			
				FixInt_Window_PopSize.setVisible(false);
				FixInt_Window_PopSize.dispose();

				TextPopSizeProteinEvolverABC.setText(OutputDistribution_PopSize); 
				}
			});

		// Fix (integer) - exit saving
		ButtonNext_FixInt_Window_Next_PopSize.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
			OutputDistribution_PopSize = "";
			Ipar1 = -1;
			Spar1 = "";

			Spar1 = TextFixInteger_PopSize.getText(); //String Spar1 = "23";
			if (Spar1.trim().length() == 0) // check empty
				{
				System.out.println("An integer number should be specified");
				JOptionPane.showMessageDialog(null, "An integer number should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
				// System.exit(0);
				Error = Error + 1;
				}
			if (Error == 0)
				{
				for (int i=0; i < Spar1.length(); i++) // check integer
    				{
        			char c = Spar1.charAt(i);
        			if (c >= '0' && c <= '9')
        				{
            			; // ok
        				}
					else
						{
						System.out.println("Incorrect integer number: " + Spar1);
						JOptionPane.showMessageDialog(null, "Incorrect integer number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
						// System.exit(0);
						Error = Error + 1;
						}
					}
				}
			if (Error == 0)
				{
				Ipar1 = Integer.parseInt(Spar1);
				if ((Ipar1 < 1 || Ipar1 > 100000000 || Spar1.trim().length() == 0) && (Error == 0))
					{
					System.out.println("The value is out of range: " + Ipar1);
					JOptionPane.showMessageDialog(null, "The value is out of range: " + Ipar1, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				if (SampleSize >= Ipar1 && Error == 0)
					{
					System.out.println("sample size (" + SampleSize + ") should not be higher than population size (" + Ipar1 + ")");
					JOptionPane.showMessageDialog(null, "sample size (" + SampleSize + ") should not be higher than population size: " + Ipar1, " ", JOptionPane. INFORMATION_MESSAGE);
					//System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0) // Ok
					{
					PopSize_MAX = Ipar1;
					HerePopSize = Spar1;
					OutputDistribution_PopSize = "fix " + Spar1;
					System.out.println("OutputDistribution_PopSize: " + OutputDistribution_PopSize);
					FixInt_Window_PopSize.setVisible(false);
					FixInt_Window_PopSize.dispose();

					TextPopSizeProteinEvolverABC.setText(OutputDistribution_PopSize);

					// update Rho
					if (PrintRho == 1)
						{
						int xhd = -1;
						if (KindDataProteinEvolverABC == "haploid") 
							{
							xhd = 1;
    		  		  		} 
						if (KindDataProteinEvolverABC == "diploid")
							{
							xhd = 2;
        					}

						if (rtype == 0) // one rho
							{
							Rho_MAX = 2 * xhd * PopSize_MAX * rfix * SequenceLengthNt;
							Rho_MAX = Rho_MAX*100;
							Rho_MAX = (double)((int) Rho_MAX);
							Rho_MAX = Rho_MAX /100;
							AVrho = "Rho: " + String.valueOf(Rho_MAX);
							Rho.setText(AVrho);
							}
						if (rtype == 1) // two rho
							{
							Rho_MAX = 2 * xhd * PopSize_MAX * rtwomax * SequenceLengthNt;
							Rho_MIN = 2 * xhd * PopSize_MAX * rtwomin * SequenceLengthNt;
							Rho_MAX = Rho_MAX*100;
							Rho_MAX = (double)((int) Rho_MAX);
							Rho_MAX = Rho_MAX /100;
							Rho_MIN = Rho_MIN*100;
							Rho_MIN = (double)((int) Rho_MIN);
							Rho_MIN = Rho_MIN /100;
							String A1 = "Rho: " + String.valueOf(Rho_MIN) + " ";
							String A2 = String.valueOf(Rho_MAX);
							String A3 = A1 + A2;
							AVrho = A3;
							Rho.setText(AVrho);
							}

						if ((Rho_MAX > 150) && (Error == 0))
							{
							System.out.println("Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX);
							JOptionPane.showMessageDialog(null, "Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX, " ", JOptionPane. INFORMATION_MESSAGE);
							Error = Error + 1;
							//System.exit(0);
							}
						else
							{
							System.out.println("Population recombination rate (Rho max): " + Rho_MAX);
							}
						}

					}
				

				}
				}
			});		

		// unif (interger) - exit NOT saving
		ButtonNext_unifInt_Window_Handler_Back_PopSize.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_PopSize = "";
				System.out.println("OutputDistribution_PopSize: " + OutputDistribution_PopSize);
				unifInt_Window_PopSize.setVisible(false);
				unifInt_Window_PopSize.dispose();

				TextPopSizeProteinEvolverABC.setText(OutputDistribution_PopSize); 
				}
			});
	
	// unif (integer) - exit saving
		ButtonNext_unifInt_Window_Next_PopSize.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
			Error = 0;
			OutputDistribution_PopSize = "";
			Ipar1 = -1;
			Spar1 = "";
			Ipar2 = -1;
			Spar2 = "";

			Spar1 = Textunif1Integer_PopSize.getText(); //String Spar1 = "23";
			Spar2 = Textunif2Integer_PopSize.getText(); //String Spar2 = "23";
			if (Spar1.trim().length() == 0 || Spar2.trim().length() == 0) // check empty
				{
				System.out.println("Integer numbers should be specified");
				JOptionPane.showMessageDialog(null, "Integer numbers should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
				// System.exit(0);
				Error = Error + 1;
				}
			if (Error == 0)
				{
				for (int i=0; i < Spar1.length(); i++) // check integer
    				{
        			char c = Spar1.charAt(i);
        			if (c >= '0' && c <= '9')
        				{
            			; // ok
        				}
					else
						{
						System.out.println("Incorrect integer number (minimum): " + Spar1);
						JOptionPane.showMessageDialog(null, "Incorrect integer number (minimum): " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
						// System.exit(0);
						Error = Error + 1;
						}
					}
				for (int i=0; i < Spar2.length(); i++) // check integer
    				{
        			char d = Spar2.charAt(i);
        			if (d >= '0' && d <= '9')
        				{
            			; // ok
        				}
					else
						{
						System.out.println("Incorrect integer number (maximum): " + Spar2);
						JOptionPane.showMessageDialog(null, "Incorrect integer number (maximum): " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
						// System.exit(0);
						Error = Error + 1;
						}
					}
				}
			if (Error == 0)
				{
				Ipar1 = Integer.parseInt(Spar1);
				if ((Ipar1 < 1 || Ipar1 > 100000000 || Spar1.trim().length() == 0) && (Error == 0))
					{
					System.out.println("The value (minimum) is out of range: " + Ipar1);
					JOptionPane.showMessageDialog(null, "The value (minimum) is out of range: " + Ipar1, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				
				Ipar2 = Integer.parseInt(Spar2);
				if ((Ipar2 < 1 || Ipar2 > 100000000 || Spar2.trim().length() == 0) && (Error == 0))
					{
					System.out.println("The value (maximum) is out of range: " + Ipar2);
					JOptionPane.showMessageDialog(null, "The value (maximum) is out of range: " + Ipar2, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}

				if (SampleSize >= Ipar1 && Error == 0)
					{
					System.out.println("sample size (" + SampleSize + ") should not be higher than population size (" + Ipar1 + ")");
					JOptionPane.showMessageDialog(null, "sample size (" + SampleSize + ") should not be higher than population size: " + Ipar1, " ", JOptionPane. INFORMATION_MESSAGE);
					//System.exit(0);
					Error = Error + 1;
					}	

				}

			if (Ipar1 > Ipar2 && Error == 0)
				{
				System.out.println("The minimum value should not be higher than the maximum value");
				JOptionPane.showMessageDialog(null, "The minimum value should not be higher than the maximum value", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}

			if (Error == 0)
				{
				PopSize_MAX = Ipar2;
				OutputDistribution_PopSize = "uniform " + Spar1 + " " + Spar2;
				System.out.println("OutputDistribution_PopSize: " + OutputDistribution_PopSize);
				unifInt_Window_PopSize.setVisible(false);
				unifInt_Window_PopSize.dispose();

				TextPopSizeProteinEvolverABC.setText(OutputDistribution_PopSize); 

				// update Rho
				if (PrintRho == 1)
					{
					int xhd = -1;
					if (KindDataProteinEvolverABC == "haploid") 
						{
						xhd = 1;
    		  	  		} 
					if (KindDataProteinEvolverABC == "diploid")
						{
						xhd = 2;
        				}

					if (rtype == 0) // one rho
						{
						Rho_MAX = 2 * xhd * PopSize_MAX * rfix * SequenceLengthNt;
						Rho_MAX = Rho_MAX*100;
						Rho_MAX = (double)((int) Rho_MAX);
						Rho_MAX = Rho_MAX /100;
						AVrho = "Rho: " + String.valueOf(Rho_MAX);
						Rho.setText(AVrho);
						}
					if (rtype == 1) // two rho
						{
						Rho_MAX = 2 * xhd * PopSize_MAX * rtwomax * SequenceLengthNt;
						Rho_MIN = 2 * xhd * PopSize_MAX * rtwomin * SequenceLengthNt;
						Rho_MAX = Rho_MAX*100;
						Rho_MAX = (double)((int) Rho_MAX);
						Rho_MAX = Rho_MAX /100;
						Rho_MIN = Rho_MIN*100;
						Rho_MIN = (double)((int) Rho_MIN);
						Rho_MIN = Rho_MIN /100;
						String A1 = "Rho: " + String.valueOf(Rho_MIN) + " ";
						String A2 = String.valueOf(Rho_MAX);
						String A3 = A1 + A2;
						AVrho = A3;
						Rho.setText(AVrho);
						}

					if ((Rho_MAX > 150) && (Error == 0))
						{
						System.out.println("Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX);
						JOptionPane.showMessageDialog(null, "Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					else
						{
						System.out.println("Population recombination rate (Rho max): " + Rho_MAX);
						}
					}


				}

			}
		});
		/* end fix/unif  */

	
		TextPopSizeProteinEvolverABC.setLocation(280, 210); // right, down
		TextPopSizeProteinEvolverABC.setForeground(Color.darkGray);
		TextPopSizeProteinEvolverABC.setFont(PLAINAtt);
        TextPopSizeProteinEvolverABC.setSize(200, 30); // long, high
		panel4.add(TextPopSizeProteinEvolverABC);		
///////



       	label4f.setText("Haploid / Diploid data: ");
		label4f.setLocation(30, 260); // right, down
        label4f.setSize(200, 30); // long, high
      	panel4.add(label4f);
		
		KindDataProteinEvolverABC_group.add(KindDataProteinEvolverABC_Hap);
		KindDataProteinEvolverABC_group.add(KindDataProteinEvolverABC_Dip);
		KindDataProteinEvolverABC_Dip.setSelected(true);
		KindDataProteinEvolverABC_Hap.setLocation(200, 260); // right, down
		KindDataProteinEvolverABC_Hap.setSize(95, 30); // long, high
		KindDataProteinEvolverABC_Dip.setLocation(200, 290); // right, down
		KindDataProteinEvolverABC_Dip.setSize(95, 30); // long, high
		panel4.add(KindDataProteinEvolverABC_Hap);
		panel4.add(KindDataProteinEvolverABC_Dip);
		
		KindDataProteinEvolverABC_Hap.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			KindDataProteinEvolverABC = "haploid";

			// update Rho
			if (PrintRho == 1)
				{
				int xhd = -1;
				if (KindDataProteinEvolverABC == "haploid") 
					{
					xhd = 1;
    	    		} 
				if (KindDataProteinEvolverABC == "diploid")
					{
					xhd = 2;
        			}

				if (rtype == 0) // one rho
					{
					Rho_MAX = 2 * xhd * PopSize_MAX * rfix * SequenceLengthNt;
					Rho_MAX = Rho_MAX*100;
					Rho_MAX = (double)((int) Rho_MAX);
					Rho_MAX = Rho_MAX /100;
					AVrho = "Rho: " + String.valueOf(Rho_MAX);
					Rho.setText(AVrho);
					}
				if (rtype == 1) // two rho
					{
					Rho_MAX = 2 * xhd * PopSize_MAX * rtwomax * SequenceLengthNt;
					Rho_MIN = 2 * xhd * PopSize_MAX * rtwomin * SequenceLengthNt;
					Rho_MAX = Rho_MAX*100;
					Rho_MAX = (double)((int) Rho_MAX);
					Rho_MAX = Rho_MAX /100;
					Rho_MIN = Rho_MIN*100;
					Rho_MIN = (double)((int) Rho_MIN);
					Rho_MIN = Rho_MIN /100;
					String A1 = "Rho: " + String.valueOf(Rho_MIN) + " ";
					String A2 = String.valueOf(Rho_MAX);
					String A3 = A1 + A2;
					AVrho = A3;
					Rho.setText(AVrho);
					}

				if ((Rho_MAX > 150) && (Error == 0))
					{
					System.out.println("Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX);
					JOptionPane.showMessageDialog(null, "Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else
					{
					System.out.println("Population recombination rate (Rho max): " + Rho_MAX);
					}
				}
	
			}
		});


		KindDataProteinEvolverABC_Dip.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			KindDataProteinEvolverABC = "diploid";	

			// update Rho
			if (PrintRho == 1)
				{
				int xhd = -1;
				if (KindDataProteinEvolverABC == "haploid") 
					{
					xhd = 1;
    	    		} 
				if (KindDataProteinEvolverABC == "diploid")
					{
					xhd = 2;
        			}

				if (rtype == 0) // one rho
					{
					Rho_MAX = 2 * xhd * PopSize_MAX * rfix * SequenceLengthNt;
					Rho_MAX = Rho_MAX*100;
					Rho_MAX = (double)((int) Rho_MAX);
					Rho_MAX = Rho_MAX /100;
					AVrho = "Rho: " + String.valueOf(Rho_MAX);
					Rho.setText(AVrho);
					}
				if (rtype == 1) // two rho
					{
					Rho_MAX = 2 * xhd * PopSize_MAX * rtwomax * SequenceLengthNt;
					Rho_MIN = 2 * xhd * PopSize_MAX * rtwomin * SequenceLengthNt;
					Rho_MAX = Rho_MAX*100;
					Rho_MAX = (double)((int) Rho_MAX);
					Rho_MAX = Rho_MAX /100;
					Rho_MIN = Rho_MIN*100;
					Rho_MIN = (double)((int) Rho_MIN);
					Rho_MIN = Rho_MIN /100;
					String A1 = "Rho: " + String.valueOf(Rho_MIN) + " ";
					String A2 = String.valueOf(Rho_MAX);
					String A3 = A1 + A2;
					AVrho = A3;
					Rho.setText(AVrho);
					}

				if ((Rho_MAX > 150) && (Error == 0))
					{
					System.out.println("Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX);
					JOptionPane.showMessageDialog(null, "Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else
					{
					System.out.println("Population recombination rate (Rho max): " + Rho_MAX);
					}
				}

			}
		});
		


		JLabel label5ef = new JLabel();
		label5ef.setText("Recombination rate: ");
		label5ef.setLocation(30, 340); // right, down
	    label5ef.setSize(1000, 30); // long, high
    	panel4.add(label5ef);
        
        JLabel label5efm = new JLabel();
        label5efm.setText("THIS PARAMETER WILL BE ESTIMATED!");
        label5efm.setLocation(330, 340); // right, down
        label5efm.setSize(1000, 30); // long, high
        panel4.add(label5efm);

		/////////
			HomRecRateProteinEvolverABC.setLocation(200, 340); // right, down
    	    HomRecRateProteinEvolverABC.setSize(120, 30); // long, high
			panel4.add(HomRecRateProteinEvolverABC);

			HomRecRateProteinEvolverABC.setSelectedItem("uniform"); // default
			TextFix_HomRecRate.setText("0"); // default
			TextHomRecRateProteinEvolverABC.setText("uniform 0 3.0e-6"); // default
			TextUnif1_HomRecRate.setText("0"); // default
			TextUnif2_HomRecRate.setText("3.0e-6"); // default
			Rho.setText(AVrho); // default
			// Rho.setText("Rho: 0"); // default
			Unif_Window_HomRecRate.setVisible(false); // default
			Unif_Window_HomRecRate.dispose(); // default
			TextExp1_HomRecRate.setText("1.2e7"); // default
			TextNorm1_HomRecRate.setText("1.5e-7"); // default
			TextNorm2_HomRecRate.setText("1.5e-5"); // default
			TextGamma1_HomRecRate.setText("1.5e-7"); // default
			TextGamma2_HomRecRate.setText("1.5e-5"); // default
			TextBeta1_HomRecRate.setText("1.5e-7"); // default
			TextBeta2_HomRecRate.setText("1.5e-5"); // default
			
			HomRecRateProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				JComboBox KindOf = (JComboBox) e.getSource();
				String seletedKindOf = (String) KindOf.getSelectedItem(); 	//String[] HomRecRateProteinEvolverABCOptions = {"no", "fix", "uniform", "exponential", "normal", "gamma", "beta"}; // fix, unif, norm(t), exp(t), gamma(t), beta(t)

				if (seletedKindOf == "fix")
					{
					Rho.setText(" ");
					FirstTimeFix_Window_HomRecRate++;
					Fix_Window_HomRecRate.setVisible( true );
									
					if (FirstTimeFix_Window_HomRecRate == 1)
						{
						Fix_Window_HomRecRate.setTitle( "Fix" );
						Fix_Window_HomRecRate.setSize(400, 300);
						Fix_Window_HomRecRate.setLayout( new GridLayout( 3, 2 ) ); // 15 rows, 2 columns
						Fix_Window_HomRecRate.setBackground(Color.white);
						Fix_Window_HomRecRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Fix_Window_HomRecRate.setLocationRelativeTo(null);

						JLabel labelX1 = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1.setText("Value e.g., 1.0e-7");
						//labelX1.setLocation(30, 130); // right, down
        				//labelX1.setSize(300, 30); // long, high
      					Fix_Window_HomRecRate.add(labelX1);
	
						Fix_Window_HomRecRate.add(TextFix_HomRecRate);	
					
						JLabel labelXB = new JLabel();
       					labelXB.setText(" ");
      					Fix_Window_HomRecRate.add(labelXB);
						JLabel labelXC = new JLabel();
       					labelXC.setText(" ");
      					Fix_Window_HomRecRate.add(labelXC);
				

						//This creates a new button 
       					ButtonNext_Fix_Window_Next_HomRecRate.setSize(70, 70); // long, high
       	 				ButtonNext_Fix_Window_Next_HomRecRate.setVisible(true); 
       					Fix_Window_HomRecRate.add(ButtonNext_Fix_Window_Next_HomRecRate);

						//This creates a new button 
    	   				ButtonNext_Fix_Window_Handler_Back_HomRecRate.setSize(70, 70); // long, high
       	 				ButtonNext_Fix_Window_Handler_Back_HomRecRate.setVisible(true); 
       					Fix_Window_HomRecRate.add(ButtonNext_Fix_Window_Handler_Back_HomRecRate);
						}
        			} // end fix

				if (seletedKindOf == "uniform")
					{
					Rho.setText(" ");
					FirstTimeUnif_Window_HomRecRate++;
					Unif_Window_HomRecRate.setVisible( true );
									
					if (FirstTimeUnif_Window_HomRecRate == 1)
						{
						Unif_Window_HomRecRate.setTitle( "Uniform distribution" );
						Unif_Window_HomRecRate.setSize(500, 300);
						Unif_Window_HomRecRate.setLayout( new GridLayout( 4, 2 ) ); // 15 rows, 2 columns
						Unif_Window_HomRecRate.setBackground(Color.white);
						Unif_Window_HomRecRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Unif_Window_HomRecRate.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1b.setText("Minimum value e.g., 0");
      					Unif_Window_HomRecRate.add(labelX1b);
	
						Unif_Window_HomRecRate.add(TextUnif1_HomRecRate);	
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText("Maximum value e.g., 1.5e-7");
      					Unif_Window_HomRecRate.add(labelX1c);
	
						Unif_Window_HomRecRate.add(TextUnif2_HomRecRate);	
						
						JLabel labelXBc = new JLabel();
       					labelXBc.setText(" ");
      					Unif_Window_HomRecRate.add(labelXBc);
						JLabel labelXCc = new JLabel();
    	   				labelXCc.setText(" ");
      					Unif_Window_HomRecRate.add(labelXCc);
					
	
						//This creates a new button 
    	   				ButtonNext_Unif_Window_Next_HomRecRate.setSize(70, 70); // long, high
        				ButtonNext_Unif_Window_Next_HomRecRate.setVisible(true); 
       					Unif_Window_HomRecRate.add(ButtonNext_Unif_Window_Next_HomRecRate);
	
						//This creates a new button 
       					ButtonNext_Unif_Window_Handler_Back_HomRecRate.setSize(70, 70); // long, high
        				ButtonNext_Unif_Window_Handler_Back_HomRecRate.setVisible(true); 
       					Unif_Window_HomRecRate.add(ButtonNext_Unif_Window_Handler_Back_HomRecRate);
						}
        			} // end unif

				if (seletedKindOf == "exponential")
					{
					Rho.setText(" ");
					FirstTimeExp_Window_HomRecRate++;
					Exp_Window_HomRecRate.setVisible( true );
									
					if (FirstTimeExp_Window_HomRecRate == 1)
						{
						Exp_Window_HomRecRate.setTitle( "Exponential distribution" );
						Exp_Window_HomRecRate.setSize(500, 300);
						Exp_Window_HomRecRate.setLayout( new GridLayout( 6, 2 ) ); // 15 rows, 2 columns
						Exp_Window_HomRecRate.setBackground(Color.white);
						Exp_Window_HomRecRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Exp_Window_HomRecRate.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1b.setText("Rate e.g., 1.2e7");
      					Exp_Window_HomRecRate.add(labelX1b);
	
						Exp_Window_HomRecRate.add(TextExp1_HomRecRate);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Exp_Window_HomRecRate.add(labelXgb);	
					
						String[] HomRecRate_Exp_truncatedOptions = {"no", "yes"};
    					JComboBox HomRecRate_Exp_truncated = new JComboBox(HomRecRate_Exp_truncatedOptions);
        				Exp_Window_HomRecRate.add(HomRecRate_Exp_truncated);

       					HomRecRate_labelt1_Exp.setText("Minimum value e.g., 1.5e-8");
      					Exp_Window_HomRecRate.add(HomRecRate_labelt1_Exp);
	
						Exp_Window_HomRecRate.add(TextExp3_HomRecRate);

       					HomRecRate_labelt2_Exp.setText("Maximum value e.g., 1.5e-7");
      					Exp_Window_HomRecRate.add(HomRecRate_labelt2_Exp);
	
						Exp_Window_HomRecRate.add(TextExp4_HomRecRate);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Exp_Window_HomRecRate.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Exp_Window_HomRecRate.add(labelX1h);
						

						HomRecRate_labelt1_Exp.setVisible(false);
						TextExp3_HomRecRate.setVisible(false);
						HomRecRate_labelt2_Exp.setVisible(false);
						TextExp4_HomRecRate.setVisible(false);
						
						HomRecRate_Exp_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								HomRecRate_labelt1_Exp.setVisible(true);
								TextExp3_HomRecRate.setVisible(true);
								HomRecRate_labelt2_Exp.setVisible(true);
								TextExp4_HomRecRate.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								HomRecRate_labelt1_Exp.setVisible(false);
								TextExp3_HomRecRate.setVisible(false);
								HomRecRate_labelt2_Exp.setVisible(false);
								TextExp4_HomRecRate.setVisible(false);
								
								TextExp3_HomRecRate.setText("");
								TextExp4_HomRecRate.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Exp_Window_Next_HomRecRate.setSize(70, 70); // long, high
        				ButtonNext_Exp_Window_Next_HomRecRate.setVisible(true); 
       					Exp_Window_HomRecRate.add(ButtonNext_Exp_Window_Next_HomRecRate);
	
						//This creates a new button 
       					ButtonNext_Exp_Window_Handler_Back_HomRecRate.setSize(70, 70); // long, high
        				ButtonNext_Exp_Window_Handler_Back_HomRecRate.setVisible(true); 
       					Exp_Window_HomRecRate.add(ButtonNext_Exp_Window_Handler_Back_HomRecRate);
						}
        			} // end Exp

				if (seletedKindOf == "normal")
					{
					Rho.setText(" ");
					FirstTimeNorm_Window_HomRecRate++;
					Norm_Window_HomRecRate.setVisible( true );
									
					if (FirstTimeNorm_Window_HomRecRate == 1)
						{
						Norm_Window_HomRecRate.setTitle( "Normal distribution" );
						Norm_Window_HomRecRate.setSize(500, 300);
						Norm_Window_HomRecRate.setLayout( new GridLayout( 7, 2 ) ); // 15 rows, 2 columns
						Norm_Window_HomRecRate.setBackground(Color.white);
						Norm_Window_HomRecRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Norm_Window_HomRecRate.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
       					labelX1b.setText("Mean (location) e.g., 0.5");
      					Norm_Window_HomRecRate.add(labelX1b);
	
						Norm_Window_HomRecRate.add(TextNorm1_HomRecRate);

						JLabel labelX2b = new JLabel();
       					labelX2b.setText("Variance (squared scale) e.g., 0.001");
      					Norm_Window_HomRecRate.add(labelX2b);
	
						Norm_Window_HomRecRate.add(TextNorm2_HomRecRate);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Norm_Window_HomRecRate.add(labelXgb);	
					
						String[] HomRecRate_Norm_truncatedOptions = {"no", "yes"};
  						JComboBox HomRecRate_Norm_truncated = new JComboBox(HomRecRate_Norm_truncatedOptions);
        				Norm_Window_HomRecRate.add(HomRecRate_Norm_truncated);

       					HomRecRate_labelt1_Norm.setText("Minimum value e.g., 1.5e-8");
      					Norm_Window_HomRecRate.add(HomRecRate_labelt1_Norm);
	
						Norm_Window_HomRecRate.add(TextNorm3_HomRecRate);

       					HomRecRate_labelt2_Norm.setText("Maximum value e.g., 1.5e-7");
      					Norm_Window_HomRecRate.add(HomRecRate_labelt2_Norm);
	
						Norm_Window_HomRecRate.add(TextNorm4_HomRecRate);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Norm_Window_HomRecRate.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Norm_Window_HomRecRate.add(labelX1h);
						

						HomRecRate_labelt1_Norm.setVisible(false);
						TextNorm3_HomRecRate.setVisible(false);
						HomRecRate_labelt2_Norm.setVisible(false);
						TextNorm4_HomRecRate.setVisible(false);
						
						HomRecRate_Norm_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								HomRecRate_labelt1_Norm.setVisible(true);
								TextNorm3_HomRecRate.setVisible(true);
								HomRecRate_labelt2_Norm.setVisible(true);
								TextNorm4_HomRecRate.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								HomRecRate_labelt1_Norm.setVisible(false);
								TextNorm3_HomRecRate.setVisible(false);
								HomRecRate_labelt2_Norm.setVisible(false);
								TextNorm4_HomRecRate.setVisible(false);
								
								TextNorm3_HomRecRate.setText("");
								TextNorm4_HomRecRate.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Norm_Window_Next_HomRecRate.setSize(70, 70); // long, high
        				ButtonNext_Norm_Window_Next_HomRecRate.setVisible(true); 
       					Norm_Window_HomRecRate.add(ButtonNext_Norm_Window_Next_HomRecRate);
	
						//This creates a new button 
       					ButtonNext_Norm_Window_Handler_Back_HomRecRate.setSize(70, 70); // long, high
        				ButtonNext_Norm_Window_Handler_Back_HomRecRate.setVisible(true); 
       					Norm_Window_HomRecRate.add(ButtonNext_Norm_Window_Handler_Back_HomRecRate);
						}
        			} // end Norm

				if (seletedKindOf == "gamma")
					{
					Rho.setText(" ");
					FirstTimeGamma_Window_HomRecRate++;
					Gamma_Window_HomRecRate.setVisible( true );
									
					if (FirstTimeGamma_Window_HomRecRate == 1)
						{
						Gamma_Window_HomRecRate.setTitle( "Gamma distribution" );
						Gamma_Window_HomRecRate.setSize(500, 300);
						Gamma_Window_HomRecRate.setLayout( new GridLayout( 7, 2 ) ); // 15 rows, 2 columns
						Gamma_Window_HomRecRate.setBackground(Color.white);
						Gamma_Window_HomRecRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Gamma_Window_HomRecRate.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
       					labelX1b.setText("Shape e.g., 0.5");
      					Gamma_Window_HomRecRate.add(labelX1b);
	
						Gamma_Window_HomRecRate.add(TextGamma1_HomRecRate);

						JLabel labelX2b = new JLabel();
       					labelX2b.setText("Scale e.g., 0.001");
      					Gamma_Window_HomRecRate.add(labelX2b);
	
						Gamma_Window_HomRecRate.add(TextGamma2_HomRecRate);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Gamma_Window_HomRecRate.add(labelXgb);	
					
						String[] HomRecRate_Gamma_truncatedOptions = {"no", "yes"};
  						JComboBox HomRecRate_Gamma_truncated = new JComboBox(HomRecRate_Gamma_truncatedOptions);
        				Gamma_Window_HomRecRate.add(HomRecRate_Gamma_truncated);

       					HomRecRate_labelt1_Gamma.setText("Minimum value e.g., 1.5e-8");
      					Gamma_Window_HomRecRate.add(HomRecRate_labelt1_Gamma);
	
						Gamma_Window_HomRecRate.add(TextGamma3_HomRecRate);

       					HomRecRate_labelt2_Gamma.setText("Maximum value e.g., 1.5e-7");
      					Gamma_Window_HomRecRate.add(HomRecRate_labelt2_Gamma);
	
						Gamma_Window_HomRecRate.add(TextGamma4_HomRecRate);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Gamma_Window_HomRecRate.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Gamma_Window_HomRecRate.add(labelX1h);
						

						HomRecRate_labelt1_Gamma.setVisible(false);
						TextGamma3_HomRecRate.setVisible(false);
						HomRecRate_labelt2_Gamma.setVisible(false);
						TextGamma4_HomRecRate.setVisible(false);
						
						HomRecRate_Gamma_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								HomRecRate_labelt1_Gamma.setVisible(true);
								TextGamma3_HomRecRate.setVisible(true);
								HomRecRate_labelt2_Gamma.setVisible(true);
								TextGamma4_HomRecRate.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								HomRecRate_labelt1_Gamma.setVisible(false);
								TextGamma3_HomRecRate.setVisible(false);
								HomRecRate_labelt2_Gamma.setVisible(false);
								TextGamma4_HomRecRate.setVisible(false);
								
								TextGamma3_HomRecRate.setText("");
								TextGamma4_HomRecRate.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Gamma_Window_Next_HomRecRate.setSize(70, 70); // long, high
        				ButtonNext_Gamma_Window_Next_HomRecRate.setVisible(true); 
       					Gamma_Window_HomRecRate.add(ButtonNext_Gamma_Window_Next_HomRecRate);
	
						//This creates a new button 
       					ButtonNext_Gamma_Window_Handler_Back_HomRecRate.setSize(70, 70); // long, high
        				ButtonNext_Gamma_Window_Handler_Back_HomRecRate.setVisible(true); 
       					Gamma_Window_HomRecRate.add(ButtonNext_Gamma_Window_Handler_Back_HomRecRate);
						}
        			} // end Gamma

				if (seletedKindOf == "beta")
					{
					Rho.setText(" ");
					FirstTimeBeta_Window_HomRecRate++;
					Beta_Window_HomRecRate.setVisible( true );
									
					if (FirstTimeBeta_Window_HomRecRate == 1)
						{
						Beta_Window_HomRecRate.setTitle( "Beta distribution" );
						Beta_Window_HomRecRate.setSize(500, 300);
						Beta_Window_HomRecRate.setLayout( new GridLayout( 7, 2 ) ); // 15 rows, 2 columns
						Beta_Window_HomRecRate.setBackground(Color.white);
						Beta_Window_HomRecRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Beta_Window_HomRecRate.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
       					labelX1b.setText("Shape (alpha) e.g., 0.5");
      					Beta_Window_HomRecRate.add(labelX1b);
	
						Beta_Window_HomRecRate.add(TextBeta1_HomRecRate);

						JLabel labelX2b = new JLabel();
       					labelX2b.setText("Shape (beta) e.g., 0.001");
      					Beta_Window_HomRecRate.add(labelX2b);
	
						Beta_Window_HomRecRate.add(TextBeta2_HomRecRate);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Beta_Window_HomRecRate.add(labelXgb);
      					
						String[] HomRecRate_Beta_truncatedOptions = {"no", "yes"};
  						JComboBox HomRecRate_Beta_truncated = new JComboBox(HomRecRate_Beta_truncatedOptions);
        				Beta_Window_HomRecRate.add(HomRecRate_Beta_truncated);

       					HomRecRate_labelt1_Beta.setText("Minimum value e.g., 1.5e-8");
      					Beta_Window_HomRecRate.add(HomRecRate_labelt1_Beta);
	
						Beta_Window_HomRecRate.add(TextBeta3_HomRecRate);

       					HomRecRate_labelt2_Beta.setText("Maximum value e.g., 1.5e-7");
      					Beta_Window_HomRecRate.add(HomRecRate_labelt2_Beta);
	
						Beta_Window_HomRecRate.add(TextBeta4_HomRecRate);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Beta_Window_HomRecRate.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Beta_Window_HomRecRate.add(labelX1h);
						

						HomRecRate_labelt1_Beta.setVisible(false);
						TextBeta3_HomRecRate.setVisible(false);
						HomRecRate_labelt2_Beta.setVisible(false);
						TextBeta4_HomRecRate.setVisible(false);
						
						HomRecRate_Beta_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								HomRecRate_labelt1_Beta.setVisible(true);
								TextBeta3_HomRecRate.setVisible(true);
								HomRecRate_labelt2_Beta.setVisible(true);
								TextBeta4_HomRecRate.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								HomRecRate_labelt1_Beta.setVisible(false);
								TextBeta3_HomRecRate.setVisible(false);
								HomRecRate_labelt2_Beta.setVisible(false);
								TextBeta4_HomRecRate.setVisible(false);
								
								TextBeta3_HomRecRate.setText("");
								TextBeta4_HomRecRate.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Beta_Window_Next_HomRecRate.setSize(70, 70); // long, high
        				ButtonNext_Beta_Window_Next_HomRecRate.setVisible(true); 
       					Beta_Window_HomRecRate.add(ButtonNext_Beta_Window_Next_HomRecRate);
	
						//This creates a new button 
       					ButtonNext_Beta_Window_Handler_Back_HomRecRate.setSize(70, 70); // long, high
        				ButtonNext_Beta_Window_Handler_Back_HomRecRate.setVisible(true); 
       					Beta_Window_HomRecRate.add(ButtonNext_Beta_Window_Handler_Back_HomRecRate);
						}
        			} // end Beta



				TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
				}
			});

			// Fix (double) - exit NOT saving
			ButtonNext_Fix_Window_Handler_Back_HomRecRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_HomRecRate = "";
				System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
			
				Fix_Window_HomRecRate.setVisible(false);
				Fix_Window_HomRecRate.dispose();

				TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate);
				Rho.setText(" ");

				PrintRho = 0; // 1 yes, 0 no
				rfix = -1;
				rtwomin = -1;
				rtwomax = -1;
				rtype = -1; // 0 fix, 1 two
				}
			});

			// Fix (double) - exit saving
			ButtonNext_Fix_Window_Next_HomRecRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_HomRecRate = "";
				par1 = -1;
				Spar1 = "";

				Spar1 = TextFix_HomRecRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number should be specified");
					JOptionPane.showMessageDialog(null, "A number should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}
				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							Error = Error + 1;
							}
						}
					}
				if (Error == 0)
					{

					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					
					// checking Rho_MAX
					if (NoDemographics == 0)
						{
						if (KindDataProteinEvolverABC == "haploid") 
							{
							Rho_MAX = 2 * 1 * PopSize_MAX * par1 * SequenceLengthNt;
							Rho_MAX = Rho_MAX*100;
							Rho_MAX = (double)((int) Rho_MAX);
							Rho_MAX = Rho_MAX /100;
							AVrho = "Rho: " + String.valueOf(Rho_MAX);
							Rho.setText(AVrho);
    	    				} 
						if (KindDataProteinEvolverABC == "diploid")
							{
							Rho_MAX = 2 * 2 * PopSize_MAX * par1 * SequenceLengthNt;
							Rho_MAX = Rho_MAX*100;
							Rho_MAX = (double)((int) Rho_MAX);
							Rho_MAX = Rho_MAX /100;
							AVrho = "Rho: " + String.valueOf(Rho_MAX);
							Rho.setText(AVrho);
	        				}

						if ((Rho_MAX > 150) && (Error == 0))
							{
							System.out.println("Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX);
							JOptionPane.showMessageDialog(null, "Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX, " ", JOptionPane. INFORMATION_MESSAGE);
							Error = Error + 1;
							//System.exit(0);
							}
						else
							{
							System.out.println("Population recombination rate (Rho max): " + Rho_MAX);
							} 
						}	


					if (Error == 0) // Ok
						{
						PrintRho = 1;
						rfix = par1;
						rtwomin = -1;
						rtwomax = -1;
						rtype = 0; // 0 fix, 1 two


						OutputDistribution_HomRecRate = "fix " + Spar1;
						System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
						Fix_Window_HomRecRate.setVisible(false);
						Fix_Window_HomRecRate.dispose();
	
						TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
						}
					}
					}
				});		

			// Uniform (double) - exit NOT saving
			ButtonNext_Unif_Window_Handler_Back_HomRecRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_HomRecRate = "";
				System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
				Unif_Window_HomRecRate.setVisible(false);
				Unif_Window_HomRecRate.dispose();
				TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
				Rho.setText(" ");

				PrintRho = 0; // 1 yes, 0 no
				rfix = -1;
				rtwomin = -1;
				rtwomax = -1;
				rtype = -1; // 0 fix, 1 two
				}
			});

			// Uniform (double) - exit saving
			ButtonNext_Unif_Window_Next_HomRecRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				PrintRho = 0; // 1 yes, 0 no
				rfix = -1;
				rtwomin = -1;
				rtwomax = -1;
				rtype = -1; // 0 fix, 1 two

				Error = 0;
				OutputDistribution_HomRecRate = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";

				Spar1 = TextUnif1_HomRecRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (minimum) should be specified");
					JOptionPane.showMessageDialog(null, "A number (minimum) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}
				Spar2 = TextUnif2_HomRecRate.getText(); //String Spar1 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (maximum) should be specified");
					JOptionPane.showMessageDialog(null, "A number (maximum) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (minimum) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (minimum) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}
				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (maximum) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (maximum) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}


				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (minimum) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (minimum) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (maximum) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (maximum) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}					

					// checking Rho_MAX
					if (NoDemographics == 0)
						{
						if (KindDataProteinEvolverABC == "haploid") 
							{
							Rho_MAX = 2 * 1 * PopSize_MAX * par2 * SequenceLengthNt;
							Rho_MIN = 2 * 1 * PopSize_MAX * par1 * SequenceLengthNt;
							Rho_MAX = Rho_MAX*100;
							Rho_MAX = (double)((int) Rho_MAX);
							Rho_MAX = Rho_MAX /100;
							Rho_MIN = Rho_MIN*100;
							Rho_MIN = (double)((int) Rho_MIN);
							Rho_MIN = Rho_MIN /100;
							String A1 = "Rho: " + String.valueOf(Rho_MIN) + " ";
							String A2 = String.valueOf(Rho_MAX);
							String A3 = A1 + A2;
							Rho.setText(A3);
    	    				} 
						if (KindDataProteinEvolverABC == "diploid")
							{
							Rho_MAX = 2 * 2 * PopSize_MAX * par2 * SequenceLengthNt;
							Rho_MIN = 2 * 2 * PopSize_MAX * par1 * SequenceLengthNt;
							Rho_MAX = Rho_MAX*100;
							Rho_MAX = (double)((int) Rho_MAX);
							Rho_MAX = Rho_MAX /100;
							Rho_MIN = Rho_MIN*100;
							Rho_MIN = (double)((int) Rho_MIN);
							Rho_MIN = Rho_MIN /100;
							String A1 = "Rho: " + String.valueOf(Rho_MIN) + " ";
							String A2 = String.valueOf(Rho_MAX);
							String A3 = A1 + A2;
							Rho.setText(A3);
	        				}
						
						if ((Rho_MAX > 150) && (Error == 0))
							{
							System.out.println("Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX);
							JOptionPane.showMessageDialog(null, "Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX, " ", JOptionPane. INFORMATION_MESSAGE);
							Error = Error + 1;
							//System.exit(0);
							}
						else
							{
							System.out.println("Population recombination rate (Rho max): " + Rho_MAX);
							}

						PrintRho = 1;
						rfix = -1;
						rtwomin = par1;
						rtwomax = par2;
						rtype = 1; // 0 fix, 1 two
						}
					}

				if (Error == 0)
					{
					if (par1 > par2)
						{
						System.out.println("The minimum value should be smaller than the maximum value");
						JOptionPane.showMessageDialog(null, "The minimum value should be smaller than the maximum value", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					}
					
				if (Error == 0) // Ok
					{
					OutputDistribution_HomRecRate = "uniform " + Spar1 + " " + Spar2;
					System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
					Unif_Window_HomRecRate.setVisible(false);
					Unif_Window_HomRecRate.dispose();
	
					TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
					}

					}
				});	

			// Exponential (double) - exit NOT saving
			ButtonNext_Exp_Window_Handler_Back_HomRecRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_HomRecRate = "";
				System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
			
				Exp_Window_HomRecRate.setVisible(false);
				Exp_Window_HomRecRate.dispose();

				TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
				Rho.setText(" ");

				PrintRho = 0; // 1 yes, 0 no
				rfix = -1;
				rtwomin = -1;
				rtwomax = -1;
				rtype = -1; // 0 fix, 1 two
				}
			});

			// Exponential (double) - exit saving
			ButtonNext_Exp_Window_Next_HomRecRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				PrintRho = 0; // 1 yes, 0 no
				rfix = -1;
				rtwomin = -1;
				rtwomax = -1;
				rtype = -1; // 0 fix, 1 two

				Error = 0;
				OutputDistribution_HomRecRate = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextExp1_HomRecRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (rate) should be specified");
					JOptionPane.showMessageDialog(null, "A number (rate) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (rate) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (rate) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (rate) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (rate) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextExp3_HomRecRate.getText(); //String Spar1 = "23";
				Spar4 = TextExp4_HomRecRate.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_HomRecRate = "exp " + Spar1;
						System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
						Exp_Window_HomRecRate.setVisible(false);
						Exp_Window_HomRecRate.dispose();
	
						TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{

						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}

							// checking Rho_MAX
							if (NoDemographics == 0)
								{
								if (KindDataProteinEvolverABC == "haploid") 
									{
									Rho_MAX = 2 * 1 * PopSize_MAX * par4 * SequenceLengthNt;
									Rho_MIN = 2 * 1 * PopSize_MAX * par3 * SequenceLengthNt;
									Rho_MAX = Rho_MAX*100;
									Rho_MAX = (double)((int) Rho_MAX);
									Rho_MAX = Rho_MAX /100;
									Rho_MIN = Rho_MIN*100;
									Rho_MIN = (double)((int) Rho_MIN);
									Rho_MIN = Rho_MIN /100;
									String A1 = "Rho: " + String.valueOf(Rho_MIN) + " ";
									String A2 = String.valueOf(Rho_MAX);
									String A3 = A1 + A2;
									Rho.setText(A3);
    	    						} 
								if (KindDataProteinEvolverABC == "diploid")
									{
									Rho_MAX = 2 * 2 * PopSize_MAX * par4 * SequenceLengthNt;
									Rho_MIN = 2 * 2 * PopSize_MAX * par3 * SequenceLengthNt;
									Rho_MAX = Rho_MAX*100;
									Rho_MAX = (double)((int) Rho_MAX);
									Rho_MAX = Rho_MAX /100;
									Rho_MIN = Rho_MIN*100;
									Rho_MIN = (double)((int) Rho_MIN);
									Rho_MIN = Rho_MIN /100;
									String A1 = "Rho: " + String.valueOf(Rho_MIN) + " ";
									String A2 = String.valueOf(Rho_MAX);
									String A3 = A1 + A2;
									Rho.setText(A3);
	        						}
						
								if ((Rho_MAX > 150) && (Error == 0))
									{
									System.out.println("Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX);
									JOptionPane.showMessageDialog(null, "Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									//System.exit(0);
									}
								else
									{
									System.out.println("Population recombination rate (Rho max): " + Rho_MAX);
									}
								PrintRho = 1;
								rfix = -1;
								rtwomin = par3;
								rtwomax = par4;
								rtype = 1; // 0 fix, 1 two

								}

							}


						if (Error == 0)
							{
							OutputDistribution_HomRecRate = "exp " + Spar1 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
							Exp_Window_HomRecRate.setVisible(false);
							Exp_Window_HomRecRate.dispose();
		
							TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
							}
						}
					}
					}
				});	

			// Normal (double) - exit NOT saving
			ButtonNext_Norm_Window_Handler_Back_HomRecRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_HomRecRate = "";
				System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
			
				Norm_Window_HomRecRate.setVisible(false);
				Norm_Window_HomRecRate.dispose();

				TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
				Rho.setText(" ");

				PrintRho = 0; // 1 yes, 0 no
				rfix = -1;
				rtwomin = -1;
				rtwomax = -1;
				rtype = -1; // 0 fix, 1 two
				}
			});

			// Normal (double) - exit saving
			ButtonNext_Norm_Window_Next_HomRecRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				PrintRho = 0; // 1 yes, 0 no
				rfix = -1;
				rtwomin = -1;
				rtwomax = -1;
				rtype = -1; // 0 fix, 1 two

				Error = 0;
				OutputDistribution_HomRecRate = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextNorm1_HomRecRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (mean) should be specified");
					JOptionPane.showMessageDialog(null, "A number (mean) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (mean) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (mean) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (mean) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (mean) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				Spar2 = TextNorm2_HomRecRate.getText(); //String Spar2 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (variance) should be specified");
					JOptionPane.showMessageDialog(null, "A number (variance) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (variance) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (variance) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (variance) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (variance) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextNorm3_HomRecRate.getText(); //String Spar1 = "23";
				Spar4 = TextNorm4_HomRecRate.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_HomRecRate = "norm " + Spar1 + " " + Spar2;
						System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
						Norm_Window_HomRecRate.setVisible(false);
						Norm_Window_HomRecRate.dispose();
	
						TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{
						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}

							// checking Rho_MAX
							if (NoDemographics == 0)
								{
								if (KindDataProteinEvolverABC == "haploid") 
									{
									Rho_MAX = 2 * 1 * PopSize_MAX * par4 * SequenceLengthNt;
									Rho_MIN = 2 * 1 * PopSize_MAX * par3 * SequenceLengthNt;
									Rho_MAX = Rho_MAX*100;
									Rho_MAX = (double)((int) Rho_MAX);
									Rho_MAX = Rho_MAX /100;
									Rho_MIN = Rho_MIN*100;
									Rho_MIN = (double)((int) Rho_MIN);
									Rho_MIN = Rho_MIN /100;
									String A1 = "Rho: " + String.valueOf(Rho_MIN) + " ";
									String A2 = String.valueOf(Rho_MAX);
									String A3 = A1 + A2;
									Rho.setText(A3);
    	    						} 
								if (KindDataProteinEvolverABC == "diploid")
									{
									Rho_MAX = 2 * 2 * PopSize_MAX * par4 * SequenceLengthNt;
									Rho_MIN = 2 * 2 * PopSize_MAX * par3 * SequenceLengthNt;
									Rho_MAX = Rho_MAX*100;
									Rho_MAX = (double)((int) Rho_MAX);
									Rho_MAX = Rho_MAX /100;
									Rho_MIN = Rho_MIN*100;
									Rho_MIN = (double)((int) Rho_MIN);
									Rho_MIN = Rho_MIN /100;
									String A1 = "Rho: " + String.valueOf(Rho_MIN) + " ";
									String A2 = String.valueOf(Rho_MAX);
									String A3 = A1 + A2;
									Rho.setText(A3);
	        						}
						
								if ((Rho_MAX > 150) && (Error == 0))
									{
									System.out.println("Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX);
									JOptionPane.showMessageDialog(null, "Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									//System.exit(0);
									}
								else
									{
									System.out.println("Population recombination rate (Rho max): " + Rho_MAX);
									}

								PrintRho = 1;
								rfix = -1;
								rtwomin = par3;
								rtwomax = par4;
								rtype = 1; // 0 fix, 1 two
								}

							}

						if (Error == 0)
							{
							OutputDistribution_HomRecRate = "norm " + Spar1 + " " + Spar2 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
							Norm_Window_HomRecRate.setVisible(false);
							Norm_Window_HomRecRate.dispose();
		
							TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
							}
						}
					}
				}
				});	

			
			// Gamma (double) - exit NOT saving
			ButtonNext_Gamma_Window_Handler_Back_HomRecRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_HomRecRate = "";
				System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
			
				Gamma_Window_HomRecRate.setVisible(false);
				Gamma_Window_HomRecRate.dispose();

				TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
				Rho.setText(" ");

				PrintRho = 0; // 1 yes, 0 no
				rfix = -1;
				rtwomin = -1;
				rtwomax = -1;
				rtype = -1; // 0 fix, 1 two
				}
			});

			// Gamma (double) - exit saving
			ButtonNext_Gamma_Window_Next_HomRecRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				PrintRho = 0; // 1 yes, 0 no
				rfix = -1;
				rtwomin = -1;
				rtwomax = -1;
				rtype = -1; // 0 fix, 1 two

				Error = 0;
				OutputDistribution_HomRecRate = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextGamma1_HomRecRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (shape) should be specified");
					JOptionPane.showMessageDialog(null, "A number (shape) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (shape) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (shape) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (shape) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (shape) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				Spar2 = TextGamma2_HomRecRate.getText(); //String Spar2 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (scale) should be specified");
					JOptionPane.showMessageDialog(null, "A number (scale) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (scale) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (scale) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (scale) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (scale) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextGamma3_HomRecRate.getText(); //String Spar1 = "23";
				Spar4 = TextGamma4_HomRecRate.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_HomRecRate = "gamma " + Spar1 + " " + Spar2;
						System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
						Gamma_Window_HomRecRate.setVisible(false);
						Gamma_Window_HomRecRate.dispose();
	
						TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{

						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}

							// checking Rho_MAX
							if (NoDemographics == 0)
								{
								if (KindDataProteinEvolverABC == "haploid") 
									{
									Rho_MAX = 2 * 1 * PopSize_MAX * par4 * SequenceLengthNt;
									Rho_MIN = 2 * 1 * PopSize_MAX * par3 * SequenceLengthNt;
									Rho_MAX = Rho_MAX*100;
									Rho_MAX = (double)((int) Rho_MAX);
									Rho_MAX = Rho_MAX /100;
									Rho_MIN = Rho_MIN*100;
									Rho_MIN = (double)((int) Rho_MIN);
									Rho_MIN = Rho_MIN /100;
									String A1 = "Rho: " + String.valueOf(Rho_MIN) + " ";
									String A2 = String.valueOf(Rho_MAX);
									String A3 = A1 + A2;
									Rho.setText(A3);
    	    						} 
								if (KindDataProteinEvolverABC == "diploid")
									{
									Rho_MAX = 2 * 2 * PopSize_MAX * par4 * SequenceLengthNt;
									Rho_MIN = 2 * 2 * PopSize_MAX * par3 * SequenceLengthNt;
									Rho_MAX = Rho_MAX*100;
									Rho_MAX = (double)((int) Rho_MAX);
									Rho_MAX = Rho_MAX /100;
									Rho_MIN = Rho_MIN*100;
									Rho_MIN = (double)((int) Rho_MIN);
									Rho_MIN = Rho_MIN /100;
									String A1 = "Rho: " + String.valueOf(Rho_MIN) + " ";
									String A2 = String.valueOf(Rho_MAX);
									String A3 = A1 + A2;
									Rho.setText(A3);
	        						}
						
								if ((Rho_MAX > 150) && (Error == 0))
									{
									System.out.println("Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX);
									JOptionPane.showMessageDialog(null, "Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									//System.exit(0);
									}
								else
									{
									System.out.println("Population recombination rate (Rho max): " + Rho_MAX);
									}

								PrintRho = 1;
								rfix = -1;
								rtwomin = par3;
								rtwomax = par4;
								rtype = 1; // 0 fix, 1 two


								}

							}

						if (Error == 0)
							{
							OutputDistribution_HomRecRate = "gamma " + Spar1 + " " + Spar2 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
							Gamma_Window_HomRecRate.setVisible(false);
							Gamma_Window_HomRecRate.dispose();
		
							TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
							}
						}
					}
				}
				});	

			// Beta (double) - exit NOT saving
			ButtonNext_Beta_Window_Handler_Back_HomRecRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_HomRecRate = "";
				System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
			
				Beta_Window_HomRecRate.setVisible(false);
				Beta_Window_HomRecRate.dispose();

				TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
				Rho.setText(" ");

				PrintRho = 0; // 1 yes, 0 no
				rfix = -1;
				rtwomin = -1;
				rtwomax = -1;
				rtype = -1; // 0 fix, 1 two
				}
			});

			// Beta (double) - exit saving
			ButtonNext_Beta_Window_Next_HomRecRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				PrintRho = 0; // 1 yes, 0 no
				rfix = -1;
				rtwomin = -1;
				rtwomax = -1;
				rtype = -1; // 0 fix, 1 two

				Error = 0;
				OutputDistribution_HomRecRate = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextBeta1_HomRecRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (shape alpha) should be specified");
					JOptionPane.showMessageDialog(null, "A number (shape alpha) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (shape alpha) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (shape alpha) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (shape alpha) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (shape alpha) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				Spar2 = TextBeta2_HomRecRate.getText(); //String Spar2 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (shape beta) should be specified");
					JOptionPane.showMessageDialog(null, "A number (shape beta) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (shape beta) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (shape beta) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (shape beta) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (shape beta) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextBeta3_HomRecRate.getText(); //String Spar1 = "23";
				Spar4 = TextBeta4_HomRecRate.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_HomRecRate = "beta " + Spar1 + " " + Spar2;
						System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
						Beta_Window_HomRecRate.setVisible(false);
						Beta_Window_HomRecRate.dispose();
	
						TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{

						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}

							// checking Rho_MAX
							if (NoDemographics == 0)
								{
								if (KindDataProteinEvolverABC == "haploid") 
									{
									Rho_MAX = 2 * 1 * PopSize_MAX * par4 * SequenceLengthNt;
									Rho_MIN = 2 * 1 * PopSize_MAX * par3 * SequenceLengthNt;
									Rho_MAX = Rho_MAX*100;
									Rho_MAX = (double)((int) Rho_MAX);
									Rho_MAX = Rho_MAX /100;
									Rho_MIN = Rho_MIN*100;
									Rho_MIN = (double)((int) Rho_MIN);
									Rho_MIN = Rho_MIN /100;
									String A1 = "Rho: " + String.valueOf(Rho_MIN) + " ";
									String A2 = String.valueOf(Rho_MAX);
									String A3 = A1 + A2;
									Rho.setText(A3);
    	    						} 
								if (KindDataProteinEvolverABC == "diploid")
									{
									Rho_MAX = 2 * 2 * PopSize_MAX * par4 * SequenceLengthNt;
									Rho_MIN = 2 * 2 * PopSize_MAX * par3 * SequenceLengthNt;
									Rho_MAX = Rho_MAX*100;
									Rho_MAX = (double)((int) Rho_MAX);
									Rho_MAX = Rho_MAX /100;
									Rho_MIN = Rho_MIN*100;
									Rho_MIN = (double)((int) Rho_MIN);
									Rho_MIN = Rho_MIN /100;
									String A1 = "Rho: " + String.valueOf(Rho_MIN) + " ";
									String A2 = String.valueOf(Rho_MAX);
									String A3 = A1 + A2;
									Rho.setText(A3);
	        						}
						
								if ((Rho_MAX > 150) && (Error == 0))
									{
									System.out.println("Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX);
									JOptionPane.showMessageDialog(null, "Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									//System.exit(0);
									}
								else
									{
									System.out.println("Population recombination rate (Rho max): " + Rho_MAX);
									}

								PrintRho = 1;
								rfix = -1;
								rtwomin = par3;
								rtwomax = par4;
								rtype = 1; // 0 fix, 1 two

								}

							}

						if (Error == 0)
							{
							PrintRho = 1;
							OutputDistribution_HomRecRate = "beta " + Spar1 + " " + Spar2 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_HomRecRate: " + OutputDistribution_HomRecRate);
							Beta_Window_HomRecRate.setVisible(false);
							Beta_Window_HomRecRate.dispose();
		
							TextHomRecRateProteinEvolverABC.setText(OutputDistribution_HomRecRate); 
							}
						}
					}
				}
				});	

		TextHomRecRateProteinEvolverABC.setLocation(200, 370); // right, down
		TextHomRecRateProteinEvolverABC.setForeground(Color.darkGray);
		TextHomRecRateProteinEvolverABC.setFont(PLAINAtt);
        TextHomRecRateProteinEvolverABC.setSize(250, 30); // long, high
		panel4.add(TextHomRecRateProteinEvolverABC);

		Rho.setLocation(200, 400); // right, down
		Rho.setForeground(Color.darkGray);
		Rho.setFont(PLAINAtt);
        Rho.setSize(250, 30); // long, high
		panel4.add(Rho);



       	label4line1.setText("____________________________ Longitudinal sampling ____________________________");
		label4line1.setLocation(450, 100); // right, down
        label4line1.setSize(600, 30); // long, high
      	panel4.add(label4line1);

       	label4g.setText("Dated tips: ");
		label4g.setLocation(450, 130); // right, down
        label4g.setSize(300, 30); // long, high
      	panel4.add(label4g);
		
		DatedTipsProteinEvolverABC_group.add(DatedTipsProteinEvolverABC_No);
		DatedTipsProteinEvolverABC_group.add(DatedTipsProteinEvolverABC_Yes);
		DatedTipsProteinEvolverABC_No.setSelected(true);
		DatedTipsProteinEvolverABC_No.setLocation(580, 130); // right, down
		DatedTipsProteinEvolverABC_No.setSize(60, 30); // long, high
		DatedTipsProteinEvolverABC_Yes.setLocation(650, 130); // right, down
		DatedTipsProteinEvolverABC_Yes.setSize(60, 30); // long, high
		panel4.add(DatedTipsProteinEvolverABC_No);
		panel4.add(DatedTipsProteinEvolverABC_Yes);
		
		/* Multiple user-specified DatedTips */
		label4ee.setText("");
		label4ee.setFont(new Font("Arial", Font.PLAIN, 14));
		label4ee.setForeground(Color.darkGray);
		label4ee.setLocation(730, 130); // right, down
        label4ee.setSize(200, 30); // long, high
      	panel4.add(label4ee);
		label4ee.setVisible(false);


		DatedTipsProteinEvolverABC_No.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			
			OneDatedTips_int = 0;
			label4ee.setText("");
			label4ee.setVisible(false); // DatedTips not saved

			MultDatedTipsWindow.setVisible(false);
			MultDatedTipsWindow.dispose();
			ProteinEvolverABC_DatedTips = "#DatedTips=4 1995 1 10 2003 11 16 1997 17 26 2001 27 29";
			}
		});
		DatedTipsProteinEvolverABC_Yes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

			OneDatedTips_int = 1;				
			FirstTimeMultDatedTipsWindow = FirstTimeMultDatedTipsWindow + 1;
			MultDatedTipsWindow.setVisible( true );

			
			if (FirstTimeMultDatedTipsWindow == 1)
				{
				MultDatedTipsWindow.setTitle( "User-specified dated tips (Longitudinal sampling)" );
				MultDatedTipsWindow.setSize(1000, 800);
				MultDatedTipsWindow.setLayout( new GridLayout( 15, 4 ) ); // 16 rows, 4 columns
				MultDatedTipsWindow.setBackground(Color.white);
				MultDatedTipsWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        		MultDatedTipsWindow.setLocationRelativeTo(null);
				
				JLabel labelX1 = new JLabel();
				labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       			labelX1.setText("Multiple user-specified dated tips");
      			MultDatedTipsWindow.add(labelX1);

				JLabel labelX1b = new JLabel();
				labelX1b.setFont(new Font("Arial", Font.BOLD, 14));
       			labelX1b.setText("- Longitudinal sampling");
      			MultDatedTipsWindow.add(labelX1b);

				JLabel labelX1c = new JLabel();
       			labelX1c.setText(" ");
      			MultDatedTipsWindow.add(labelX1c);
      			
      			JLabel labelX1d = new JLabel();
       			labelX1d.setText(" ");
      			MultDatedTipsWindow.add(labelX1d);
				
				
				JLabel labelX2 = new JLabel();
       			labelX2.setText("Number of sampling times ");
      			MultDatedTipsWindow.add(labelX2);

				MultDatedTipsWindow.add(NumberOfMultDatedTipsProteinEvolverABC_);
				
				JLabel labelX2m = new JLabel();
       			labelX2m.setText(" "); 
      			MultDatedTipsWindow.add(labelX2m);
				
				JLabel labelX2n = new JLabel();
       			labelX2n.setText(" "); 
      			MultDatedTipsWindow.add(labelX2n);
				
				
				JLabel labelX3a = new JLabel();
       			labelX3a.setText("Sampling time number ");
      			MultDatedTipsWindow.add(labelX3a);
				
				JLabel labelX3 = new JLabel();
       			labelX3.setText("Sampling time");
      			MultDatedTipsWindow.add(labelX3);

				JLabel labelX3bc = new JLabel();
       			labelX3bc.setText("Initial sample for this time");
      			MultDatedTipsWindow.add(labelX3bc);

				JLabel labelX1e = new JLabel();
       			labelX1e.setText("Final sample for this time");
      			MultDatedTipsWindow.add(labelX1e);

       			labelXXd1.setText("1");
      			MultDatedTipsWindow.add(labelXXd1);
				MultDatedTipsWindow.add(TextMultDatedTipsProteinEvolverABC_1);
       			TextMultDatedTipsProteinEvolverABC_1.setText("1995");
				MultDatedTipsWindow.add(TextMultDatedTips_Reg1_1);
       			TextMultDatedTips_Reg1_1.setText("1");
				MultDatedTipsWindow.add(TextMultDatedTips_Reg2_1);
       			TextMultDatedTips_Reg2_1.setText("1");

       			labelXXd2.setText("2");
      			MultDatedTipsWindow.add(labelXXd2);
				MultDatedTipsWindow.add(TextMultDatedTipsProteinEvolverABC_2);
       			TextMultDatedTipsProteinEvolverABC_2.setText("2003");
				MultDatedTipsWindow.add(TextMultDatedTips_Reg1_2);
       			TextMultDatedTips_Reg1_2.setText("2");
				MultDatedTipsWindow.add(TextMultDatedTips_Reg2_2);
       			TextMultDatedTips_Reg2_2.setText("8");

       			labelXXd3.setText("3");
      			MultDatedTipsWindow.add(labelXXd3);
				MultDatedTipsWindow.add(TextMultDatedTipsProteinEvolverABC_3);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg1_3);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg2_3);
				
       			labelXXd4.setText("4");
      			MultDatedTipsWindow.add(labelXXd4);
				MultDatedTipsWindow.add(TextMultDatedTipsProteinEvolverABC_4);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg1_4);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg2_4);
				
       			labelXXd5.setText("5");
      			MultDatedTipsWindow.add(labelXXd5);
				MultDatedTipsWindow.add(TextMultDatedTipsProteinEvolverABC_5);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg1_5);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg2_5);
				
       			labelXXd6.setText("6");
      			MultDatedTipsWindow.add(labelXXd6);
				MultDatedTipsWindow.add(TextMultDatedTipsProteinEvolverABC_6);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg1_6);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg2_6);
				
       			labelXXd7.setText("7");
      			MultDatedTipsWindow.add(labelXXd7);
				MultDatedTipsWindow.add(TextMultDatedTipsProteinEvolverABC_7);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg1_7);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg2_7);
				
       			labelXXd8.setText("8");
      			MultDatedTipsWindow.add(labelXXd8);
				MultDatedTipsWindow.add(TextMultDatedTipsProteinEvolverABC_8);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg1_8);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg2_8);
				
       			labelXXd9.setText("9");
      			MultDatedTipsWindow.add(labelXXd9);
				MultDatedTipsWindow.add(TextMultDatedTipsProteinEvolverABC_9);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg1_9);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg2_9);
				
       			labelXXd10.setText("10");
      			MultDatedTipsWindow.add(labelXXd10);
				MultDatedTipsWindow.add(TextMultDatedTipsProteinEvolverABC_10);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg1_10);
				MultDatedTipsWindow.add(TextMultDatedTips_Reg2_10);
				
				
				JLabel labelXA = new JLabel();
       			labelXA.setText(" ");
      			MultDatedTipsWindow.add(labelXA);
				
				JLabel labelXB = new JLabel();
       			labelXB.setText(" ");
      			MultDatedTipsWindow.add(labelXB);
						
				JLabel labelXC = new JLabel();
       			labelXC.setText(" ");
      			MultDatedTipsWindow.add(labelXC);
						
				JLabel labelXXd = new JLabel();
       			labelXXd.setText(" ");
      			MultDatedTipsWindow.add(labelXXd);
						
				
				// default
       			labelXXd3.setVisible(false);
				TextMultDatedTips_Reg1_3.setVisible(false);
				TextMultDatedTips_Reg2_3.setVisible(false);
				TextMultDatedTipsProteinEvolverABC_3.setVisible(false);

       			labelXXd4.setVisible(false);
				TextMultDatedTips_Reg1_4.setVisible(false);
				TextMultDatedTips_Reg2_4.setVisible(false);
				TextMultDatedTipsProteinEvolverABC_4.setVisible(false);

       			labelXXd5.setVisible(false);
				TextMultDatedTips_Reg1_5.setVisible(false);
				TextMultDatedTips_Reg2_5.setVisible(false);
				TextMultDatedTipsProteinEvolverABC_5.setVisible(false);

       			labelXXd6.setVisible(false);
				TextMultDatedTips_Reg1_6.setVisible(false);
				TextMultDatedTips_Reg2_6.setVisible(false);
				TextMultDatedTipsProteinEvolverABC_6.setVisible(false);

       			labelXXd7.setVisible(false);
				TextMultDatedTips_Reg1_7.setVisible(false);
				TextMultDatedTips_Reg2_7.setVisible(false);
				TextMultDatedTipsProteinEvolverABC_7.setVisible(false);

       			labelXXd8.setVisible(false);
				TextMultDatedTips_Reg1_8.setVisible(false);
				TextMultDatedTips_Reg2_8.setVisible(false);
				TextMultDatedTipsProteinEvolverABC_8.setVisible(false);

       			labelXXd9.setVisible(false);
				TextMultDatedTips_Reg1_9.setVisible(false);
				TextMultDatedTips_Reg2_9.setVisible(false);
				TextMultDatedTipsProteinEvolverABC_9.setVisible(false);

       			labelXXd10.setVisible(false);
				TextMultDatedTips_Reg1_10.setVisible(false);
				TextMultDatedTips_Reg2_10.setVisible(false);
				TextMultDatedTipsProteinEvolverABC_10.setVisible(false);
						
				TextNumberOfMultDatedTipsProteinEvolverABC.setText("2");
				
				
				NumberOfMultDatedTipsProteinEvolverABC_.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) 
					{
					JComboBox NumberOfMultDatedTipsProteinEvolverABC_Here = (JComboBox) e.getSource();
					String seletedNumberOfMultDatedTipsProteinEvolverABC_Here = (String) NumberOfMultDatedTipsProteinEvolverABC_Here.getSelectedItem();
								
					TextNumberOfMultDatedTipsProteinEvolverABC.setText(seletedNumberOfMultDatedTipsProteinEvolverABC_Here); 

					int Here_the_value_DatedTips = 0;
					Here_the_value_DatedTips = Integer.parseInt(seletedNumberOfMultDatedTipsProteinEvolverABC_Here);
					
					labelXXd3.setVisible(false);
					TextMultDatedTips_Reg1_3.setVisible(false);
					TextMultDatedTips_Reg2_3.setVisible(false);
					TextMultDatedTipsProteinEvolverABC_3.setVisible(false);
					
	       			labelXXd4.setVisible(false);
					TextMultDatedTips_Reg1_4.setVisible(false);
					TextMultDatedTips_Reg2_4.setVisible(false);
					TextMultDatedTipsProteinEvolverABC_4.setVisible(false);
	
	       			labelXXd5.setVisible(false);
					TextMultDatedTips_Reg1_5.setVisible(false);
					TextMultDatedTips_Reg2_5.setVisible(false);
					TextMultDatedTipsProteinEvolverABC_5.setVisible(false);
	
	       			labelXXd6.setVisible(false);
					TextMultDatedTips_Reg1_6.setVisible(false);
					TextMultDatedTips_Reg2_6.setVisible(false);
					TextMultDatedTipsProteinEvolverABC_6.setVisible(false);
	
	       			labelXXd7.setVisible(false);
					TextMultDatedTips_Reg1_7.setVisible(false);
					TextMultDatedTips_Reg2_7.setVisible(false);
					TextMultDatedTipsProteinEvolverABC_7.setVisible(false);
	
	       			labelXXd8.setVisible(false);
					TextMultDatedTips_Reg1_8.setVisible(false);
					TextMultDatedTips_Reg2_8.setVisible(false);
					TextMultDatedTipsProteinEvolverABC_8.setVisible(false);
	
	       			labelXXd9.setVisible(false);
					TextMultDatedTips_Reg1_9.setVisible(false);
					TextMultDatedTips_Reg2_9.setVisible(false);
					TextMultDatedTipsProteinEvolverABC_9.setVisible(false);
	
	       			labelXXd10.setVisible(false);
					TextMultDatedTips_Reg1_10.setVisible(false);
					TextMultDatedTips_Reg2_10.setVisible(false);
					TextMultDatedTipsProteinEvolverABC_10.setVisible(false);
				
					TextMultDatedTips_Reg1_3.setText("");
					TextMultDatedTips_Reg2_3.setText("");
					TextMultDatedTipsProteinEvolverABC_3.setText("");
					TextMultDatedTips_Reg1_4.setText("");
					TextMultDatedTips_Reg2_4.setText("");
					TextMultDatedTipsProteinEvolverABC_4.setText("");
					TextMultDatedTips_Reg1_5.setText("");
					TextMultDatedTips_Reg2_5.setText("");
					TextMultDatedTipsProteinEvolverABC_5.setText("");
					TextMultDatedTips_Reg1_6.setText("");
					TextMultDatedTips_Reg2_6.setText("");
					TextMultDatedTipsProteinEvolverABC_6.setText("");
					TextMultDatedTips_Reg1_7.setText("");
					TextMultDatedTips_Reg2_7.setText("");
					TextMultDatedTipsProteinEvolverABC_7.setText("");
					TextMultDatedTips_Reg1_8.setText("");
					TextMultDatedTips_Reg2_8.setText("");
					TextMultDatedTipsProteinEvolverABC_8.setText("");
					TextMultDatedTips_Reg1_9.setText("");
					TextMultDatedTips_Reg2_9.setText("");
					TextMultDatedTipsProteinEvolverABC_9.setText("");
					TextMultDatedTips_Reg1_10.setText("");
					TextMultDatedTips_Reg2_10.setText("");
					TextMultDatedTipsProteinEvolverABC_10.setText("");
					
				
					if (Here_the_value_DatedTips >= 3) 
						{
						labelXXd3.setVisible(true);
						TextMultDatedTips_Reg1_3.setVisible(true);
						TextMultDatedTips_Reg1_3.setText("9");
						TextMultDatedTips_Reg2_3.setVisible(true);
						TextMultDatedTips_Reg2_3.setText("9");
						TextMultDatedTipsProteinEvolverABC_3.setVisible(true);
						TextMultDatedTipsProteinEvolverABC_3.setText("1997");
						}
					if (Here_the_value_DatedTips >= 4) 
						{
						labelXXd4.setVisible(true);
						TextMultDatedTips_Reg1_4.setVisible(true);
						TextMultDatedTips_Reg1_4.setText("10");
						TextMultDatedTips_Reg2_4.setVisible(true);
						TextMultDatedTips_Reg2_4.setText("12");
						TextMultDatedTipsProteinEvolverABC_4.setVisible(true);
						TextMultDatedTipsProteinEvolverABC_4.setText("2008");
						}
					if (Here_the_value_DatedTips >= 5) 
						{
						labelXXd5.setVisible(true);
						TextMultDatedTips_Reg1_5.setVisible(true);
						TextMultDatedTips_Reg1_5.setText("13");
						TextMultDatedTips_Reg2_5.setVisible(true);
						TextMultDatedTips_Reg2_5.setText("13");
						TextMultDatedTipsProteinEvolverABC_5.setVisible(true);
						TextMultDatedTipsProteinEvolverABC_5.setText("2007");
						}
					if (Here_the_value_DatedTips >= 6) 
						{
						labelXXd6.setVisible(true);
						TextMultDatedTips_Reg1_6.setVisible(true);
						TextMultDatedTips_Reg1_6.setText("14");
						TextMultDatedTips_Reg2_6.setVisible(true);
						TextMultDatedTips_Reg2_6.setText("17");
						TextMultDatedTipsProteinEvolverABC_6.setVisible(true);
						TextMultDatedTipsProteinEvolverABC_6.setText("1999");
						}
					if (Here_the_value_DatedTips >= 7) 
						{
						labelXXd7.setVisible(true);
						TextMultDatedTips_Reg1_7.setVisible(true);
						TextMultDatedTips_Reg1_7.setText("18");
						TextMultDatedTips_Reg2_7.setVisible(true);
						TextMultDatedTips_Reg2_7.setText("19");
						TextMultDatedTipsProteinEvolverABC_7.setVisible(true);
						TextMultDatedTipsProteinEvolverABC_7.setText("2002");
						}
					if (Here_the_value_DatedTips >= 8) 
						{
						labelXXd8.setVisible(true);
						TextMultDatedTips_Reg1_8.setVisible(true);
						TextMultDatedTips_Reg1_8.setText("20");
						TextMultDatedTips_Reg2_8.setVisible(true);
						TextMultDatedTips_Reg2_8.setText("22");
						TextMultDatedTipsProteinEvolverABC_8.setVisible(true);
						TextMultDatedTipsProteinEvolverABC_8.setText("2010");
						}
					if (Here_the_value_DatedTips >= 9) 
						{
						labelXXd9.setVisible(true);
						TextMultDatedTips_Reg1_9.setVisible(true);
						TextMultDatedTips_Reg1_9.setText("23");
						TextMultDatedTips_Reg2_9.setVisible(true);
						TextMultDatedTips_Reg2_9.setText("23");
						TextMultDatedTipsProteinEvolverABC_9.setVisible(true);
						TextMultDatedTipsProteinEvolverABC_9.setText("2012");
						}
					if (Here_the_value_DatedTips >= 10) 
						{
						labelXXd10.setVisible(true);
						TextMultDatedTips_Reg1_10.setVisible(true);
						TextMultDatedTips_Reg1_10.setText("24");
						TextMultDatedTips_Reg2_10.setVisible(true);
						TextMultDatedTips_Reg2_10.setText("25");
						TextMultDatedTipsProteinEvolverABC_10.setVisible(true);
						TextMultDatedTipsProteinEvolverABC_10.setText("2014");
						}							
					}
					});
			
			
				//This creates a new button 
       			ButtonNextFrameMultDatedTips_SaveNext.setSize(70, 70); // long, high
				runMultDatedTipsSaveNextHandler = new runButtonMultDatedTipsSaveNextHandler();
				ButtonNextFrameMultDatedTips_SaveNext.addActionListener(runMultDatedTipsSaveNextHandler);
        		ButtonNextFrameMultDatedTips_SaveNext.setVisible(true); 
       			MultDatedTipsWindow.add(ButtonNextFrameMultDatedTips_SaveNext);

				JLabel labelXE = new JLabel();
       			labelXE.setText(" ");
      			MultDatedTipsWindow.add(labelXE);
				JLabel labelXq = new JLabel();
       			labelXq.setText(" ");
      			MultDatedTipsWindow.add(labelXq);

				//This creates a new button 
       			ButtonNextFrameMultDatedTips_Back.setSize(70, 70); // long, high
				runMultDatedTipsExitHandler = new runButtonMultDatedTipsExitHandler();
				ButtonNextFrameMultDatedTips_Back.addActionListener(runMultDatedTipsExitHandler);
        		ButtonNextFrameMultDatedTips_Back.setVisible(true); 
       			MultDatedTipsWindow.add(ButtonNextFrameMultDatedTips_Back);
				}

			}
		});


       	label4h.setText("Generation time: ");
		label4h.setLocation(450, 170); // right, down
        label4h.setSize(180, 30); // long, high
      	panel4.add(label4h);
		
		GenTimeProteinEvolverABC_group.add(GenTimeProteinEvolverABC_No);
		GenTimeProteinEvolverABC_group.add(GenTimeProteinEvolverABC_Yes);
		GenTimeProteinEvolverABC_No.setSelected(true);
		GenTimeProteinEvolverABC_No.setLocation(580, 170); // right, down
		GenTimeProteinEvolverABC_No.setSize(60, 30); // long, high
		GenTimeProteinEvolverABC_Yes.setLocation(650, 170); // right, down
		GenTimeProteinEvolverABC_Yes.setSize(60, 30); // long, high
		panel4.add(GenTimeProteinEvolverABC_No);
		panel4.add(GenTimeProteinEvolverABC_Yes);
		GenTimeProteinEvolverABC_No.setVisible(false);
		GenTimeProteinEvolverABC_Yes.setVisible(false);
		

		GenTimeProteinEvolverABC.setLocation(730, 170); // right, down
        GenTimeProteinEvolverABC.setSize(100, 30); // long, high
		panel4.add(GenTimeProteinEvolverABC);
		GenTimeProteinEvolverABC.setVisible(false); // default

		GenTimeProteinEvolverABC.setSelectedItem("fix"); // default
		TextFixInteger_GenTime.setText("1000"); // default
		FixInt_Window_GenTime.setVisible(false); // default
		FixInt_Window_GenTime.dispose(); // default
		TextGenTimeProteinEvolverABC.setText("fix 1000"); // default
		Textunif1Integer_GenTime.setText("500"); // default
		Textunif2Integer_GenTime.setText("1000"); // default

		GenTimeProteinEvolverABC_No.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			TextGenTimeProteinEvolverABC.setVisible(false);
			TextGenTimeProteinEvolverABC.setText("");
			GenTimeProteinEvolverABC.setVisible(false);

			TextGenTimeProteinEvolverABC_int = 0;
			}
		});
		GenTimeProteinEvolverABC_Yes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			TextGenTimeProteinEvolverABC.setVisible(true);
			TextGenTimeProteinEvolverABC.setText("fix 1000");
			GenTimeProteinEvolverABC.setVisible(true);
			
			TextGenTimeProteinEvolverABC_int = 1;
			}
		});
		

		TextGenTimeProteinEvolverABC.setLocation(845, 170); // right, down
        TextGenTimeProteinEvolverABC.setSize(180, 30); // long, high
        panel4.add(TextGenTimeProteinEvolverABC);
        TextGenTimeProteinEvolverABC.setVisible(false);
		TextGenTimeProteinEvolverABC.setText("fix 1200");
		TextGenTimeProteinEvolverABC.setFont(PLAINAtt);
		TextGenTimeProteinEvolverABC.setForeground(Color.darkGray);


		GenTimeProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				JComboBox KindOf = (JComboBox) e.getSource();
				String seletedKindOf = (String) KindOf.getSelectedItem();

				/*if (seletedKindOf == "no") 
					{
					FixInt_Window_GenTime.setVisible(false);
					unifInt_Window_GenTime.setVisible(false);
					OutputDistribution_GenTime = "";
					TextGenTimeProteinEvolverABC.setText(OutputDistribution_GenTime); 
        			} // end no*/

				if (seletedKindOf == "fix")
					{
					FirstTimeFixInt_Window_GenTime++;
					FixInt_Window_GenTime.setVisible( true );
									
					if (FirstTimeFixInt_Window_GenTime == 1)
						{
						FixInt_Window_GenTime.setTitle( "Fix (integer)" );
						FixInt_Window_GenTime.setSize(400, 300);
						FixInt_Window_GenTime.setLayout( new GridLayout( 3, 2 ) ); // 15 rows, 2 columns
						FixInt_Window_GenTime.setBackground(Color.white);
						FixInt_Window_GenTime.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				FixInt_Window_GenTime.setLocationRelativeTo(null);

						JLabel labelX1 = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1.setText("Value (integer) e.g., 1200");
						//labelX1.setLocation(30, 130); // right, down
        				//labelX1.setSize(300, 30); // long, high
      					FixInt_Window_GenTime.add(labelX1);
	
						FixInt_Window_GenTime.add(TextFixInteger_GenTime);	
					
						JLabel labelXB = new JLabel();
       					labelXB.setText(" ");
      					FixInt_Window_GenTime.add(labelXB);
						JLabel labelXC = new JLabel();
       					labelXC.setText(" ");
      					FixInt_Window_GenTime.add(labelXC);
				

						//This creates a new button 
       					ButtonNext_FixInt_Window_Next_GenTime.setSize(70, 70); // long, high
       	 				ButtonNext_FixInt_Window_Next_GenTime.setVisible(true); 
       					FixInt_Window_GenTime.add(ButtonNext_FixInt_Window_Next_GenTime);

						//This creates a new button 
    	   				ButtonNext_FixInt_Window_Handler_Back_GenTime.setSize(70, 70); // long, high
       	 				ButtonNext_FixInt_Window_Handler_Back_GenTime.setVisible(true); 
       					FixInt_Window_GenTime.add(ButtonNext_FixInt_Window_Handler_Back_GenTime);
						}
        			} // end fix

				if (seletedKindOf == "uniform")
					{
					
					FirstTimeunifInt_Window_GenTime++;
					unifInt_Window_GenTime.setVisible( true );
									
					if (FirstTimeunifInt_Window_GenTime == 1)
						{
						unifInt_Window_GenTime.setTitle( "uniform (integer) distribution" );
						unifInt_Window_GenTime.setSize(500, 300);
						unifInt_Window_GenTime.setLayout( new GridLayout( 4, 2 ) ); // 15 rows, 2 columns
						unifInt_Window_GenTime.setBackground(Color.white);
						unifInt_Window_GenTime.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				unifInt_Window_GenTime.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1b.setText("Minimum value (integer) e.g., 500");
      					unifInt_Window_GenTime.add(labelX1b);
	
						unifInt_Window_GenTime.add(Textunif1Integer_GenTime);	
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText("Maximum value (integer) e.g., 1500");
      					unifInt_Window_GenTime.add(labelX1c);
	
						unifInt_Window_GenTime.add(Textunif2Integer_GenTime);	
						
						JLabel labelXBc = new JLabel();
       					labelXBc.setText(" ");
      					unifInt_Window_GenTime.add(labelXBc);
						JLabel labelXCc = new JLabel();
    	   				labelXCc.setText(" ");
      					unifInt_Window_GenTime.add(labelXCc);
					
	
						//This creates a new button 
    	   				ButtonNext_unifInt_Window_Next_GenTime.setSize(70, 70); // long, high
        				ButtonNext_unifInt_Window_Next_GenTime.setVisible(true); 
       					unifInt_Window_GenTime.add(ButtonNext_unifInt_Window_Next_GenTime);
	
						//This creates a new button 
       					ButtonNext_unifInt_Window_Handler_Back_GenTime.setSize(70, 70); // long, high
        				ButtonNext_unifInt_Window_Handler_Back_GenTime.setVisible(true); 
       					unifInt_Window_GenTime.add(ButtonNext_unifInt_Window_Handler_Back_GenTime);
						}
        			} // end unif

				TextGenTimeProteinEvolverABC.setText(OutputDistribution_GenTime); 
				}
			});

		// Fix (integer) - exit NOT saving
		ButtonNext_FixInt_Window_Handler_Back_GenTime.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_GenTime = "";
				System.out.println("OutputDistribution_GenTime: " + OutputDistribution_GenTime);
			
				FixInt_Window_GenTime.setVisible(false);
				FixInt_Window_GenTime.dispose();

				TextGenTimeProteinEvolverABC.setText(OutputDistribution_GenTime); 
				}
			});

		// Fix (integer) - exit saving
		ButtonNext_FixInt_Window_Next_GenTime.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
			OutputDistribution_GenTime = "";
			Ipar1 = -1;
			Spar1 = "";

			Spar1 = TextFixInteger_GenTime.getText(); //String Spar1 = "23";
			if (Spar1.trim().length() == 0) // check empty
				{
				System.out.println("An integer number should be specified");
				JOptionPane.showMessageDialog(null, "An integer number should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
				// System.exit(0);
				Error = Error + 1;
				}
			if (Error == 0)
				{
				for (int i=0; i < Spar1.length(); i++) // check integer
    				{
        			char c = Spar1.charAt(i);
        			if (c >= '0' && c <= '9')
        				{
            			; // ok
        				}
					else
						{
						System.out.println("Incorrect integer number: " + Spar1);
						JOptionPane.showMessageDialog(null, "Incorrect integer number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
						// System.exit(0);
						Error = Error + 1;
						}
					}
				}
			if (Error == 0)
				{
				Ipar1 = Integer.parseInt(Spar1);
				if ((Ipar1 < 1 || Ipar1 > 100000000 || Spar1.trim().length() == 0) && (Error == 0))
					{
					System.out.println("The value is out of range: " + Ipar1);
					JOptionPane.showMessageDialog(null, "The value is out of range: " + Ipar1, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}

				if (Error == 0) // Ok
					{
					OutputDistribution_GenTime = "fix " + Spar1;
					System.out.println("OutputDistribution_GenTime: " + OutputDistribution_GenTime);
					FixInt_Window_GenTime.setVisible(false);
					FixInt_Window_GenTime.dispose();

					TextGenTimeProteinEvolverABC.setText(OutputDistribution_GenTime); 
					}
				
						

				}
				}
			});		

		// unif (interger) - exit NOT saving
		ButtonNext_unifInt_Window_Handler_Back_GenTime.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_GenTime = "";
				System.out.println("OutputDistribution_GenTime: " + OutputDistribution_GenTime);
				unifInt_Window_GenTime.setVisible(false);
				unifInt_Window_GenTime.dispose();

				TextGenTimeProteinEvolverABC.setText(OutputDistribution_GenTime); 
				}
			});
	
	// unif (integer) - exit saving
		ButtonNext_unifInt_Window_Next_GenTime.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
			Error = 0;
			OutputDistribution_GenTime = "";
			Ipar1 = -1;
			Spar1 = "";
			Ipar2 = -1;
			Spar2 = "";

			Spar1 = Textunif1Integer_GenTime.getText(); //String Spar1 = "23";
			Spar2 = Textunif2Integer_GenTime.getText(); //String Spar2 = "23";
			if (Spar1.trim().length() == 0 || Spar2.trim().length() == 0) // check empty
				{
				System.out.println("Integer numbers should be specified");
				JOptionPane.showMessageDialog(null, "Integer numbers should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
				// System.exit(0);
				Error = Error + 1;
				}
			if (Error == 0)
				{
				for (int i=0; i < Spar1.length(); i++) // check integer
    				{
        			char c = Spar1.charAt(i);
        			if (c >= '0' && c <= '9')
        				{
            			; // ok
        				}
					else
						{
						System.out.println("Incorrect integer number (minimum): " + Spar1);
						JOptionPane.showMessageDialog(null, "Incorrect integer number (minimum): " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
						// System.exit(0);
						Error = Error + 1;
						}
					}
				for (int i=0; i < Spar2.length(); i++) // check integer
    				{
        			char d = Spar2.charAt(i);
        			if (d >= '0' && d <= '9')
        				{
            			; // ok
        				}
					else
						{
						System.out.println("Incorrect integer number (maximum): " + Spar2);
						JOptionPane.showMessageDialog(null, "Incorrect integer number (maximum): " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
						// System.exit(0);
						Error = Error + 1;
						}
					}
				}
			if (Error == 0)
				{
				Ipar1 = Integer.parseInt(Spar1);
				if ((Ipar1 < 1 || Ipar1 > 100000000 || Spar1.trim().length() == 0) && (Error == 0))
					{
					System.out.println("The value (minimum) is out of range: " + Ipar1);
					JOptionPane.showMessageDialog(null, "The value (minimum) is out of range: " + Ipar1, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				
				Ipar2 = Integer.parseInt(Spar2);
				if ((Ipar2 < 1 || Ipar2 > 100000000 || Spar2.trim().length() == 0) && (Error == 0))
					{
					System.out.println("The value (maximum) is out of range: " + Ipar2);
					JOptionPane.showMessageDialog(null, "The value (maximum) is out of range: " + Ipar2, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}

				}

			if (Ipar1 > Ipar2 && Error == 0)
				{
				System.out.println("The minimum value should not be higher than the maximum value");
				JOptionPane.showMessageDialog(null, "The minimum value should not be higher than the maximum value", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}

			if (Error == 0)
				{
				OutputDistribution_GenTime = "uniform " + Spar1 + " " + Spar2;
				System.out.println("OutputDistribution_GenTime: " + OutputDistribution_GenTime);
				unifInt_Window_GenTime.setVisible(false);
				unifInt_Window_GenTime.dispose();

				TextGenTimeProteinEvolverABC.setText(OutputDistribution_GenTime); 
				}

			}
		});
		/* end fix/unif  */



       	label4line3.setText("________________________ Migration - Demes/Species tree ________________________");
		label4line3.setLocation(450, 220); // right, down
        label4line3.setSize(600, 30); // long, high
//      panel4.add(label4line3);		


       	label4j.setText("Migration model : ");
		label4j.setLocation(450, 250); // right, down
        label4j.setSize(450, 30); // long, high
//     	panel4.add(label4j);

		MigrationModels.setLocation(580, 250); // right, down
        MigrationModels.setSize(160, 30); // long, high
//		panel4.add(MigrationModels);


		/* Multiple user-specified Island model */
		label4eeeIsland.setText("");
		label4eeeIsland.setFont(new Font("Arial", Font.PLAIN, 14));
		label4eeeIsland.setForeground(Color.darkGray);
		label4eeeIsland.setLocation(780, 250); // right, down
        label4eeeIsland.setSize(250, 30); // long, high
      	panel4.add(label4eeeIsland);
		label4eeeIsland.setVisible(false);

		/* Multiple user-specified SteppStone model */
		label4eeeSteppStone.setText("");
		label4eeeSteppStone.setFont(new Font("Arial", Font.PLAIN, 14));
		label4eeeSteppStone.setForeground(Color.darkGray);
		label4eeeSteppStone.setLocation(780, 250); // right, down
        label4eeeSteppStone.setSize(250, 30); // long, high
      	panel4.add(label4eeeSteppStone);
		label4eeeSteppStone.setVisible(false);

		/* Multiple user-specified ContIsland model */
		label4eeeContIsland.setText("");
		label4eeeContIsland.setFont(new Font("Arial", Font.PLAIN, 14));
		label4eeeContIsland.setForeground(Color.darkGray);
		label4eeeContIsland.setLocation(780, 250); // right, down
        label4eeeContIsland.setSize(250, 30); // long, high
      	panel4.add(label4eeeContIsland);
		label4eeeContIsland.setVisible(false);
			

		//String[] MigrationModelsOptions = {"No", "island", "stepping-stone", "island-continent"};		
		MigrationModels.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JComboBox MigrationModelsSelected = (JComboBox) e.getSource();
				String seletedMigrationModels = (String) MigrationModelsSelected.getSelectedItem();
				if (seletedMigrationModels == "No") 
					{
					ProteinEvolverABC_IslandModel = "#MigrationModel=1 4 12 10 3 4";
					ProteinEvolverABC_SteppStoneModel = "#MigrationModel=2 4 12 10 3 4";
 					ProteinEvolverABC_ContIslandModel = "#MigrationModel=3 4 12 10 3 4";
					label4eeeIsland.setVisible(false);
					label4eeeIsland.setText("");
					label4eeeSteppStone.setVisible(false);
					label4eeeSteppStone.setText("");
					label4eeeContIsland.setVisible(false);
					label4eeeContIsland.setText("");

					label4l.setVisible(false);
					MigrationRate_Cte.setVisible(false);
					MigrationRate_Var.setVisible(false);
					TextMigrationRateProteinEvolverABC.setVisible(false);
					TextMigrationRateProteinEvolverABC.setText("");
					MigrationRate_Cte.setSelected(true);
					label4eeeSD.setVisible(false);
					ProteinEvolverABC_MigrationRate = "#MigrationRate=1 0.005";
					label4ll.setVisible(false);
					ConvergenceDemesProteinEvolverABC_No.setSelected(true);
					ConvergenceDemesProteinEvolverABC_No.setVisible(false);
					ConvergenceDemesProteinEvolverABC_Yes.setVisible(false);
					NumberOfDemes = 0;
        			}
				if (seletedMigrationModels == "island") 
					{
					ProteinEvolverABC_IslandModel = "#MigrationModel=1 4 12 10 3 4";
					ProteinEvolverABC_SteppStoneModel = "#MigrationModel=2 4 12 10 3 4";
 					ProteinEvolverABC_ContIslandModel = "#MigrationModel=3 4 12 10 3 4";
					label4eeeIsland.setVisible(false);
					label4eeeIsland.setText("");
					label4eeeSteppStone.setVisible(false);
					label4eeeSteppStone.setText("");
					label4eeeContIsland.setVisible(false);
					label4eeeContIsland.setText("");

					
					label4eeeIsland.setText("");
					label4eeeIsland.setVisible(false); // not saved
					
					OneIsland_int = 1;				
					FirstTimeMultIslandWindow = FirstTimeMultIslandWindow + 1;
					MultIslandWindow.setVisible( true );

			
					if (FirstTimeMultIslandWindow == 1)
						{
						MultIslandWindow.setTitle( "Migration under the Island model" );
						MultIslandWindow.setSize(500, 1000);
						MultIslandWindow.setLayout( new GridLayout( 25, 2 ) ); // 16 rows, 4 columns
						MultIslandWindow.setBackground(Color.white);
						MultIslandWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      			  		MultIslandWindow.setLocationRelativeTo(null);
				
						JLabel labelX1 = new JLabel();
						labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1.setText("Migration Island model");
   			   			MultIslandWindow.add(labelX1);

						JLabel labelX1b = new JLabel();
						labelX1b.setFont(new Font("Arial", Font.BOLD, 14));
      		 			labelX1b.setText(" ");
     		 			MultIslandWindow.add(labelX1b);
				
				
						JLabel labelX2 = new JLabel();
      		 			labelX2.setText("Number of demes ");
      					MultIslandWindow.add(labelX2);

						MultIslandWindow.add(NumberOfMultIslandProteinEvolverABC_);
				
				
						JLabel labelX3a = new JLabel();
       					labelX3a.setText("Deme number ");
      					MultIslandWindow.add(labelX3a);
				
						JLabel labelX3 = new JLabel();
       					labelX3.setText("Deme sample size");
      					MultIslandWindow.add(labelX3);


  		     			labelXZIslandd1.setText("1");
     		 			MultIslandWindow.add(labelXZIslandd1);
						MultIslandWindow.add(TextMultIsland_Reg1_1);
       					TextMultIsland_Reg1_1.setText("2");

		       			labelXZIslandd2.setText("2");
     		 			MultIslandWindow.add(labelXZIslandd2);
						MultIslandWindow.add(TextMultIsland_Reg1_2);
      		 			TextMultIsland_Reg1_2.setText("3");

		       			labelXZIslandd3.setText("3");
     		 			MultIslandWindow.add(labelXZIslandd3);
						MultIslandWindow.add(TextMultIsland_Reg1_3);
						TextMultIsland_Reg1_3.setText("1");

       					labelXZIslandd4.setText("4");
      					MultIslandWindow.add(labelXZIslandd4);
						MultIslandWindow.add(TextMultIsland_Reg1_4);
						TextMultIsland_Reg1_4.setText("2");

       					labelXZIslandd5.setText("5");
     		 			MultIslandWindow.add(labelXZIslandd5);
						MultIslandWindow.add(TextMultIsland_Reg1_5);
						
       					labelXZIslandd6.setText("6");
     		 			MultIslandWindow.add(labelXZIslandd6);
						MultIslandWindow.add(TextMultIsland_Reg1_6);
				
       					labelXZIslandd7.setText("7");
     		 			MultIslandWindow.add(labelXZIslandd7);
						MultIslandWindow.add(TextMultIsland_Reg1_7);
				
   		    			labelXZIslandd8.setText("8");
     		 			MultIslandWindow.add(labelXZIslandd8);
						MultIslandWindow.add(TextMultIsland_Reg1_8);
				
       					labelXZIslandd9.setText("9");
      					MultIslandWindow.add(labelXZIslandd9);
						MultIslandWindow.add(TextMultIsland_Reg1_9);
				
      		 			labelXZIslandd10.setText("10");
     		 			MultIslandWindow.add(labelXZIslandd10);
						MultIslandWindow.add(TextMultIsland_Reg1_10);

						labelXZIslandd11.setText("11");
     		 			MultIslandWindow.add(labelXZIslandd11);
						MultIslandWindow.add(TextMultIsland_Reg1_11);

		       			labelXZIslandd12.setText("12");
     		 			MultIslandWindow.add(labelXZIslandd12);
						MultIslandWindow.add(TextMultIsland_Reg1_12);

		       			labelXZIslandd13.setText("13");
     		 			MultIslandWindow.add(labelXZIslandd13);
						MultIslandWindow.add(TextMultIsland_Reg1_13);

       					labelXZIslandd14.setText("14");
      					MultIslandWindow.add(labelXZIslandd14);
						MultIslandWindow.add(TextMultIsland_Reg1_14);
						
       					labelXZIslandd15.setText("15");
     		 			MultIslandWindow.add(labelXZIslandd15);
						MultIslandWindow.add(TextMultIsland_Reg1_15);
						
       					labelXZIslandd16.setText("16");
     		 			MultIslandWindow.add(labelXZIslandd16);
						MultIslandWindow.add(TextMultIsland_Reg1_16);
				
       					labelXZIslandd17.setText("17");
     		 			MultIslandWindow.add(labelXZIslandd17);
						MultIslandWindow.add(TextMultIsland_Reg1_17);
				
   		    			labelXZIslandd18.setText("18");
     		 			MultIslandWindow.add(labelXZIslandd18);
						MultIslandWindow.add(TextMultIsland_Reg1_18);
				
       					labelXZIslandd19.setText("19");
      					MultIslandWindow.add(labelXZIslandd19);
						MultIslandWindow.add(TextMultIsland_Reg1_19);
				
      		 			labelXZIslandd20.setText("20");
     		 			MultIslandWindow.add(labelXZIslandd20);
						MultIslandWindow.add(TextMultIsland_Reg1_20);
				
				
						JLabel labelXA = new JLabel();
       					labelXA.setText(" ");
      					MultIslandWindow.add(labelXA);
				
						JLabel labelXB = new JLabel();
       					labelXB.setText(" ");
      					MultIslandWindow.add(labelXB);
						
				
						// default
       					labelXZIslandd5.setVisible(false);
						TextMultIsland_Reg1_5.setVisible(false);

       					labelXZIslandd6.setVisible(false);
						TextMultIsland_Reg1_6.setVisible(false);

       					labelXZIslandd7.setVisible(false);
						TextMultIsland_Reg1_7.setVisible(false);

       					labelXZIslandd8.setVisible(false);
						TextMultIsland_Reg1_8.setVisible(false);

       					labelXZIslandd9.setVisible(false);
						TextMultIsland_Reg1_9.setVisible(false);

       					labelXZIslandd10.setVisible(false);
						TextMultIsland_Reg1_10.setVisible(false);

						labelXZIslandd11.setVisible(false);
						TextMultIsland_Reg1_11.setVisible(false);

      		 			labelXZIslandd12.setVisible(false);
						TextMultIsland_Reg1_12.setVisible(false);

						labelXZIslandd13.setVisible(false);
						TextMultIsland_Reg1_13.setVisible(false);

      		 			labelXZIslandd14.setVisible(false);
						TextMultIsland_Reg1_14.setVisible(false);

       					labelXZIslandd15.setVisible(false);
						TextMultIsland_Reg1_15.setVisible(false);

       					labelXZIslandd16.setVisible(false);
						TextMultIsland_Reg1_16.setVisible(false);

       					labelXZIslandd17.setVisible(false);
						TextMultIsland_Reg1_17.setVisible(false);

       					labelXZIslandd18.setVisible(false);
						TextMultIsland_Reg1_18.setVisible(false);

       					labelXZIslandd19.setVisible(false);
						TextMultIsland_Reg1_19.setVisible(false);

       					labelXZIslandd20.setVisible(false);
						TextMultIsland_Reg1_20.setVisible(false);
						
						TextNumberOfMultIslandProteinEvolverABC.setText("4");
						NumberOfMultIslandProteinEvolverABC_.setSelectedItem("4");
				
						NumberOfMultIslandProteinEvolverABC_.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox NumberOfMultIslandProteinEvolverABC_Here = (JComboBox) e.getSource();
							String seletedNumberOfMultIslandProteinEvolverABC_Here = (String) NumberOfMultIslandProteinEvolverABC_Here.getSelectedItem();
								
							TextNumberOfMultIslandProteinEvolverABC.setText(seletedNumberOfMultIslandProteinEvolverABC_Here); 

							int Here_the_value_Island = 0;
							Here_the_value_Island = Integer.parseInt(seletedNumberOfMultIslandProteinEvolverABC_Here);
					
							labelXZIslandd3.setVisible(false);
							TextMultIsland_Reg1_3.setVisible(false);
					
	 		      			labelXZIslandd4.setVisible(false);
							TextMultIsland_Reg1_4.setVisible(false);
	
	    		   			labelXZIslandd5.setVisible(false);
							TextMultIsland_Reg1_5.setVisible(false);
	
	       					labelXZIslandd6.setVisible(false);
							TextMultIsland_Reg1_6.setVisible(false);
	
	       					labelXZIslandd7.setVisible(false);
							TextMultIsland_Reg1_7.setVisible(false);
	
	       					labelXZIslandd8.setVisible(false);
							TextMultIsland_Reg1_8.setVisible(false);
	
	       					labelXZIslandd9.setVisible(false);
							TextMultIsland_Reg1_9.setVisible(false);
	
	       					labelXZIslandd10.setVisible(false);
							TextMultIsland_Reg1_10.setVisible(false);

							labelXZIslandd11.setVisible(false);
							TextMultIsland_Reg1_11.setVisible(false);

							labelXZIslandd12.setVisible(false);
							TextMultIsland_Reg1_12.setVisible(false);
				
							labelXZIslandd13.setVisible(false);
							TextMultIsland_Reg1_13.setVisible(false);
					
	 		      			labelXZIslandd14.setVisible(false);
							TextMultIsland_Reg1_14.setVisible(false);
	
	    		   			labelXZIslandd15.setVisible(false);
							TextMultIsland_Reg1_15.setVisible(false);
	
	       					labelXZIslandd16.setVisible(false);
							TextMultIsland_Reg1_16.setVisible(false);
	
	       					labelXZIslandd17.setVisible(false);
							TextMultIsland_Reg1_17.setVisible(false);
	
	       					labelXZIslandd18.setVisible(false);
							TextMultIsland_Reg1_18.setVisible(false);
	
	       					labelXZIslandd19.setVisible(false);
							TextMultIsland_Reg1_19.setVisible(false);
	
	       					labelXZIslandd20.setVisible(false);
							TextMultIsland_Reg1_20.setVisible(false);

				
							TextMultIsland_Reg1_3.setText("");
							TextMultIsland_Reg1_4.setText("");
							TextMultIsland_Reg1_5.setText("");
							TextMultIsland_Reg1_6.setText("");
							TextMultIsland_Reg1_7.setText("");
							TextMultIsland_Reg1_8.setText("");
							TextMultIsland_Reg1_9.setText("");
							TextMultIsland_Reg1_10.setText("");
							TextMultIsland_Reg1_11.setText("");
							TextMultIsland_Reg1_12.setText("");
							TextMultIsland_Reg1_13.setText("");
							TextMultIsland_Reg1_14.setText("");
							TextMultIsland_Reg1_15.setText("");
							TextMultIsland_Reg1_16.setText("");
							TextMultIsland_Reg1_17.setText("");
							TextMultIsland_Reg1_18.setText("");
							TextMultIsland_Reg1_19.setText("");
							TextMultIsland_Reg1_20.setText("");
					
							if (Here_the_value_Island == 2) 
								{
								labelXZIslandd3.setVisible(false);
								TextMultIsland_Reg1_3.setVisible(false);
					
	 		    	  			labelXZIslandd4.setVisible(false);
								TextMultIsland_Reg1_4.setVisible(false);
	
	    		   				labelXZIslandd5.setVisible(false);
								TextMultIsland_Reg1_5.setVisible(false);
	
	       						labelXZIslandd6.setVisible(false);
								TextMultIsland_Reg1_6.setVisible(false);
	
	   	    					labelXZIslandd7.setVisible(false);
								TextMultIsland_Reg1_7.setVisible(false);
	
	       						labelXZIslandd8.setVisible(false);
								TextMultIsland_Reg1_8.setVisible(false);
	
	       						labelXZIslandd9.setVisible(false);
								TextMultIsland_Reg1_9.setVisible(false);
	
	       						labelXZIslandd10.setVisible(false);
								TextMultIsland_Reg1_10.setVisible(false);

								labelXZIslandd11.setVisible(false);
								TextMultIsland_Reg1_11.setVisible(false);

								labelXZIslandd12.setVisible(false);
								TextMultIsland_Reg1_12.setVisible(false);
				
								labelXZIslandd13.setVisible(false);
								TextMultIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZIslandd14.setVisible(false);
								TextMultIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZIslandd15.setVisible(false);
								TextMultIsland_Reg1_15.setVisible(false);
	
	       						labelXZIslandd16.setVisible(false);
								TextMultIsland_Reg1_16.setVisible(false);
	
	    	   					labelXZIslandd17.setVisible(false);
								TextMultIsland_Reg1_17.setVisible(false);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("");
								TextMultIsland_Reg1_4.setText("");
								TextMultIsland_Reg1_5.setText("");
								TextMultIsland_Reg1_6.setText("");
								TextMultIsland_Reg1_7.setText("");
								TextMultIsland_Reg1_8.setText("");
								TextMultIsland_Reg1_9.setText("");
								TextMultIsland_Reg1_10.setText("");
								TextMultIsland_Reg1_11.setText("");
								TextMultIsland_Reg1_12.setText("");
								TextMultIsland_Reg1_13.setText("");
								TextMultIsland_Reg1_14.setText("");
								TextMultIsland_Reg1_15.setText("");
								TextMultIsland_Reg1_16.setText("");
								TextMultIsland_Reg1_17.setText("");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 3) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(false);
								TextMultIsland_Reg1_4.setVisible(false);
	
	    		   				labelXZIslandd5.setVisible(false);
								TextMultIsland_Reg1_5.setVisible(false);
	
	       						labelXZIslandd6.setVisible(false);
								TextMultIsland_Reg1_6.setVisible(false);
	
	   	    					labelXZIslandd7.setVisible(false);
								TextMultIsland_Reg1_7.setVisible(false);
	
	       						labelXZIslandd8.setVisible(false);
								TextMultIsland_Reg1_8.setVisible(false);
	
	       						labelXZIslandd9.setVisible(false);
								TextMultIsland_Reg1_9.setVisible(false);
	
	       						labelXZIslandd10.setVisible(false);
								TextMultIsland_Reg1_10.setVisible(false);

								labelXZIslandd11.setVisible(false);
								TextMultIsland_Reg1_11.setVisible(false);

								labelXZIslandd12.setVisible(false);
								TextMultIsland_Reg1_12.setVisible(false);
				
								labelXZIslandd13.setVisible(false);
								TextMultIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZIslandd14.setVisible(false);
								TextMultIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZIslandd15.setVisible(false);
								TextMultIsland_Reg1_15.setVisible(false);
	
	       						labelXZIslandd16.setVisible(false);
								TextMultIsland_Reg1_16.setVisible(false);
	
	    	   					labelXZIslandd17.setVisible(false);
								TextMultIsland_Reg1_17.setVisible(false);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("");
								TextMultIsland_Reg1_5.setText("");
								TextMultIsland_Reg1_6.setText("");
								TextMultIsland_Reg1_7.setText("");
								TextMultIsland_Reg1_8.setText("");
								TextMultIsland_Reg1_9.setText("");
								TextMultIsland_Reg1_10.setText("");
								TextMultIsland_Reg1_11.setText("");
								TextMultIsland_Reg1_12.setText("");
								TextMultIsland_Reg1_13.setText("");
								TextMultIsland_Reg1_14.setText("");
								TextMultIsland_Reg1_15.setText("");
								TextMultIsland_Reg1_16.setText("");
								TextMultIsland_Reg1_17.setText("");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 4) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(false);
								TextMultIsland_Reg1_5.setVisible(false);
	
	       						labelXZIslandd6.setVisible(false);
								TextMultIsland_Reg1_6.setVisible(false);
	
	   	    					labelXZIslandd7.setVisible(false);
								TextMultIsland_Reg1_7.setVisible(false);
	
	       						labelXZIslandd8.setVisible(false);
								TextMultIsland_Reg1_8.setVisible(false);
	
	       						labelXZIslandd9.setVisible(false);
								TextMultIsland_Reg1_9.setVisible(false);
	
	       						labelXZIslandd10.setVisible(false);
								TextMultIsland_Reg1_10.setVisible(false);

								labelXZIslandd11.setVisible(false);
								TextMultIsland_Reg1_11.setVisible(false);

								labelXZIslandd12.setVisible(false);
								TextMultIsland_Reg1_12.setVisible(false);
				
								labelXZIslandd13.setVisible(false);
								TextMultIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZIslandd14.setVisible(false);
								TextMultIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZIslandd15.setVisible(false);
								TextMultIsland_Reg1_15.setVisible(false);
	
	       						labelXZIslandd16.setVisible(false);
								TextMultIsland_Reg1_16.setVisible(false);
	
	    	   					labelXZIslandd17.setVisible(false);
								TextMultIsland_Reg1_17.setVisible(false);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("");
								TextMultIsland_Reg1_6.setText("");
								TextMultIsland_Reg1_7.setText("");
								TextMultIsland_Reg1_8.setText("");
								TextMultIsland_Reg1_9.setText("");
								TextMultIsland_Reg1_10.setText("");
								TextMultIsland_Reg1_11.setText("");
								TextMultIsland_Reg1_12.setText("");
								TextMultIsland_Reg1_13.setText("");
								TextMultIsland_Reg1_14.setText("");
								TextMultIsland_Reg1_15.setText("");
								TextMultIsland_Reg1_16.setText("");
								TextMultIsland_Reg1_17.setText("");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 5) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(false);
								TextMultIsland_Reg1_6.setVisible(false);
	
	   	    					labelXZIslandd7.setVisible(false);
								TextMultIsland_Reg1_7.setVisible(false);
	
	       						labelXZIslandd8.setVisible(false);
								TextMultIsland_Reg1_8.setVisible(false);
	
	       						labelXZIslandd9.setVisible(false);
								TextMultIsland_Reg1_9.setVisible(false);
	
	       						labelXZIslandd10.setVisible(false);
								TextMultIsland_Reg1_10.setVisible(false);

								labelXZIslandd11.setVisible(false);
								TextMultIsland_Reg1_11.setVisible(false);

								labelXZIslandd12.setVisible(false);
								TextMultIsland_Reg1_12.setVisible(false);
				
								labelXZIslandd13.setVisible(false);
								TextMultIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZIslandd14.setVisible(false);
								TextMultIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZIslandd15.setVisible(false);
								TextMultIsland_Reg1_15.setVisible(false);
	
	       						labelXZIslandd16.setVisible(false);
								TextMultIsland_Reg1_16.setVisible(false);
	
	    	   					labelXZIslandd17.setVisible(false);
								TextMultIsland_Reg1_17.setVisible(false);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("");
								TextMultIsland_Reg1_7.setText("");
								TextMultIsland_Reg1_8.setText("");
								TextMultIsland_Reg1_9.setText("");
								TextMultIsland_Reg1_10.setText("");
								TextMultIsland_Reg1_11.setText("");
								TextMultIsland_Reg1_12.setText("");
								TextMultIsland_Reg1_13.setText("");
								TextMultIsland_Reg1_14.setText("");
								TextMultIsland_Reg1_15.setText("");
								TextMultIsland_Reg1_16.setText("");
								TextMultIsland_Reg1_17.setText("");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 6) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(true);
								TextMultIsland_Reg1_6.setVisible(true);
	
	   	    					labelXZIslandd7.setVisible(false);
								TextMultIsland_Reg1_7.setVisible(false);
	
	       						labelXZIslandd8.setVisible(false);
								TextMultIsland_Reg1_8.setVisible(false);
	
	       						labelXZIslandd9.setVisible(false);
								TextMultIsland_Reg1_9.setVisible(false);
	
	       						labelXZIslandd10.setVisible(false);
								TextMultIsland_Reg1_10.setVisible(false);

								labelXZIslandd11.setVisible(false);
								TextMultIsland_Reg1_11.setVisible(false);

								labelXZIslandd12.setVisible(false);
								TextMultIsland_Reg1_12.setVisible(false);
				
								labelXZIslandd13.setVisible(false);
								TextMultIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZIslandd14.setVisible(false);
								TextMultIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZIslandd15.setVisible(false);
								TextMultIsland_Reg1_15.setVisible(false);
	
	       						labelXZIslandd16.setVisible(false);
								TextMultIsland_Reg1_16.setVisible(false);
	
	    	   					labelXZIslandd17.setVisible(false);
								TextMultIsland_Reg1_17.setVisible(false);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("2");
								TextMultIsland_Reg1_7.setText("");
								TextMultIsland_Reg1_8.setText("");
								TextMultIsland_Reg1_9.setText("");
								TextMultIsland_Reg1_10.setText("");
								TextMultIsland_Reg1_11.setText("");
								TextMultIsland_Reg1_12.setText("");
								TextMultIsland_Reg1_13.setText("");
								TextMultIsland_Reg1_14.setText("");
								TextMultIsland_Reg1_15.setText("");
								TextMultIsland_Reg1_16.setText("");
								TextMultIsland_Reg1_17.setText("");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 7) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(true);
								TextMultIsland_Reg1_6.setVisible(true);
	
	   	    					labelXZIslandd7.setVisible(true);
								TextMultIsland_Reg1_7.setVisible(true);
	
	       						labelXZIslandd8.setVisible(false);
								TextMultIsland_Reg1_8.setVisible(false);
	
	       						labelXZIslandd9.setVisible(false);
								TextMultIsland_Reg1_9.setVisible(false);
	
	       						labelXZIslandd10.setVisible(false);
								TextMultIsland_Reg1_10.setVisible(false);

								labelXZIslandd11.setVisible(false);
								TextMultIsland_Reg1_11.setVisible(false);

								labelXZIslandd12.setVisible(false);
								TextMultIsland_Reg1_12.setVisible(false);
				
								labelXZIslandd13.setVisible(false);
								TextMultIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZIslandd14.setVisible(false);
								TextMultIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZIslandd15.setVisible(false);
								TextMultIsland_Reg1_15.setVisible(false);
	
	       						labelXZIslandd16.setVisible(false);
								TextMultIsland_Reg1_16.setVisible(false);
	
	    	   					labelXZIslandd17.setVisible(false);
								TextMultIsland_Reg1_17.setVisible(false);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("2");
								TextMultIsland_Reg1_7.setText("1");
								TextMultIsland_Reg1_8.setText("");
								TextMultIsland_Reg1_9.setText("");
								TextMultIsland_Reg1_10.setText("");
								TextMultIsland_Reg1_11.setText("");
								TextMultIsland_Reg1_12.setText("");
								TextMultIsland_Reg1_13.setText("");
								TextMultIsland_Reg1_14.setText("");
								TextMultIsland_Reg1_15.setText("");
								TextMultIsland_Reg1_16.setText("");
								TextMultIsland_Reg1_17.setText("");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 8) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(true);
								TextMultIsland_Reg1_6.setVisible(true);
	
	   	    					labelXZIslandd7.setVisible(true);
								TextMultIsland_Reg1_7.setVisible(true);
	
	       						labelXZIslandd8.setVisible(true);
								TextMultIsland_Reg1_8.setVisible(true);
	
	       						labelXZIslandd9.setVisible(false);
								TextMultIsland_Reg1_9.setVisible(false);
	
	       						labelXZIslandd10.setVisible(false);
								TextMultIsland_Reg1_10.setVisible(false);

								labelXZIslandd11.setVisible(false);
								TextMultIsland_Reg1_11.setVisible(false);

								labelXZIslandd12.setVisible(false);
								TextMultIsland_Reg1_12.setVisible(false);
				
								labelXZIslandd13.setVisible(false);
								TextMultIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZIslandd14.setVisible(false);
								TextMultIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZIslandd15.setVisible(false);
								TextMultIsland_Reg1_15.setVisible(false);
	
	       						labelXZIslandd16.setVisible(false);
								TextMultIsland_Reg1_16.setVisible(false);
	
	    	   					labelXZIslandd17.setVisible(false);
								TextMultIsland_Reg1_17.setVisible(false);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("2");
								TextMultIsland_Reg1_7.setText("1");
								TextMultIsland_Reg1_8.setText("3");
								TextMultIsland_Reg1_9.setText("");
								TextMultIsland_Reg1_10.setText("");
								TextMultIsland_Reg1_11.setText("");
								TextMultIsland_Reg1_12.setText("");
								TextMultIsland_Reg1_13.setText("");
								TextMultIsland_Reg1_14.setText("");
								TextMultIsland_Reg1_15.setText("");
								TextMultIsland_Reg1_16.setText("");
								TextMultIsland_Reg1_17.setText("");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 9) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(true);
								TextMultIsland_Reg1_6.setVisible(true);
	
	   	    					labelXZIslandd7.setVisible(true);
								TextMultIsland_Reg1_7.setVisible(true);
	
	       						labelXZIslandd8.setVisible(true);
								TextMultIsland_Reg1_8.setVisible(true);
	
	       						labelXZIslandd9.setVisible(true);
								TextMultIsland_Reg1_9.setVisible(true);
	
	       						labelXZIslandd10.setVisible(false);
								TextMultIsland_Reg1_10.setVisible(false);

								labelXZIslandd11.setVisible(false);
								TextMultIsland_Reg1_11.setVisible(false);

								labelXZIslandd12.setVisible(false);
								TextMultIsland_Reg1_12.setVisible(false);
				
								labelXZIslandd13.setVisible(false);
								TextMultIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZIslandd14.setVisible(false);
								TextMultIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZIslandd15.setVisible(false);
								TextMultIsland_Reg1_15.setVisible(false);
	
	       						labelXZIslandd16.setVisible(false);
								TextMultIsland_Reg1_16.setVisible(false);
	
	    	   					labelXZIslandd17.setVisible(false);
								TextMultIsland_Reg1_17.setVisible(false);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("2");
								TextMultIsland_Reg1_7.setText("1");
								TextMultIsland_Reg1_8.setText("3");
								TextMultIsland_Reg1_9.setText("2");
								TextMultIsland_Reg1_10.setText("");
								TextMultIsland_Reg1_11.setText("");
								TextMultIsland_Reg1_12.setText("");
								TextMultIsland_Reg1_13.setText("");
								TextMultIsland_Reg1_14.setText("");
								TextMultIsland_Reg1_15.setText("");
								TextMultIsland_Reg1_16.setText("");
								TextMultIsland_Reg1_17.setText("");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 10) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(true);
								TextMultIsland_Reg1_6.setVisible(true);
	
	   	    					labelXZIslandd7.setVisible(true);
								TextMultIsland_Reg1_7.setVisible(true);
	
	       						labelXZIslandd8.setVisible(true);
								TextMultIsland_Reg1_8.setVisible(true);
	
	       						labelXZIslandd9.setVisible(true);
								TextMultIsland_Reg1_9.setVisible(true);
	
	       						labelXZIslandd10.setVisible(true);
								TextMultIsland_Reg1_10.setVisible(true);

								labelXZIslandd11.setVisible(false);
								TextMultIsland_Reg1_11.setVisible(false);

								labelXZIslandd12.setVisible(false);
								TextMultIsland_Reg1_12.setVisible(false);
				
								labelXZIslandd13.setVisible(false);
								TextMultIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZIslandd14.setVisible(false);
								TextMultIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZIslandd15.setVisible(false);
								TextMultIsland_Reg1_15.setVisible(false);
	
	       						labelXZIslandd16.setVisible(false);
								TextMultIsland_Reg1_16.setVisible(false);
	
	    	   					labelXZIslandd17.setVisible(false);
								TextMultIsland_Reg1_17.setVisible(false);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("2");
								TextMultIsland_Reg1_7.setText("1");
								TextMultIsland_Reg1_8.setText("3");
								TextMultIsland_Reg1_9.setText("2");
								TextMultIsland_Reg1_10.setText("2");
								TextMultIsland_Reg1_11.setText("");
								TextMultIsland_Reg1_12.setText("");
								TextMultIsland_Reg1_13.setText("");
								TextMultIsland_Reg1_14.setText("");
								TextMultIsland_Reg1_15.setText("");
								TextMultIsland_Reg1_16.setText("");
								TextMultIsland_Reg1_17.setText("");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}	
							if (Here_the_value_Island == 11) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(true);
								TextMultIsland_Reg1_6.setVisible(true);
	
	   	    					labelXZIslandd7.setVisible(true);
								TextMultIsland_Reg1_7.setVisible(true);
	
	       						labelXZIslandd8.setVisible(true);
								TextMultIsland_Reg1_8.setVisible(true);
	
	       						labelXZIslandd9.setVisible(true);
								TextMultIsland_Reg1_9.setVisible(true);
	
	       						labelXZIslandd10.setVisible(true);
								TextMultIsland_Reg1_10.setVisible(true);

								labelXZIslandd11.setVisible(true);
								TextMultIsland_Reg1_11.setVisible(true);

								labelXZIslandd12.setVisible(false);
								TextMultIsland_Reg1_12.setVisible(false);
				
								labelXZIslandd13.setVisible(false);
								TextMultIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZIslandd14.setVisible(false);
								TextMultIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZIslandd15.setVisible(false);
								TextMultIsland_Reg1_15.setVisible(false);
	
	       						labelXZIslandd16.setVisible(false);
								TextMultIsland_Reg1_16.setVisible(false);
	
	    	   					labelXZIslandd17.setVisible(false);
								TextMultIsland_Reg1_17.setVisible(false);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("2");
								TextMultIsland_Reg1_7.setText("1");
								TextMultIsland_Reg1_8.setText("3");
								TextMultIsland_Reg1_9.setText("2");
								TextMultIsland_Reg1_10.setText("2");
								TextMultIsland_Reg1_11.setText("1");
								TextMultIsland_Reg1_12.setText("");
								TextMultIsland_Reg1_13.setText("");
								TextMultIsland_Reg1_14.setText("");
								TextMultIsland_Reg1_15.setText("");
								TextMultIsland_Reg1_16.setText("");
								TextMultIsland_Reg1_17.setText("");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 12) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(true);
								TextMultIsland_Reg1_6.setVisible(true);
	
	   	    					labelXZIslandd7.setVisible(true);
								TextMultIsland_Reg1_7.setVisible(true);
	
	       						labelXZIslandd8.setVisible(true);
								TextMultIsland_Reg1_8.setVisible(true);
	
	       						labelXZIslandd9.setVisible(true);
								TextMultIsland_Reg1_9.setVisible(true);
	
	       						labelXZIslandd10.setVisible(true);
								TextMultIsland_Reg1_10.setVisible(true);

								labelXZIslandd11.setVisible(true);
								TextMultIsland_Reg1_11.setVisible(true);

								labelXZIslandd12.setVisible(true);
								TextMultIsland_Reg1_12.setVisible(true);
				
								labelXZIslandd13.setVisible(false);
								TextMultIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZIslandd14.setVisible(false);
								TextMultIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZIslandd15.setVisible(false);
								TextMultIsland_Reg1_15.setVisible(false);
	
	       						labelXZIslandd16.setVisible(false);
								TextMultIsland_Reg1_16.setVisible(false);
	
	    	   					labelXZIslandd17.setVisible(false);
								TextMultIsland_Reg1_17.setVisible(false);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("2");
								TextMultIsland_Reg1_7.setText("1");
								TextMultIsland_Reg1_8.setText("3");
								TextMultIsland_Reg1_9.setText("2");
								TextMultIsland_Reg1_10.setText("2");
								TextMultIsland_Reg1_11.setText("1");
								TextMultIsland_Reg1_12.setText("4");
								TextMultIsland_Reg1_13.setText("");
								TextMultIsland_Reg1_14.setText("");
								TextMultIsland_Reg1_15.setText("");
								TextMultIsland_Reg1_16.setText("");
								TextMultIsland_Reg1_17.setText("");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 13) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(true);
								TextMultIsland_Reg1_6.setVisible(true);
	
	   	    					labelXZIslandd7.setVisible(true);
								TextMultIsland_Reg1_7.setVisible(true);
	
	       						labelXZIslandd8.setVisible(true);
								TextMultIsland_Reg1_8.setVisible(true);
	
	       						labelXZIslandd9.setVisible(true);
								TextMultIsland_Reg1_9.setVisible(true);
	
	       						labelXZIslandd10.setVisible(true);
								TextMultIsland_Reg1_10.setVisible(true);

								labelXZIslandd11.setVisible(true);
								TextMultIsland_Reg1_11.setVisible(true);

								labelXZIslandd12.setVisible(true);
								TextMultIsland_Reg1_12.setVisible(true);
				
								labelXZIslandd13.setVisible(true);
								TextMultIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZIslandd14.setVisible(false);
								TextMultIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZIslandd15.setVisible(false);
								TextMultIsland_Reg1_15.setVisible(false);
	
	       						labelXZIslandd16.setVisible(false);
								TextMultIsland_Reg1_16.setVisible(false);
	
	    	   					labelXZIslandd17.setVisible(false);
								TextMultIsland_Reg1_17.setVisible(false);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("2");
								TextMultIsland_Reg1_7.setText("1");
								TextMultIsland_Reg1_8.setText("3");
								TextMultIsland_Reg1_9.setText("2");
								TextMultIsland_Reg1_10.setText("2");
								TextMultIsland_Reg1_11.setText("1");
								TextMultIsland_Reg1_12.setText("4");
								TextMultIsland_Reg1_13.setText("3");
								TextMultIsland_Reg1_14.setText("");
								TextMultIsland_Reg1_15.setText("");
								TextMultIsland_Reg1_16.setText("");
								TextMultIsland_Reg1_17.setText("");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 14) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(true);
								TextMultIsland_Reg1_6.setVisible(true);
	
	   	    					labelXZIslandd7.setVisible(true);
								TextMultIsland_Reg1_7.setVisible(true);
	
	       						labelXZIslandd8.setVisible(true);
								TextMultIsland_Reg1_8.setVisible(true);
	
	       						labelXZIslandd9.setVisible(true);
								TextMultIsland_Reg1_9.setVisible(true);
	
	       						labelXZIslandd10.setVisible(true);
								TextMultIsland_Reg1_10.setVisible(true);

								labelXZIslandd11.setVisible(true);
								TextMultIsland_Reg1_11.setVisible(true);

								labelXZIslandd12.setVisible(true);
								TextMultIsland_Reg1_12.setVisible(true);
				
								labelXZIslandd13.setVisible(true);
								TextMultIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZIslandd14.setVisible(true);
								TextMultIsland_Reg1_14.setVisible(true);
	
	    			   			labelXZIslandd15.setVisible(false);
								TextMultIsland_Reg1_15.setVisible(false);
	
	       						labelXZIslandd16.setVisible(false);
								TextMultIsland_Reg1_16.setVisible(false);
	
	    	   					labelXZIslandd17.setVisible(false);
								TextMultIsland_Reg1_17.setVisible(false);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("2");
								TextMultIsland_Reg1_7.setText("1");
								TextMultIsland_Reg1_8.setText("3");
								TextMultIsland_Reg1_9.setText("2");
								TextMultIsland_Reg1_10.setText("2");
								TextMultIsland_Reg1_11.setText("1");
								TextMultIsland_Reg1_12.setText("4");
								TextMultIsland_Reg1_13.setText("3");
								TextMultIsland_Reg1_14.setText("5");
								TextMultIsland_Reg1_15.setText("");
								TextMultIsland_Reg1_16.setText("");
								TextMultIsland_Reg1_17.setText("");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 15) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(true);
								TextMultIsland_Reg1_6.setVisible(true);
	
	   	    					labelXZIslandd7.setVisible(true);
								TextMultIsland_Reg1_7.setVisible(true);
	
	       						labelXZIslandd8.setVisible(true);
								TextMultIsland_Reg1_8.setVisible(true);
	
	       						labelXZIslandd9.setVisible(true);
								TextMultIsland_Reg1_9.setVisible(true);
	
	       						labelXZIslandd10.setVisible(true);
								TextMultIsland_Reg1_10.setVisible(true);

								labelXZIslandd11.setVisible(true);
								TextMultIsland_Reg1_11.setVisible(true);

								labelXZIslandd12.setVisible(true);
								TextMultIsland_Reg1_12.setVisible(true);
				
								labelXZIslandd13.setVisible(true);
								TextMultIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZIslandd14.setVisible(true);
								TextMultIsland_Reg1_14.setVisible(true);
	
	    			   			labelXZIslandd15.setVisible(true);
								TextMultIsland_Reg1_15.setVisible(true);
	
	       						labelXZIslandd16.setVisible(false);
								TextMultIsland_Reg1_16.setVisible(false);
	
	    	   					labelXZIslandd17.setVisible(false);
								TextMultIsland_Reg1_17.setVisible(false);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("2");
								TextMultIsland_Reg1_7.setText("1");
								TextMultIsland_Reg1_8.setText("3");
								TextMultIsland_Reg1_9.setText("2");
								TextMultIsland_Reg1_10.setText("2");
								TextMultIsland_Reg1_11.setText("1");
								TextMultIsland_Reg1_12.setText("4");
								TextMultIsland_Reg1_13.setText("3");
								TextMultIsland_Reg1_14.setText("5");
								TextMultIsland_Reg1_15.setText("3");
								TextMultIsland_Reg1_16.setText("");
								TextMultIsland_Reg1_17.setText("");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 16) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(true);
								TextMultIsland_Reg1_6.setVisible(true);
	
	   	    					labelXZIslandd7.setVisible(true);
								TextMultIsland_Reg1_7.setVisible(true);
	
	       						labelXZIslandd8.setVisible(true);
								TextMultIsland_Reg1_8.setVisible(true);
	
	       						labelXZIslandd9.setVisible(true);
								TextMultIsland_Reg1_9.setVisible(true);
	
	       						labelXZIslandd10.setVisible(true);
								TextMultIsland_Reg1_10.setVisible(true);

								labelXZIslandd11.setVisible(true);
								TextMultIsland_Reg1_11.setVisible(true);

								labelXZIslandd12.setVisible(true);
								TextMultIsland_Reg1_12.setVisible(true);
				
								labelXZIslandd13.setVisible(true);
								TextMultIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZIslandd14.setVisible(true);
								TextMultIsland_Reg1_14.setVisible(true);
	
	    			   			labelXZIslandd15.setVisible(true);
								TextMultIsland_Reg1_15.setVisible(true);
	
	       						labelXZIslandd16.setVisible(true);
								TextMultIsland_Reg1_16.setVisible(true);
	
	    	   					labelXZIslandd17.setVisible(false);
								TextMultIsland_Reg1_17.setVisible(false);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("2");
								TextMultIsland_Reg1_7.setText("1");
								TextMultIsland_Reg1_8.setText("3");
								TextMultIsland_Reg1_9.setText("2");
								TextMultIsland_Reg1_10.setText("2");
								TextMultIsland_Reg1_11.setText("1");
								TextMultIsland_Reg1_12.setText("4");
								TextMultIsland_Reg1_13.setText("3");
								TextMultIsland_Reg1_14.setText("5");
								TextMultIsland_Reg1_15.setText("3");
								TextMultIsland_Reg1_16.setText("1");
								TextMultIsland_Reg1_17.setText("");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 17) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(true);
								TextMultIsland_Reg1_6.setVisible(true);
	
	   	    					labelXZIslandd7.setVisible(true);
								TextMultIsland_Reg1_7.setVisible(true);
	
	       						labelXZIslandd8.setVisible(true);
								TextMultIsland_Reg1_8.setVisible(true);
	
	       						labelXZIslandd9.setVisible(true);
								TextMultIsland_Reg1_9.setVisible(true);
	
	       						labelXZIslandd10.setVisible(true);
								TextMultIsland_Reg1_10.setVisible(true);

								labelXZIslandd11.setVisible(true);
								TextMultIsland_Reg1_11.setVisible(true);

								labelXZIslandd12.setVisible(true);
								TextMultIsland_Reg1_12.setVisible(true);
				
								labelXZIslandd13.setVisible(true);
								TextMultIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZIslandd14.setVisible(true);
								TextMultIsland_Reg1_14.setVisible(true);
	
	    			   			labelXZIslandd15.setVisible(true);
								TextMultIsland_Reg1_15.setVisible(true);
	
	       						labelXZIslandd16.setVisible(true);
								TextMultIsland_Reg1_16.setVisible(true);
	
	    	   					labelXZIslandd17.setVisible(true);
								TextMultIsland_Reg1_17.setVisible(true);
	
	       						labelXZIslandd18.setVisible(false);
								TextMultIsland_Reg1_18.setVisible(false);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("2");
								TextMultIsland_Reg1_7.setText("1");
								TextMultIsland_Reg1_8.setText("3");
								TextMultIsland_Reg1_9.setText("2");
								TextMultIsland_Reg1_10.setText("2");
								TextMultIsland_Reg1_11.setText("1");
								TextMultIsland_Reg1_12.setText("4");
								TextMultIsland_Reg1_13.setText("3");
								TextMultIsland_Reg1_14.setText("5");
								TextMultIsland_Reg1_15.setText("3");
								TextMultIsland_Reg1_16.setText("1");
								TextMultIsland_Reg1_17.setText("2");
								TextMultIsland_Reg1_18.setText("");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 18) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(true);
								TextMultIsland_Reg1_6.setVisible(true);
	
	   	    					labelXZIslandd7.setVisible(true);
								TextMultIsland_Reg1_7.setVisible(true);
	
	       						labelXZIslandd8.setVisible(true);
								TextMultIsland_Reg1_8.setVisible(true);
	
	       						labelXZIslandd9.setVisible(true);
								TextMultIsland_Reg1_9.setVisible(true);
	
	       						labelXZIslandd10.setVisible(true);
								TextMultIsland_Reg1_10.setVisible(true);

								labelXZIslandd11.setVisible(true);
								TextMultIsland_Reg1_11.setVisible(true);

								labelXZIslandd12.setVisible(true);
								TextMultIsland_Reg1_12.setVisible(true);
				
								labelXZIslandd13.setVisible(true);
								TextMultIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZIslandd14.setVisible(true);
								TextMultIsland_Reg1_14.setVisible(true);
	
	    			   			labelXZIslandd15.setVisible(true);
								TextMultIsland_Reg1_15.setVisible(true);
	
	       						labelXZIslandd16.setVisible(true);
								TextMultIsland_Reg1_16.setVisible(true);
	
	    	   					labelXZIslandd17.setVisible(true);
								TextMultIsland_Reg1_17.setVisible(true);
	
	       						labelXZIslandd18.setVisible(true);
								TextMultIsland_Reg1_18.setVisible(true);
	
	       						labelXZIslandd19.setVisible(false);
								TextMultIsland_Reg1_19.setVisible(false);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("2");
								TextMultIsland_Reg1_7.setText("1");
								TextMultIsland_Reg1_8.setText("3");
								TextMultIsland_Reg1_9.setText("2");
								TextMultIsland_Reg1_10.setText("2");
								TextMultIsland_Reg1_11.setText("1");
								TextMultIsland_Reg1_12.setText("4");
								TextMultIsland_Reg1_13.setText("3");
								TextMultIsland_Reg1_14.setText("5");
								TextMultIsland_Reg1_15.setText("3");
								TextMultIsland_Reg1_16.setText("1");
								TextMultIsland_Reg1_17.setText("2");
								TextMultIsland_Reg1_18.setText("3");
								TextMultIsland_Reg1_19.setText("");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 19) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(true);
								TextMultIsland_Reg1_6.setVisible(true);
	
	   	    					labelXZIslandd7.setVisible(true);
								TextMultIsland_Reg1_7.setVisible(true);
	
	       						labelXZIslandd8.setVisible(true);
								TextMultIsland_Reg1_8.setVisible(true);
	
	       						labelXZIslandd9.setVisible(true);
								TextMultIsland_Reg1_9.setVisible(true);
	
	       						labelXZIslandd10.setVisible(true);
								TextMultIsland_Reg1_10.setVisible(true);

								labelXZIslandd11.setVisible(true);
								TextMultIsland_Reg1_11.setVisible(true);

								labelXZIslandd12.setVisible(true);
								TextMultIsland_Reg1_12.setVisible(true);
				
								labelXZIslandd13.setVisible(true);
								TextMultIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZIslandd14.setVisible(true);
								TextMultIsland_Reg1_14.setVisible(true);
	
	    			   			labelXZIslandd15.setVisible(true);
								TextMultIsland_Reg1_15.setVisible(true);
	
	       						labelXZIslandd16.setVisible(true);
								TextMultIsland_Reg1_16.setVisible(true);
	
	    	   					labelXZIslandd17.setVisible(true);
								TextMultIsland_Reg1_17.setVisible(true);
	
	       						labelXZIslandd18.setVisible(true);
								TextMultIsland_Reg1_18.setVisible(true);
	
	       						labelXZIslandd19.setVisible(true);
								TextMultIsland_Reg1_19.setVisible(true);
	
	       						labelXZIslandd20.setVisible(false);
								TextMultIsland_Reg1_20.setVisible(false);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("2");
								TextMultIsland_Reg1_7.setText("1");
								TextMultIsland_Reg1_8.setText("3");
								TextMultIsland_Reg1_9.setText("2");
								TextMultIsland_Reg1_10.setText("2");
								TextMultIsland_Reg1_11.setText("1");
								TextMultIsland_Reg1_12.setText("4");
								TextMultIsland_Reg1_13.setText("3");
								TextMultIsland_Reg1_14.setText("5");
								TextMultIsland_Reg1_15.setText("3");
								TextMultIsland_Reg1_16.setText("1");
								TextMultIsland_Reg1_17.setText("2");
								TextMultIsland_Reg1_18.setText("3");
								TextMultIsland_Reg1_19.setText("4");
								TextMultIsland_Reg1_20.setText("");
								}
							if (Here_the_value_Island == 20) 
								{
								labelXZIslandd3.setVisible(true);
								TextMultIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZIslandd4.setVisible(true);
								TextMultIsland_Reg1_4.setVisible(true);
	
	    		   				labelXZIslandd5.setVisible(true);
								TextMultIsland_Reg1_5.setVisible(true);
	
	       						labelXZIslandd6.setVisible(true);
								TextMultIsland_Reg1_6.setVisible(true);
	
	   	    					labelXZIslandd7.setVisible(true);
								TextMultIsland_Reg1_7.setVisible(true);
	
	       						labelXZIslandd8.setVisible(true);
								TextMultIsland_Reg1_8.setVisible(true);
	
	       						labelXZIslandd9.setVisible(true);
								TextMultIsland_Reg1_9.setVisible(true);
	
	       						labelXZIslandd10.setVisible(true);
								TextMultIsland_Reg1_10.setVisible(true);

								labelXZIslandd11.setVisible(true);
								TextMultIsland_Reg1_11.setVisible(true);

								labelXZIslandd12.setVisible(true);
								TextMultIsland_Reg1_12.setVisible(true);
				
								labelXZIslandd13.setVisible(true);
								TextMultIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZIslandd14.setVisible(true);
								TextMultIsland_Reg1_14.setVisible(true);
	
	    			   			labelXZIslandd15.setVisible(true);
								TextMultIsland_Reg1_15.setVisible(true);
	
	       						labelXZIslandd16.setVisible(true);
								TextMultIsland_Reg1_16.setVisible(true);
	
	    	   					labelXZIslandd17.setVisible(true);
								TextMultIsland_Reg1_17.setVisible(true);
	
	       						labelXZIslandd18.setVisible(true);
								TextMultIsland_Reg1_18.setVisible(true);
	
	       						labelXZIslandd19.setVisible(true);
								TextMultIsland_Reg1_19.setVisible(true);
	
	       						labelXZIslandd20.setVisible(true);
								TextMultIsland_Reg1_20.setVisible(true);
				
								TextMultIsland_Reg1_3.setText("1");
								TextMultIsland_Reg1_4.setText("2");
								TextMultIsland_Reg1_5.setText("3");
								TextMultIsland_Reg1_6.setText("2");
								TextMultIsland_Reg1_7.setText("1");
								TextMultIsland_Reg1_8.setText("3");
								TextMultIsland_Reg1_9.setText("2");
								TextMultIsland_Reg1_10.setText("2");
								TextMultIsland_Reg1_11.setText("1");
								TextMultIsland_Reg1_12.setText("4");
								TextMultIsland_Reg1_13.setText("3");
								TextMultIsland_Reg1_14.setText("5");
								TextMultIsland_Reg1_15.setText("3");
								TextMultIsland_Reg1_16.setText("1");
								TextMultIsland_Reg1_17.setText("2");
								TextMultIsland_Reg1_18.setText("3");
								TextMultIsland_Reg1_19.setText("4");
								TextMultIsland_Reg1_20.setText("2");
								}						
							}
						});
			
			
						//This creates a new button 
      		 			ButtonNextFrameMultIsland_SaveNext.setSize(70, 70); // long, high
						runMultIslandSaveNextHandler = new runButtonMultIslandSaveNextHandler();
						ButtonNextFrameMultIsland_SaveNext.addActionListener(runMultIslandSaveNextHandler);
       			 		ButtonNextFrameMultIsland_SaveNext.setVisible(true); 
       					MultIslandWindow.add(ButtonNextFrameMultIsland_SaveNext);


						//This creates a new button 
      	 				ButtonNextFrameMultIsland_Back.setSize(70, 70); // long, high
						runMultIslandExitHandler = new runButtonMultIslandExitHandler();
						ButtonNextFrameMultIsland_Back.addActionListener(runMultIslandExitHandler);
       			 		ButtonNextFrameMultIsland_Back.setVisible(true); 
       					MultIslandWindow.add(ButtonNextFrameMultIsland_Back);
						}

					label4l.setVisible(true);
					MigrationRate_Cte.setVisible(true);
					MigrationRate_Var.setVisible(true);
					TextMigrationRateProteinEvolverABC.setVisible(true);
					TextMigrationRateProteinEvolverABC.setText("0.003");
					MigrationRate_Cte.setSelected(true);
					label4eeeSD.setVisible(false);
					ProteinEvolverABC_MigrationRate = "#MigrationRate=1 0.005";
					label4ll.setVisible(true);
					ConvergenceDemesProteinEvolverABC_No.setVisible(true);
					ConvergenceDemesProteinEvolverABC_Yes.setVisible(true);
        			} 
				if (seletedMigrationModels == "stepping-stone")
					{
					ProteinEvolverABC_IslandModel = "#MigrationModel=1 4 12 10 3 4";
					ProteinEvolverABC_SteppStoneModel = "#MigrationModel=2 4 12 10 3 4";
 					ProteinEvolverABC_ContIslandModel = "#MigrationModel=3 4 12 10 3 4";
					label4eeeIsland.setVisible(false);
					label4eeeIsland.setText("");
					label4eeeSteppStone.setVisible(false);
					label4eeeSteppStone.setText("");
					label4eeeContIsland.setVisible(false);
					label4eeeContIsland.setText("");					

					label4eeeSteppStone.setText("");
					label4eeeSteppStone.setVisible(false); // not saved
					
					OneSteppStone_int = 1;				
					FirstTimeMultSteppStoneWindow = FirstTimeMultSteppStoneWindow + 1;
					MultSteppStoneWindow.setVisible( true );

			
					if (FirstTimeMultSteppStoneWindow == 1)
						{
						MultSteppStoneWindow.setTitle( "Migration under the Stepping-Stone model" );
						MultSteppStoneWindow.setSize(500, 1000);
						MultSteppStoneWindow.setLayout( new GridLayout( 25, 2 ) ); // 16 rows, 4 columns
						MultSteppStoneWindow.setBackground(Color.white);
						MultSteppStoneWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      			  		MultSteppStoneWindow.setLocationRelativeTo(null);
				
						JLabel labelX1 = new JLabel();
						labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1.setText("Migration Stepping-Stone model");
   			   			MultSteppStoneWindow.add(labelX1);

						JLabel labelX1b = new JLabel();
						labelX1b.setFont(new Font("Arial", Font.BOLD, 14));
      		 			labelX1b.setText(" ");
     		 			MultSteppStoneWindow.add(labelX1b);
				
				
						JLabel labelX2 = new JLabel();
      		 			labelX2.setText("Number of demes ");
      					MultSteppStoneWindow.add(labelX2);

						MultSteppStoneWindow.add(NumberOfMultSteppStoneProteinEvolverABC_);
				
						JLabel labelX3a = new JLabel();
       					labelX3a.setText("Deme number ");
      					MultSteppStoneWindow.add(labelX3a);
				
						JLabel labelX3 = new JLabel();
       					labelX3.setText("Deme sample size");
      					MultSteppStoneWindow.add(labelX3);


  		     			labelXZSteppStoned1.setText("1");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned1);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_1);
       					TextMultSteppStone_Reg1_1.setText("2");

		       			labelXZSteppStoned2.setText("2");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned2);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_2);
      		 			TextMultSteppStone_Reg1_2.setText("3");

		       			labelXZSteppStoned3.setText("3");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned3);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_3);
       					TextMultSteppStone_Reg1_3.setText("1");

       					labelXZSteppStoned4.setText("4");
      					MultSteppStoneWindow.add(labelXZSteppStoned4);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_4);
       					TextMultSteppStone_Reg1_4.setText("2");
						
       					labelXZSteppStoned5.setText("5");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned5);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_5);
						
       					labelXZSteppStoned6.setText("6");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned6);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_6);
				
       					labelXZSteppStoned7.setText("7");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned7);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_7);
				
   		    			labelXZSteppStoned8.setText("8");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned8);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_8);
				
       					labelXZSteppStoned9.setText("9");
      					MultSteppStoneWindow.add(labelXZSteppStoned9);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_9);
				
      		 			labelXZSteppStoned10.setText("10");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned10);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_10);

						labelXZSteppStoned11.setText("11");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned11);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_11);

		       			labelXZSteppStoned12.setText("12");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned12);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_12);

		       			labelXZSteppStoned13.setText("13");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned13);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_13);

       					labelXZSteppStoned14.setText("14");
      					MultSteppStoneWindow.add(labelXZSteppStoned14);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_14);
						
       					labelXZSteppStoned15.setText("15");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned15);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_15);
						
       					labelXZSteppStoned16.setText("16");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned16);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_16);
				
       					labelXZSteppStoned17.setText("17");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned17);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_17);
				
   		    			labelXZSteppStoned18.setText("18");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned18);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_18);
				
       					labelXZSteppStoned19.setText("19");
      					MultSteppStoneWindow.add(labelXZSteppStoned19);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_19);
				
      		 			labelXZSteppStoned20.setText("20");
     		 			MultSteppStoneWindow.add(labelXZSteppStoned20);
						MultSteppStoneWindow.add(TextMultSteppStone_Reg1_20);
				
				
						JLabel labelXA = new JLabel();
       					labelXA.setText(" ");
      					MultSteppStoneWindow.add(labelXA);
				
						JLabel labelXB = new JLabel();
       					labelXB.setText(" ");
      					MultSteppStoneWindow.add(labelXB);
						
				
						// default
      		 		    labelXZSteppStoned5.setVisible(false);
						TextMultSteppStone_Reg1_5.setVisible(false);

       					labelXZSteppStoned6.setVisible(false);
						TextMultSteppStone_Reg1_6.setVisible(false);

       					labelXZSteppStoned7.setVisible(false);
						TextMultSteppStone_Reg1_7.setVisible(false);

       					labelXZSteppStoned8.setVisible(false);
						TextMultSteppStone_Reg1_8.setVisible(false);

       					labelXZSteppStoned9.setVisible(false);
						TextMultSteppStone_Reg1_9.setVisible(false);

       					labelXZSteppStoned10.setVisible(false);
						TextMultSteppStone_Reg1_10.setVisible(false);

						labelXZSteppStoned11.setVisible(false);
						TextMultSteppStone_Reg1_11.setVisible(false);

      		 			labelXZSteppStoned12.setVisible(false);
						TextMultSteppStone_Reg1_12.setVisible(false);

						labelXZSteppStoned13.setVisible(false);
						TextMultSteppStone_Reg1_13.setVisible(false);

      		 			labelXZSteppStoned14.setVisible(false);
						TextMultSteppStone_Reg1_14.setVisible(false);

       					labelXZSteppStoned15.setVisible(false);
						TextMultSteppStone_Reg1_15.setVisible(false);

       					labelXZSteppStoned16.setVisible(false);
						TextMultSteppStone_Reg1_16.setVisible(false);

       					labelXZSteppStoned17.setVisible(false);
						TextMultSteppStone_Reg1_17.setVisible(false);

       					labelXZSteppStoned18.setVisible(false);
						TextMultSteppStone_Reg1_18.setVisible(false);

       					labelXZSteppStoned19.setVisible(false);
						TextMultSteppStone_Reg1_19.setVisible(false);

       					labelXZSteppStoned20.setVisible(false);
						TextMultSteppStone_Reg1_20.setVisible(false);
						
						TextNumberOfMultSteppStoneProteinEvolverABC.setText("4");
						NumberOfMultSteppStoneProteinEvolverABC_.setSelectedItem("4");
				
						NumberOfMultSteppStoneProteinEvolverABC_.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox NumberOfMultSteppStoneProteinEvolverABC_Here = (JComboBox) e.getSource();
							String seletedNumberOfMultSteppStoneProteinEvolverABC_Here = (String) NumberOfMultSteppStoneProteinEvolverABC_Here.getSelectedItem();
								
							TextNumberOfMultSteppStoneProteinEvolverABC.setText(seletedNumberOfMultSteppStoneProteinEvolverABC_Here); 

							int Here_the_value_SteppStone = 0;
							Here_the_value_SteppStone = Integer.parseInt(seletedNumberOfMultSteppStoneProteinEvolverABC_Here);
					
							labelXZSteppStoned3.setVisible(false);
							TextMultSteppStone_Reg1_3.setVisible(false);
					
	 		      			labelXZSteppStoned4.setVisible(false);
							TextMultSteppStone_Reg1_4.setVisible(false);
	
	    		   			labelXZSteppStoned5.setVisible(false);
							TextMultSteppStone_Reg1_5.setVisible(false);
	
	       					labelXZSteppStoned6.setVisible(false);
							TextMultSteppStone_Reg1_6.setVisible(false);
	
	       					labelXZSteppStoned7.setVisible(false);
							TextMultSteppStone_Reg1_7.setVisible(false);
	
	       					labelXZSteppStoned8.setVisible(false);
							TextMultSteppStone_Reg1_8.setVisible(false);
	
	       					labelXZSteppStoned9.setVisible(false);
							TextMultSteppStone_Reg1_9.setVisible(false);
	
	       					labelXZSteppStoned10.setVisible(false);
							TextMultSteppStone_Reg1_10.setVisible(false);

							labelXZSteppStoned11.setVisible(false);
							TextMultSteppStone_Reg1_11.setVisible(false);

							labelXZSteppStoned12.setVisible(false);
							TextMultSteppStone_Reg1_12.setVisible(false);
				
							labelXZSteppStoned13.setVisible(false);
							TextMultSteppStone_Reg1_13.setVisible(false);
					
	 		      			labelXZSteppStoned14.setVisible(false);
							TextMultSteppStone_Reg1_14.setVisible(false);
	
	    		   			labelXZSteppStoned15.setVisible(false);
							TextMultSteppStone_Reg1_15.setVisible(false);
	
	       					labelXZSteppStoned16.setVisible(false);
							TextMultSteppStone_Reg1_16.setVisible(false);
	
	       					labelXZSteppStoned17.setVisible(false);
							TextMultSteppStone_Reg1_17.setVisible(false);
	
	       					labelXZSteppStoned18.setVisible(false);
							TextMultSteppStone_Reg1_18.setVisible(false);
	
	       					labelXZSteppStoned19.setVisible(false);
							TextMultSteppStone_Reg1_19.setVisible(false);
	
	       					labelXZSteppStoned20.setVisible(false);
							TextMultSteppStone_Reg1_20.setVisible(false);

				
							TextMultSteppStone_Reg1_3.setText("");
							TextMultSteppStone_Reg1_4.setText("");
							TextMultSteppStone_Reg1_5.setText("");
							TextMultSteppStone_Reg1_6.setText("");
							TextMultSteppStone_Reg1_7.setText("");
							TextMultSteppStone_Reg1_8.setText("");
							TextMultSteppStone_Reg1_9.setText("");
							TextMultSteppStone_Reg1_10.setText("");
							TextMultSteppStone_Reg1_11.setText("");
							TextMultSteppStone_Reg1_12.setText("");
							TextMultSteppStone_Reg1_13.setText("");
							TextMultSteppStone_Reg1_14.setText("");
							TextMultSteppStone_Reg1_15.setText("");
							TextMultSteppStone_Reg1_16.setText("");
							TextMultSteppStone_Reg1_17.setText("");
							TextMultSteppStone_Reg1_18.setText("");
							TextMultSteppStone_Reg1_19.setText("");
							TextMultSteppStone_Reg1_20.setText("");
				
							if (Here_the_value_SteppStone == 2) 
								{
								labelXZSteppStoned3.setVisible(false);
								TextMultSteppStone_Reg1_3.setVisible(false);
					
	 		      				labelXZSteppStoned4.setVisible(false);
								TextMultSteppStone_Reg1_4.setVisible(false);
	
	    		   				labelXZSteppStoned5.setVisible(false);
								TextMultSteppStone_Reg1_5.setVisible(false);
	
	       						labelXZSteppStoned6.setVisible(false);
								TextMultSteppStone_Reg1_6.setVisible(false);
	
	       						labelXZSteppStoned7.setVisible(false);
								TextMultSteppStone_Reg1_7.setVisible(false);
	
	       						labelXZSteppStoned8.setVisible(false);
								TextMultSteppStone_Reg1_8.setVisible(false);
	
	       						labelXZSteppStoned9.setVisible(false);
								TextMultSteppStone_Reg1_9.setVisible(false);
	
	       						labelXZSteppStoned10.setVisible(false);
								TextMultSteppStone_Reg1_10.setVisible(false);

								labelXZSteppStoned11.setVisible(false);
								TextMultSteppStone_Reg1_11.setVisible(false);

								labelXZSteppStoned12.setVisible(false);
								TextMultSteppStone_Reg1_12.setVisible(false);
				
								labelXZSteppStoned13.setVisible(false);
								TextMultSteppStone_Reg1_13.setVisible(false);
					
	 		    	  			labelXZSteppStoned14.setVisible(false);
								TextMultSteppStone_Reg1_14.setVisible(false);
	
	    		   				labelXZSteppStoned15.setVisible(false);
								TextMultSteppStone_Reg1_15.setVisible(false);
	
	       						labelXZSteppStoned16.setVisible(false);
								TextMultSteppStone_Reg1_16.setVisible(false);
	
	       						labelXZSteppStoned17.setVisible(false);
								TextMultSteppStone_Reg1_17.setVisible(false);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("");
								TextMultSteppStone_Reg1_4.setText("");
								TextMultSteppStone_Reg1_5.setText("");
								TextMultSteppStone_Reg1_6.setText("");
								TextMultSteppStone_Reg1_7.setText("");
								TextMultSteppStone_Reg1_8.setText("");
								TextMultSteppStone_Reg1_9.setText("");
								TextMultSteppStone_Reg1_10.setText("");
								TextMultSteppStone_Reg1_11.setText("");
								TextMultSteppStone_Reg1_12.setText("");
								TextMultSteppStone_Reg1_13.setText("");
								TextMultSteppStone_Reg1_14.setText("");
								TextMultSteppStone_Reg1_15.setText("");
								TextMultSteppStone_Reg1_16.setText("");
								TextMultSteppStone_Reg1_17.setText("");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 3) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(false);
								TextMultSteppStone_Reg1_4.setVisible(false);
	
	    		   				labelXZSteppStoned5.setVisible(false);
								TextMultSteppStone_Reg1_5.setVisible(false);
	
	       						labelXZSteppStoned6.setVisible(false);
								TextMultSteppStone_Reg1_6.setVisible(false);
	
	       						labelXZSteppStoned7.setVisible(false);
								TextMultSteppStone_Reg1_7.setVisible(false);
	
	       						labelXZSteppStoned8.setVisible(false);
								TextMultSteppStone_Reg1_8.setVisible(false);
	
	       						labelXZSteppStoned9.setVisible(false);
								TextMultSteppStone_Reg1_9.setVisible(false);
	
	       						labelXZSteppStoned10.setVisible(false);
								TextMultSteppStone_Reg1_10.setVisible(false);

								labelXZSteppStoned11.setVisible(false);
								TextMultSteppStone_Reg1_11.setVisible(false);

								labelXZSteppStoned12.setVisible(false);
								TextMultSteppStone_Reg1_12.setVisible(false);
				
								labelXZSteppStoned13.setVisible(false);
								TextMultSteppStone_Reg1_13.setVisible(false);
					
	 		    	  			labelXZSteppStoned14.setVisible(false);
								TextMultSteppStone_Reg1_14.setVisible(false);
	
	    		   				labelXZSteppStoned15.setVisible(false);
								TextMultSteppStone_Reg1_15.setVisible(false);
	
	       						labelXZSteppStoned16.setVisible(false);
								TextMultSteppStone_Reg1_16.setVisible(false);
	
	       						labelXZSteppStoned17.setVisible(false);
								TextMultSteppStone_Reg1_17.setVisible(false);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("");
								TextMultSteppStone_Reg1_5.setText("");
								TextMultSteppStone_Reg1_6.setText("");
								TextMultSteppStone_Reg1_7.setText("");
								TextMultSteppStone_Reg1_8.setText("");
								TextMultSteppStone_Reg1_9.setText("");
								TextMultSteppStone_Reg1_10.setText("");
								TextMultSteppStone_Reg1_11.setText("");
								TextMultSteppStone_Reg1_12.setText("");
								TextMultSteppStone_Reg1_13.setText("");
								TextMultSteppStone_Reg1_14.setText("");
								TextMultSteppStone_Reg1_15.setText("");
								TextMultSteppStone_Reg1_16.setText("");
								TextMultSteppStone_Reg1_17.setText("");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 4) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(false);
								TextMultSteppStone_Reg1_5.setVisible(false);
	
	       						labelXZSteppStoned6.setVisible(false);
								TextMultSteppStone_Reg1_6.setVisible(false);
	
	       						labelXZSteppStoned7.setVisible(false);
								TextMultSteppStone_Reg1_7.setVisible(false);
	
	       						labelXZSteppStoned8.setVisible(false);
								TextMultSteppStone_Reg1_8.setVisible(false);
	
	       						labelXZSteppStoned9.setVisible(false);
								TextMultSteppStone_Reg1_9.setVisible(false);
	
	       						labelXZSteppStoned10.setVisible(false);
								TextMultSteppStone_Reg1_10.setVisible(false);

								labelXZSteppStoned11.setVisible(false);
								TextMultSteppStone_Reg1_11.setVisible(false);

								labelXZSteppStoned12.setVisible(false);
								TextMultSteppStone_Reg1_12.setVisible(false);
				
								labelXZSteppStoned13.setVisible(false);
								TextMultSteppStone_Reg1_13.setVisible(false);
					
	 		    	  			labelXZSteppStoned14.setVisible(false);
								TextMultSteppStone_Reg1_14.setVisible(false);
	
	    		   				labelXZSteppStoned15.setVisible(false);
								TextMultSteppStone_Reg1_15.setVisible(false);
	
	       						labelXZSteppStoned16.setVisible(false);
								TextMultSteppStone_Reg1_16.setVisible(false);
	
	       						labelXZSteppStoned17.setVisible(false);
								TextMultSteppStone_Reg1_17.setVisible(false);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("");
								TextMultSteppStone_Reg1_6.setText("");
								TextMultSteppStone_Reg1_7.setText("");
								TextMultSteppStone_Reg1_8.setText("");
								TextMultSteppStone_Reg1_9.setText("");
								TextMultSteppStone_Reg1_10.setText("");
								TextMultSteppStone_Reg1_11.setText("");
								TextMultSteppStone_Reg1_12.setText("");
								TextMultSteppStone_Reg1_13.setText("");
								TextMultSteppStone_Reg1_14.setText("");
								TextMultSteppStone_Reg1_15.setText("");
								TextMultSteppStone_Reg1_16.setText("");
								TextMultSteppStone_Reg1_17.setText("");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 5) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(false);
								TextMultSteppStone_Reg1_6.setVisible(false);
	
	       						labelXZSteppStoned7.setVisible(false);
								TextMultSteppStone_Reg1_7.setVisible(false);
	
	       						labelXZSteppStoned8.setVisible(false);
								TextMultSteppStone_Reg1_8.setVisible(false);
	
	       						labelXZSteppStoned9.setVisible(false);
								TextMultSteppStone_Reg1_9.setVisible(false);
	
	       						labelXZSteppStoned10.setVisible(false);
								TextMultSteppStone_Reg1_10.setVisible(false);

								labelXZSteppStoned11.setVisible(false);
								TextMultSteppStone_Reg1_11.setVisible(false);

								labelXZSteppStoned12.setVisible(false);
								TextMultSteppStone_Reg1_12.setVisible(false);
				
								labelXZSteppStoned13.setVisible(false);
								TextMultSteppStone_Reg1_13.setVisible(false);
					
	 		    	  			labelXZSteppStoned14.setVisible(false);
								TextMultSteppStone_Reg1_14.setVisible(false);
	
	    		   				labelXZSteppStoned15.setVisible(false);
								TextMultSteppStone_Reg1_15.setVisible(false);
	
	       						labelXZSteppStoned16.setVisible(false);
								TextMultSteppStone_Reg1_16.setVisible(false);
	
	       						labelXZSteppStoned17.setVisible(false);
								TextMultSteppStone_Reg1_17.setVisible(false);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("");
								TextMultSteppStone_Reg1_7.setText("");
								TextMultSteppStone_Reg1_8.setText("");
								TextMultSteppStone_Reg1_9.setText("");
								TextMultSteppStone_Reg1_10.setText("");
								TextMultSteppStone_Reg1_11.setText("");
								TextMultSteppStone_Reg1_12.setText("");
								TextMultSteppStone_Reg1_13.setText("");
								TextMultSteppStone_Reg1_14.setText("");
								TextMultSteppStone_Reg1_15.setText("");
								TextMultSteppStone_Reg1_16.setText("");
								TextMultSteppStone_Reg1_17.setText("");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 6) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(true);
								TextMultSteppStone_Reg1_6.setVisible(true);
	
	       						labelXZSteppStoned7.setVisible(false);
								TextMultSteppStone_Reg1_7.setVisible(false);
	
	       						labelXZSteppStoned8.setVisible(false);
								TextMultSteppStone_Reg1_8.setVisible(false);
	
	       						labelXZSteppStoned9.setVisible(false);
								TextMultSteppStone_Reg1_9.setVisible(false);
	
	       						labelXZSteppStoned10.setVisible(false);
								TextMultSteppStone_Reg1_10.setVisible(false);

								labelXZSteppStoned11.setVisible(false);
								TextMultSteppStone_Reg1_11.setVisible(false);

								labelXZSteppStoned12.setVisible(false);
								TextMultSteppStone_Reg1_12.setVisible(false);
				
								labelXZSteppStoned13.setVisible(false);
								TextMultSteppStone_Reg1_13.setVisible(false);
					
	 		    	  			labelXZSteppStoned14.setVisible(false);
								TextMultSteppStone_Reg1_14.setVisible(false);
	
	    		   				labelXZSteppStoned15.setVisible(false);
								TextMultSteppStone_Reg1_15.setVisible(false);
	
	       						labelXZSteppStoned16.setVisible(false);
								TextMultSteppStone_Reg1_16.setVisible(false);
	
	       						labelXZSteppStoned17.setVisible(false);
								TextMultSteppStone_Reg1_17.setVisible(false);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("3");
								TextMultSteppStone_Reg1_7.setText("");
								TextMultSteppStone_Reg1_8.setText("");
								TextMultSteppStone_Reg1_9.setText("");
								TextMultSteppStone_Reg1_10.setText("");
								TextMultSteppStone_Reg1_11.setText("");
								TextMultSteppStone_Reg1_12.setText("");
								TextMultSteppStone_Reg1_13.setText("");
								TextMultSteppStone_Reg1_14.setText("");
								TextMultSteppStone_Reg1_15.setText("");
								TextMultSteppStone_Reg1_16.setText("");
								TextMultSteppStone_Reg1_17.setText("");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 7) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(true);
								TextMultSteppStone_Reg1_6.setVisible(true);
	
	       						labelXZSteppStoned7.setVisible(true);
								TextMultSteppStone_Reg1_7.setVisible(true);
	
	       						labelXZSteppStoned8.setVisible(false);
								TextMultSteppStone_Reg1_8.setVisible(false);
	
	       						labelXZSteppStoned9.setVisible(false);
								TextMultSteppStone_Reg1_9.setVisible(false);
	
	       						labelXZSteppStoned10.setVisible(false);
								TextMultSteppStone_Reg1_10.setVisible(false);

								labelXZSteppStoned11.setVisible(false);
								TextMultSteppStone_Reg1_11.setVisible(false);

								labelXZSteppStoned12.setVisible(false);
								TextMultSteppStone_Reg1_12.setVisible(false);
				
								labelXZSteppStoned13.setVisible(false);
								TextMultSteppStone_Reg1_13.setVisible(false);
					
	 		    	  			labelXZSteppStoned14.setVisible(false);
								TextMultSteppStone_Reg1_14.setVisible(false);
	
	    		   				labelXZSteppStoned15.setVisible(false);
								TextMultSteppStone_Reg1_15.setVisible(false);
	
	       						labelXZSteppStoned16.setVisible(false);
								TextMultSteppStone_Reg1_16.setVisible(false);
	
	       						labelXZSteppStoned17.setVisible(false);
								TextMultSteppStone_Reg1_17.setVisible(false);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("3");
								TextMultSteppStone_Reg1_7.setText("4");
								TextMultSteppStone_Reg1_8.setText("");
								TextMultSteppStone_Reg1_9.setText("");
								TextMultSteppStone_Reg1_10.setText("");
								TextMultSteppStone_Reg1_11.setText("");
								TextMultSteppStone_Reg1_12.setText("");
								TextMultSteppStone_Reg1_13.setText("");
								TextMultSteppStone_Reg1_14.setText("");
								TextMultSteppStone_Reg1_15.setText("");
								TextMultSteppStone_Reg1_16.setText("");
								TextMultSteppStone_Reg1_17.setText("");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 8) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(true);
								TextMultSteppStone_Reg1_6.setVisible(true);
	
	       						labelXZSteppStoned7.setVisible(true);
								TextMultSteppStone_Reg1_7.setVisible(true);
	
	       						labelXZSteppStoned8.setVisible(true);
								TextMultSteppStone_Reg1_8.setVisible(true);
	
	       						labelXZSteppStoned9.setVisible(false);
								TextMultSteppStone_Reg1_9.setVisible(false);
	
	       						labelXZSteppStoned10.setVisible(false);
								TextMultSteppStone_Reg1_10.setVisible(false);

								labelXZSteppStoned11.setVisible(false);
								TextMultSteppStone_Reg1_11.setVisible(false);

								labelXZSteppStoned12.setVisible(false);
								TextMultSteppStone_Reg1_12.setVisible(false);
				
								labelXZSteppStoned13.setVisible(false);
								TextMultSteppStone_Reg1_13.setVisible(false);
					
	 		    	  			labelXZSteppStoned14.setVisible(false);
								TextMultSteppStone_Reg1_14.setVisible(false);
	
	    		   				labelXZSteppStoned15.setVisible(false);
								TextMultSteppStone_Reg1_15.setVisible(false);
	
	       						labelXZSteppStoned16.setVisible(false);
								TextMultSteppStone_Reg1_16.setVisible(false);
	
	       						labelXZSteppStoned17.setVisible(false);
								TextMultSteppStone_Reg1_17.setVisible(false);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("3");
								TextMultSteppStone_Reg1_7.setText("4");
								TextMultSteppStone_Reg1_8.setText("2");
								TextMultSteppStone_Reg1_9.setText("");
								TextMultSteppStone_Reg1_10.setText("");
								TextMultSteppStone_Reg1_11.setText("");
								TextMultSteppStone_Reg1_12.setText("");
								TextMultSteppStone_Reg1_13.setText("");
								TextMultSteppStone_Reg1_14.setText("");
								TextMultSteppStone_Reg1_15.setText("");
								TextMultSteppStone_Reg1_16.setText("");
								TextMultSteppStone_Reg1_17.setText("");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 9) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(true);
								TextMultSteppStone_Reg1_6.setVisible(true);
	
	       						labelXZSteppStoned7.setVisible(true);
								TextMultSteppStone_Reg1_7.setVisible(true);
	
	       						labelXZSteppStoned8.setVisible(true);
								TextMultSteppStone_Reg1_8.setVisible(true);
	
	       						labelXZSteppStoned9.setVisible(true);
								TextMultSteppStone_Reg1_9.setVisible(true);
	
	       						labelXZSteppStoned10.setVisible(false);
								TextMultSteppStone_Reg1_10.setVisible(false);

								labelXZSteppStoned11.setVisible(false);
								TextMultSteppStone_Reg1_11.setVisible(false);

								labelXZSteppStoned12.setVisible(false);
								TextMultSteppStone_Reg1_12.setVisible(false);
				
								labelXZSteppStoned13.setVisible(false);
								TextMultSteppStone_Reg1_13.setVisible(false);
					
	 		    	  			labelXZSteppStoned14.setVisible(false);
								TextMultSteppStone_Reg1_14.setVisible(false);
	
	    		   				labelXZSteppStoned15.setVisible(false);
								TextMultSteppStone_Reg1_15.setVisible(false);
	
	       						labelXZSteppStoned16.setVisible(false);
								TextMultSteppStone_Reg1_16.setVisible(false);
	
	       						labelXZSteppStoned17.setVisible(false);
								TextMultSteppStone_Reg1_17.setVisible(false);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("3");
								TextMultSteppStone_Reg1_7.setText("4");
								TextMultSteppStone_Reg1_8.setText("2");
								TextMultSteppStone_Reg1_9.setText("3");
								TextMultSteppStone_Reg1_10.setText("");
								TextMultSteppStone_Reg1_11.setText("");
								TextMultSteppStone_Reg1_12.setText("");
								TextMultSteppStone_Reg1_13.setText("");
								TextMultSteppStone_Reg1_14.setText("");
								TextMultSteppStone_Reg1_15.setText("");
								TextMultSteppStone_Reg1_16.setText("");
								TextMultSteppStone_Reg1_17.setText("");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 10) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(true);
								TextMultSteppStone_Reg1_6.setVisible(true);
	
	       						labelXZSteppStoned7.setVisible(true);
								TextMultSteppStone_Reg1_7.setVisible(true);
	
	       						labelXZSteppStoned8.setVisible(true);
								TextMultSteppStone_Reg1_8.setVisible(true);
	
	       						labelXZSteppStoned9.setVisible(true);
								TextMultSteppStone_Reg1_9.setVisible(true);
	
	       						labelXZSteppStoned10.setVisible(true);
								TextMultSteppStone_Reg1_10.setVisible(true);

								labelXZSteppStoned11.setVisible(false);
								TextMultSteppStone_Reg1_11.setVisible(false);

								labelXZSteppStoned12.setVisible(false);
								TextMultSteppStone_Reg1_12.setVisible(false);
				
								labelXZSteppStoned13.setVisible(false);
								TextMultSteppStone_Reg1_13.setVisible(false);
					
	 		    	  			labelXZSteppStoned14.setVisible(false);
								TextMultSteppStone_Reg1_14.setVisible(false);
	
	    		   				labelXZSteppStoned15.setVisible(false);
								TextMultSteppStone_Reg1_15.setVisible(false);
	
	       						labelXZSteppStoned16.setVisible(false);
								TextMultSteppStone_Reg1_16.setVisible(false);
	
	       						labelXZSteppStoned17.setVisible(false);
								TextMultSteppStone_Reg1_17.setVisible(false);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("3");
								TextMultSteppStone_Reg1_7.setText("4");
								TextMultSteppStone_Reg1_8.setText("2");
								TextMultSteppStone_Reg1_9.setText("3");
								TextMultSteppStone_Reg1_10.setText("5");
								TextMultSteppStone_Reg1_11.setText("");
								TextMultSteppStone_Reg1_12.setText("");
								TextMultSteppStone_Reg1_13.setText("");
								TextMultSteppStone_Reg1_14.setText("");
								TextMultSteppStone_Reg1_15.setText("");
								TextMultSteppStone_Reg1_16.setText("");
								TextMultSteppStone_Reg1_17.setText("");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}	
							if (Here_the_value_SteppStone == 11) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(true);
								TextMultSteppStone_Reg1_6.setVisible(true);
	
	       						labelXZSteppStoned7.setVisible(true);
								TextMultSteppStone_Reg1_7.setVisible(true);
	
	       						labelXZSteppStoned8.setVisible(true);
								TextMultSteppStone_Reg1_8.setVisible(true);
	
	       						labelXZSteppStoned9.setVisible(true);
								TextMultSteppStone_Reg1_9.setVisible(true);
	
	       						labelXZSteppStoned10.setVisible(true);
								TextMultSteppStone_Reg1_10.setVisible(true);

								labelXZSteppStoned11.setVisible(true);
								TextMultSteppStone_Reg1_11.setVisible(true);

								labelXZSteppStoned12.setVisible(false);
								TextMultSteppStone_Reg1_12.setVisible(false);
				
								labelXZSteppStoned13.setVisible(false);
								TextMultSteppStone_Reg1_13.setVisible(false);
					
	 		    	  			labelXZSteppStoned14.setVisible(false);
								TextMultSteppStone_Reg1_14.setVisible(false);
	
	    		   				labelXZSteppStoned15.setVisible(false);
								TextMultSteppStone_Reg1_15.setVisible(false);
	
	       						labelXZSteppStoned16.setVisible(false);
								TextMultSteppStone_Reg1_16.setVisible(false);
	
	       						labelXZSteppStoned17.setVisible(false);
								TextMultSteppStone_Reg1_17.setVisible(false);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("3");
								TextMultSteppStone_Reg1_7.setText("4");
								TextMultSteppStone_Reg1_8.setText("2");
								TextMultSteppStone_Reg1_9.setText("3");
								TextMultSteppStone_Reg1_10.setText("5");
								TextMultSteppStone_Reg1_11.setText("1");
								TextMultSteppStone_Reg1_12.setText("");
								TextMultSteppStone_Reg1_13.setText("");
								TextMultSteppStone_Reg1_14.setText("");
								TextMultSteppStone_Reg1_15.setText("");
								TextMultSteppStone_Reg1_16.setText("");
								TextMultSteppStone_Reg1_17.setText("");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 12) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(true);
								TextMultSteppStone_Reg1_6.setVisible(true);
	
	       						labelXZSteppStoned7.setVisible(true);
								TextMultSteppStone_Reg1_7.setVisible(true);
	
	       						labelXZSteppStoned8.setVisible(true);
								TextMultSteppStone_Reg1_8.setVisible(true);
	
	       						labelXZSteppStoned9.setVisible(true);
								TextMultSteppStone_Reg1_9.setVisible(true);
	
	       						labelXZSteppStoned10.setVisible(true);
								TextMultSteppStone_Reg1_10.setVisible(true);

								labelXZSteppStoned11.setVisible(true);
								TextMultSteppStone_Reg1_11.setVisible(true);

								labelXZSteppStoned12.setVisible(true);
								TextMultSteppStone_Reg1_12.setVisible(true);
				
								labelXZSteppStoned13.setVisible(false);
								TextMultSteppStone_Reg1_13.setVisible(false);
					
	 		    	  			labelXZSteppStoned14.setVisible(false);
								TextMultSteppStone_Reg1_14.setVisible(false);
	
	    		   				labelXZSteppStoned15.setVisible(false);
								TextMultSteppStone_Reg1_15.setVisible(false);
	
	       						labelXZSteppStoned16.setVisible(false);
								TextMultSteppStone_Reg1_16.setVisible(false);
	
	       						labelXZSteppStoned17.setVisible(false);
								TextMultSteppStone_Reg1_17.setVisible(false);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("3");
								TextMultSteppStone_Reg1_7.setText("4");
								TextMultSteppStone_Reg1_8.setText("2");
								TextMultSteppStone_Reg1_9.setText("3");
								TextMultSteppStone_Reg1_10.setText("5");
								TextMultSteppStone_Reg1_11.setText("1");
								TextMultSteppStone_Reg1_12.setText("3");
								TextMultSteppStone_Reg1_13.setText("");
								TextMultSteppStone_Reg1_14.setText("");
								TextMultSteppStone_Reg1_15.setText("");
								TextMultSteppStone_Reg1_16.setText("");
								TextMultSteppStone_Reg1_17.setText("");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 13) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(true);
								TextMultSteppStone_Reg1_6.setVisible(true);
	
	       						labelXZSteppStoned7.setVisible(true);
								TextMultSteppStone_Reg1_7.setVisible(true);
	
	       						labelXZSteppStoned8.setVisible(true);
								TextMultSteppStone_Reg1_8.setVisible(true);
	
	       						labelXZSteppStoned9.setVisible(true);
								TextMultSteppStone_Reg1_9.setVisible(true);
	
	       						labelXZSteppStoned10.setVisible(true);
								TextMultSteppStone_Reg1_10.setVisible(true);

								labelXZSteppStoned11.setVisible(true);
								TextMultSteppStone_Reg1_11.setVisible(true);

								labelXZSteppStoned12.setVisible(true);
								TextMultSteppStone_Reg1_12.setVisible(true);
				
								labelXZSteppStoned13.setVisible(true);
								TextMultSteppStone_Reg1_13.setVisible(true);
					
	 		    	  			labelXZSteppStoned14.setVisible(false);
								TextMultSteppStone_Reg1_14.setVisible(false);
	
	    		   				labelXZSteppStoned15.setVisible(false);
								TextMultSteppStone_Reg1_15.setVisible(false);
	
	       						labelXZSteppStoned16.setVisible(false);
								TextMultSteppStone_Reg1_16.setVisible(false);
	
	       						labelXZSteppStoned17.setVisible(false);
								TextMultSteppStone_Reg1_17.setVisible(false);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("3");
								TextMultSteppStone_Reg1_7.setText("4");
								TextMultSteppStone_Reg1_8.setText("2");
								TextMultSteppStone_Reg1_9.setText("3");
								TextMultSteppStone_Reg1_10.setText("5");
								TextMultSteppStone_Reg1_11.setText("1");
								TextMultSteppStone_Reg1_12.setText("3");
								TextMultSteppStone_Reg1_13.setText("2");
								TextMultSteppStone_Reg1_14.setText("");
								TextMultSteppStone_Reg1_15.setText("");
								TextMultSteppStone_Reg1_16.setText("");
								TextMultSteppStone_Reg1_17.setText("");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 14) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(true);
								TextMultSteppStone_Reg1_6.setVisible(true);
	
	       						labelXZSteppStoned7.setVisible(true);
								TextMultSteppStone_Reg1_7.setVisible(true);
	
	       						labelXZSteppStoned8.setVisible(true);
								TextMultSteppStone_Reg1_8.setVisible(true);
	
	       						labelXZSteppStoned9.setVisible(true);
								TextMultSteppStone_Reg1_9.setVisible(true);
	
	       						labelXZSteppStoned10.setVisible(true);
								TextMultSteppStone_Reg1_10.setVisible(true);

								labelXZSteppStoned11.setVisible(true);
								TextMultSteppStone_Reg1_11.setVisible(true);

								labelXZSteppStoned12.setVisible(true);
								TextMultSteppStone_Reg1_12.setVisible(true);
				
								labelXZSteppStoned13.setVisible(true);
								TextMultSteppStone_Reg1_13.setVisible(true);
					
	 		    	  			labelXZSteppStoned14.setVisible(true);
								TextMultSteppStone_Reg1_14.setVisible(true);
	
	    		   				labelXZSteppStoned15.setVisible(false);
								TextMultSteppStone_Reg1_15.setVisible(false);
	
	       						labelXZSteppStoned16.setVisible(false);
								TextMultSteppStone_Reg1_16.setVisible(false);
	
	       						labelXZSteppStoned17.setVisible(false);
								TextMultSteppStone_Reg1_17.setVisible(false);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("3");
								TextMultSteppStone_Reg1_7.setText("4");
								TextMultSteppStone_Reg1_8.setText("2");
								TextMultSteppStone_Reg1_9.setText("3");
								TextMultSteppStone_Reg1_10.setText("5");
								TextMultSteppStone_Reg1_11.setText("1");
								TextMultSteppStone_Reg1_12.setText("3");
								TextMultSteppStone_Reg1_13.setText("2");
								TextMultSteppStone_Reg1_14.setText("4");
								TextMultSteppStone_Reg1_15.setText("");
								TextMultSteppStone_Reg1_16.setText("");
								TextMultSteppStone_Reg1_17.setText("");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 15) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(true);
								TextMultSteppStone_Reg1_6.setVisible(true);
	
	       						labelXZSteppStoned7.setVisible(true);
								TextMultSteppStone_Reg1_7.setVisible(true);
	
	       						labelXZSteppStoned8.setVisible(true);
								TextMultSteppStone_Reg1_8.setVisible(true);
	
	       						labelXZSteppStoned9.setVisible(true);
								TextMultSteppStone_Reg1_9.setVisible(true);
	
	       						labelXZSteppStoned10.setVisible(true);
								TextMultSteppStone_Reg1_10.setVisible(true);

								labelXZSteppStoned11.setVisible(true);
								TextMultSteppStone_Reg1_11.setVisible(true);

								labelXZSteppStoned12.setVisible(true);
								TextMultSteppStone_Reg1_12.setVisible(true);
				
								labelXZSteppStoned13.setVisible(true);
								TextMultSteppStone_Reg1_13.setVisible(true);
					
	 		    	  			labelXZSteppStoned14.setVisible(true);
								TextMultSteppStone_Reg1_14.setVisible(true);
	
	    		   				labelXZSteppStoned15.setVisible(true);
								TextMultSteppStone_Reg1_15.setVisible(true);
	
	       						labelXZSteppStoned16.setVisible(false);
								TextMultSteppStone_Reg1_16.setVisible(false);
	
	       						labelXZSteppStoned17.setVisible(false);
								TextMultSteppStone_Reg1_17.setVisible(false);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("3");
								TextMultSteppStone_Reg1_7.setText("4");
								TextMultSteppStone_Reg1_8.setText("2");
								TextMultSteppStone_Reg1_9.setText("3");
								TextMultSteppStone_Reg1_10.setText("5");
								TextMultSteppStone_Reg1_11.setText("1");
								TextMultSteppStone_Reg1_12.setText("3");
								TextMultSteppStone_Reg1_13.setText("2");
								TextMultSteppStone_Reg1_14.setText("4");
								TextMultSteppStone_Reg1_15.setText("2");
								TextMultSteppStone_Reg1_16.setText("");
								TextMultSteppStone_Reg1_17.setText("");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 16) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(true);
								TextMultSteppStone_Reg1_6.setVisible(true);
	
	       						labelXZSteppStoned7.setVisible(true);
								TextMultSteppStone_Reg1_7.setVisible(true);
	
	       						labelXZSteppStoned8.setVisible(true);
								TextMultSteppStone_Reg1_8.setVisible(true);
	
	       						labelXZSteppStoned9.setVisible(true);
								TextMultSteppStone_Reg1_9.setVisible(true);
	
	       						labelXZSteppStoned10.setVisible(true);
								TextMultSteppStone_Reg1_10.setVisible(true);

								labelXZSteppStoned11.setVisible(true);
								TextMultSteppStone_Reg1_11.setVisible(true);

								labelXZSteppStoned12.setVisible(true);
								TextMultSteppStone_Reg1_12.setVisible(true);
				
								labelXZSteppStoned13.setVisible(true);
								TextMultSteppStone_Reg1_13.setVisible(true);
					
	 		    	  			labelXZSteppStoned14.setVisible(true);
								TextMultSteppStone_Reg1_14.setVisible(true);
	
	    		   				labelXZSteppStoned15.setVisible(true);
								TextMultSteppStone_Reg1_15.setVisible(true);
	
	       						labelXZSteppStoned16.setVisible(true);
								TextMultSteppStone_Reg1_16.setVisible(true);
	
	       						labelXZSteppStoned17.setVisible(false);
								TextMultSteppStone_Reg1_17.setVisible(false);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("3");
								TextMultSteppStone_Reg1_7.setText("4");
								TextMultSteppStone_Reg1_8.setText("2");
								TextMultSteppStone_Reg1_9.setText("3");
								TextMultSteppStone_Reg1_10.setText("5");
								TextMultSteppStone_Reg1_11.setText("1");
								TextMultSteppStone_Reg1_12.setText("3");
								TextMultSteppStone_Reg1_13.setText("2");
								TextMultSteppStone_Reg1_14.setText("4");
								TextMultSteppStone_Reg1_15.setText("2");
								TextMultSteppStone_Reg1_16.setText("4");
								TextMultSteppStone_Reg1_17.setText("");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 17) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(true);
								TextMultSteppStone_Reg1_6.setVisible(true);
	
	       						labelXZSteppStoned7.setVisible(true);
								TextMultSteppStone_Reg1_7.setVisible(true);
	
	       						labelXZSteppStoned8.setVisible(true);
								TextMultSteppStone_Reg1_8.setVisible(true);
	
	       						labelXZSteppStoned9.setVisible(true);
								TextMultSteppStone_Reg1_9.setVisible(true);
	
	       						labelXZSteppStoned10.setVisible(true);
								TextMultSteppStone_Reg1_10.setVisible(true);

								labelXZSteppStoned11.setVisible(true);
								TextMultSteppStone_Reg1_11.setVisible(true);

								labelXZSteppStoned12.setVisible(true);
								TextMultSteppStone_Reg1_12.setVisible(true);
				
								labelXZSteppStoned13.setVisible(true);
								TextMultSteppStone_Reg1_13.setVisible(true);
					
	 		    	  			labelXZSteppStoned14.setVisible(true);
								TextMultSteppStone_Reg1_14.setVisible(true);
	
	    		   				labelXZSteppStoned15.setVisible(true);
								TextMultSteppStone_Reg1_15.setVisible(true);
	
	       						labelXZSteppStoned16.setVisible(true);
								TextMultSteppStone_Reg1_16.setVisible(true);
	
	       						labelXZSteppStoned17.setVisible(true);
								TextMultSteppStone_Reg1_17.setVisible(true);
	
	       						labelXZSteppStoned18.setVisible(false);
								TextMultSteppStone_Reg1_18.setVisible(false);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("3");
								TextMultSteppStone_Reg1_7.setText("4");
								TextMultSteppStone_Reg1_8.setText("2");
								TextMultSteppStone_Reg1_9.setText("3");
								TextMultSteppStone_Reg1_10.setText("5");
								TextMultSteppStone_Reg1_11.setText("1");
								TextMultSteppStone_Reg1_12.setText("3");
								TextMultSteppStone_Reg1_13.setText("2");
								TextMultSteppStone_Reg1_14.setText("4");
								TextMultSteppStone_Reg1_15.setText("2");
								TextMultSteppStone_Reg1_16.setText("4");
								TextMultSteppStone_Reg1_17.setText("3");
								TextMultSteppStone_Reg1_18.setText("");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 18) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(true);
								TextMultSteppStone_Reg1_6.setVisible(true);
	
	       						labelXZSteppStoned7.setVisible(true);
								TextMultSteppStone_Reg1_7.setVisible(true);
	
	       						labelXZSteppStoned8.setVisible(true);
								TextMultSteppStone_Reg1_8.setVisible(true);
	
	       						labelXZSteppStoned9.setVisible(true);
								TextMultSteppStone_Reg1_9.setVisible(true);
	
	       						labelXZSteppStoned10.setVisible(true);
								TextMultSteppStone_Reg1_10.setVisible(true);

								labelXZSteppStoned11.setVisible(true);
								TextMultSteppStone_Reg1_11.setVisible(true);

								labelXZSteppStoned12.setVisible(true);
								TextMultSteppStone_Reg1_12.setVisible(true);
				
								labelXZSteppStoned13.setVisible(true);
								TextMultSteppStone_Reg1_13.setVisible(true);
					
	 		    	  			labelXZSteppStoned14.setVisible(true);
								TextMultSteppStone_Reg1_14.setVisible(true);
	
	    		   				labelXZSteppStoned15.setVisible(true);
								TextMultSteppStone_Reg1_15.setVisible(true);
	
	       						labelXZSteppStoned16.setVisible(true);
								TextMultSteppStone_Reg1_16.setVisible(true);
	
	       						labelXZSteppStoned17.setVisible(true);
								TextMultSteppStone_Reg1_17.setVisible(true);
	
	       						labelXZSteppStoned18.setVisible(true);
								TextMultSteppStone_Reg1_18.setVisible(true);
	
	       						labelXZSteppStoned19.setVisible(false);
								TextMultSteppStone_Reg1_19.setVisible(false);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("3");
								TextMultSteppStone_Reg1_7.setText("4");
								TextMultSteppStone_Reg1_8.setText("2");
								TextMultSteppStone_Reg1_9.setText("3");
								TextMultSteppStone_Reg1_10.setText("5");
								TextMultSteppStone_Reg1_11.setText("1");
								TextMultSteppStone_Reg1_12.setText("3");
								TextMultSteppStone_Reg1_13.setText("2");
								TextMultSteppStone_Reg1_14.setText("4");
								TextMultSteppStone_Reg1_15.setText("2");
								TextMultSteppStone_Reg1_16.setText("4");
								TextMultSteppStone_Reg1_17.setText("3");
								TextMultSteppStone_Reg1_18.setText("1");
								TextMultSteppStone_Reg1_19.setText("");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 19) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(true);
								TextMultSteppStone_Reg1_6.setVisible(true);
	
	       						labelXZSteppStoned7.setVisible(true);
								TextMultSteppStone_Reg1_7.setVisible(true);
	
	       						labelXZSteppStoned8.setVisible(true);
								TextMultSteppStone_Reg1_8.setVisible(true);
	
	       						labelXZSteppStoned9.setVisible(true);
								TextMultSteppStone_Reg1_9.setVisible(true);
	
	       						labelXZSteppStoned10.setVisible(true);
								TextMultSteppStone_Reg1_10.setVisible(true);

								labelXZSteppStoned11.setVisible(true);
								TextMultSteppStone_Reg1_11.setVisible(true);

								labelXZSteppStoned12.setVisible(true);
								TextMultSteppStone_Reg1_12.setVisible(true);
				
								labelXZSteppStoned13.setVisible(true);
								TextMultSteppStone_Reg1_13.setVisible(true);
					
	 		    	  			labelXZSteppStoned14.setVisible(true);
								TextMultSteppStone_Reg1_14.setVisible(true);
	
	    		   				labelXZSteppStoned15.setVisible(true);
								TextMultSteppStone_Reg1_15.setVisible(true);
	
	       						labelXZSteppStoned16.setVisible(true);
								TextMultSteppStone_Reg1_16.setVisible(true);
	
	       						labelXZSteppStoned17.setVisible(true);
								TextMultSteppStone_Reg1_17.setVisible(true);
	
	       						labelXZSteppStoned18.setVisible(true);
								TextMultSteppStone_Reg1_18.setVisible(true);
	
	       						labelXZSteppStoned19.setVisible(true);
								TextMultSteppStone_Reg1_19.setVisible(true);
	
	     	  					labelXZSteppStoned20.setVisible(false);
								TextMultSteppStone_Reg1_20.setVisible(false);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("3");
								TextMultSteppStone_Reg1_7.setText("4");
								TextMultSteppStone_Reg1_8.setText("2");
								TextMultSteppStone_Reg1_9.setText("3");
								TextMultSteppStone_Reg1_10.setText("5");
								TextMultSteppStone_Reg1_11.setText("1");
								TextMultSteppStone_Reg1_12.setText("3");
								TextMultSteppStone_Reg1_13.setText("2");
								TextMultSteppStone_Reg1_14.setText("4");
								TextMultSteppStone_Reg1_15.setText("2");
								TextMultSteppStone_Reg1_16.setText("4");
								TextMultSteppStone_Reg1_17.setText("3");
								TextMultSteppStone_Reg1_18.setText("1");
								TextMultSteppStone_Reg1_19.setText("2");
								TextMultSteppStone_Reg1_20.setText("");
								}
							if (Here_the_value_SteppStone == 20) 
								{
								labelXZSteppStoned3.setVisible(true);
								TextMultSteppStone_Reg1_3.setVisible(true);
					
	 		      				labelXZSteppStoned4.setVisible(true);
								TextMultSteppStone_Reg1_4.setVisible(true);
	
	    		   				labelXZSteppStoned5.setVisible(true);
								TextMultSteppStone_Reg1_5.setVisible(true);
	
	       						labelXZSteppStoned6.setVisible(true);
								TextMultSteppStone_Reg1_6.setVisible(true);
	
	       						labelXZSteppStoned7.setVisible(true);
								TextMultSteppStone_Reg1_7.setVisible(true);
	
	       						labelXZSteppStoned8.setVisible(true);
								TextMultSteppStone_Reg1_8.setVisible(true);
	
	       						labelXZSteppStoned9.setVisible(true);
								TextMultSteppStone_Reg1_9.setVisible(true);
	
	       						labelXZSteppStoned10.setVisible(true);
								TextMultSteppStone_Reg1_10.setVisible(true);

								labelXZSteppStoned11.setVisible(true);
								TextMultSteppStone_Reg1_11.setVisible(true);

								labelXZSteppStoned12.setVisible(true);
								TextMultSteppStone_Reg1_12.setVisible(true);
				
								labelXZSteppStoned13.setVisible(true);
								TextMultSteppStone_Reg1_13.setVisible(true);
					
	 		    	  			labelXZSteppStoned14.setVisible(true);
								TextMultSteppStone_Reg1_14.setVisible(true);
	
	    		   				labelXZSteppStoned15.setVisible(true);
								TextMultSteppStone_Reg1_15.setVisible(true);
	
	       						labelXZSteppStoned16.setVisible(true);
								TextMultSteppStone_Reg1_16.setVisible(true);
	
	       						labelXZSteppStoned17.setVisible(true);
								TextMultSteppStone_Reg1_17.setVisible(true);
	
	       						labelXZSteppStoned18.setVisible(true);
								TextMultSteppStone_Reg1_18.setVisible(true);
	
	       						labelXZSteppStoned19.setVisible(true);
								TextMultSteppStone_Reg1_19.setVisible(true);
	
	     	  					labelXZSteppStoned20.setVisible(true);
								TextMultSteppStone_Reg1_20.setVisible(true);
				
								TextMultSteppStone_Reg1_3.setText("1");
								TextMultSteppStone_Reg1_4.setText("2");
								TextMultSteppStone_Reg1_5.setText("2");
								TextMultSteppStone_Reg1_6.setText("3");
								TextMultSteppStone_Reg1_7.setText("4");
								TextMultSteppStone_Reg1_8.setText("2");
								TextMultSteppStone_Reg1_9.setText("3");
								TextMultSteppStone_Reg1_10.setText("5");
								TextMultSteppStone_Reg1_11.setText("1");
								TextMultSteppStone_Reg1_12.setText("3");
								TextMultSteppStone_Reg1_13.setText("2");
								TextMultSteppStone_Reg1_14.setText("4");
								TextMultSteppStone_Reg1_15.setText("2");
								TextMultSteppStone_Reg1_16.setText("4");
								TextMultSteppStone_Reg1_17.setText("3");
								TextMultSteppStone_Reg1_18.setText("1");
								TextMultSteppStone_Reg1_19.setText("2");
								TextMultSteppStone_Reg1_20.setText("3");
								}						
							}
						});
			
			
						//This creates a new button 
      		 			ButtonNextFrameMultSteppStone_SaveNext.setSize(70, 70); // long, high
						runMultSteppStoneSaveNextHandler = new runButtonMultSteppStoneSaveNextHandler();
						ButtonNextFrameMultSteppStone_SaveNext.addActionListener(runMultSteppStoneSaveNextHandler);
       			 		ButtonNextFrameMultSteppStone_SaveNext.setVisible(true); 
       					MultSteppStoneWindow.add(ButtonNextFrameMultSteppStone_SaveNext);

						//This creates a new button 
      	 				ButtonNextFrameMultSteppStone_Back.setSize(70, 70); // long, high
						runMultSteppStoneExitHandler = new runButtonMultSteppStoneExitHandler();
						ButtonNextFrameMultSteppStone_Back.addActionListener(runMultSteppStoneExitHandler);
       			 		ButtonNextFrameMultSteppStone_Back.setVisible(true); 
       					MultSteppStoneWindow.add(ButtonNextFrameMultSteppStone_Back);
						}
					
					label4l.setVisible(true);
					MigrationRate_Cte.setVisible(true);
					MigrationRate_Var.setVisible(true);
					TextMigrationRateProteinEvolverABC.setVisible(true);
					TextMigrationRateProteinEvolverABC.setText("0.003");
					MigrationRate_Cte.setSelected(true);
					label4eeeSD.setVisible(false);
					ProteinEvolverABC_MigrationRate = "#MigrationRate=1 0.005";
					label4ll.setVisible(true);
					ConvergenceDemesProteinEvolverABC_No.setVisible(true);
					ConvergenceDemesProteinEvolverABC_Yes.setVisible(true);
        			}
        		if (seletedMigrationModels == "island-continent")
					{
					ProteinEvolverABC_IslandModel = "#MigrationModel=1 4 12 10 3 4";
					ProteinEvolverABC_SteppStoneModel = "#MigrationModel=2 4 12 10 3 4";
 					ProteinEvolverABC_ContIslandModel = "#MigrationModel=3 4 12 10 3 4";
					label4eeeIsland.setVisible(false);
					label4eeeIsland.setText("");
					label4eeeSteppStone.setVisible(false);
					label4eeeSteppStone.setText("");
					label4eeeContIsland.setVisible(false);
					label4eeeContIsland.setText("");

					label4eeeContIsland.setText("");
					label4eeeContIsland.setVisible(false); // Demog not saved
					
					OneContIsland_int = 1;				
					FirstTimeMultContIslandWindow = FirstTimeMultContIslandWindow + 1;
					MultContIslandWindow.setVisible( true );

			
					if (FirstTimeMultContIslandWindow == 1)
						{
						MultContIslandWindow.setTitle( "Migration under the Continent-Island model" );
						MultContIslandWindow.setSize(500, 1000);
						MultContIslandWindow.setLayout( new GridLayout( 25, 2 ) ); // 16 rows, 4 columns
						MultContIslandWindow.setBackground(Color.white);
						MultContIslandWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      			  		MultContIslandWindow.setLocationRelativeTo(null);
				
						JLabel labelX1 = new JLabel();
						labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1.setText("Migration Continent-Island model");
   			   			MultContIslandWindow.add(labelX1);

						JLabel labelX1b = new JLabel();
						labelX1b.setFont(new Font("Arial", Font.BOLD, 14));
      		 			labelX1b.setText(" ");
     		 			MultContIslandWindow.add(labelX1b);
				
				
						JLabel labelX2 = new JLabel();
      		 			labelX2.setText("Number of demes ");
      					MultContIslandWindow.add(labelX2);

						MultContIslandWindow.add(NumberOfMultContIslandProteinEvolverABC_);
				
				
						JLabel labelX3a = new JLabel();
       					labelX3a.setText("Deme number ");
      					MultContIslandWindow.add(labelX3a);
				
						JLabel labelX3 = new JLabel();
       					labelX3.setText("Deme sample size");
      					MultContIslandWindow.add(labelX3);


  		     			labelXZContIslandd1.setText("1");
     		 			MultContIslandWindow.add(labelXZContIslandd1);
						MultContIslandWindow.add(TextMultContIsland_Reg1_1);
       					TextMultContIsland_Reg1_1.setText("5");

		       			labelXZContIslandd2.setText("2");
     		 			MultContIslandWindow.add(labelXZContIslandd2);
						MultContIslandWindow.add(TextMultContIsland_Reg1_2);
      		 			TextMultContIsland_Reg1_2.setText("1");

		       			labelXZContIslandd3.setText("3");
     		 			MultContIslandWindow.add(labelXZContIslandd3);
						MultContIslandWindow.add(TextMultContIsland_Reg1_3);
      		 			TextMultContIsland_Reg1_3.setText("1");

       					labelXZContIslandd4.setText("4");
      					MultContIslandWindow.add(labelXZContIslandd4);
						MultContIslandWindow.add(TextMultContIsland_Reg1_4);
      		 			TextMultContIsland_Reg1_4.setText("1");
						
       					labelXZContIslandd5.setText("5");
     		 			MultContIslandWindow.add(labelXZContIslandd5);
						MultContIslandWindow.add(TextMultContIsland_Reg1_5);
						
       					labelXZContIslandd6.setText("6");
     		 			MultContIslandWindow.add(labelXZContIslandd6);
						MultContIslandWindow.add(TextMultContIsland_Reg1_6);
				
       					labelXZContIslandd7.setText("7");
     		 			MultContIslandWindow.add(labelXZContIslandd7);
						MultContIslandWindow.add(TextMultContIsland_Reg1_7);
				
   		    			labelXZContIslandd8.setText("8");
     		 			MultContIslandWindow.add(labelXZContIslandd8);
						MultContIslandWindow.add(TextMultContIsland_Reg1_8);
				
       					labelXZContIslandd9.setText("9");
      					MultContIslandWindow.add(labelXZContIslandd9);
						MultContIslandWindow.add(TextMultContIsland_Reg1_9);
				
      		 			labelXZContIslandd10.setText("10");
     		 			MultContIslandWindow.add(labelXZContIslandd10);
						MultContIslandWindow.add(TextMultContIsland_Reg1_10);

						labelXZContIslandd11.setText("11");
     		 			MultContIslandWindow.add(labelXZContIslandd11);
						MultContIslandWindow.add(TextMultContIsland_Reg1_11);

		       			labelXZContIslandd12.setText("12");
     		 			MultContIslandWindow.add(labelXZContIslandd12);
						MultContIslandWindow.add(TextMultContIsland_Reg1_12);

		       			labelXZContIslandd13.setText("13");
     		 			MultContIslandWindow.add(labelXZContIslandd13);
						MultContIslandWindow.add(TextMultContIsland_Reg1_13);

       					labelXZContIslandd14.setText("14");
      					MultContIslandWindow.add(labelXZContIslandd14);
						MultContIslandWindow.add(TextMultContIsland_Reg1_14);
						
       					labelXZContIslandd15.setText("15");
     		 			MultContIslandWindow.add(labelXZContIslandd15);
						MultContIslandWindow.add(TextMultContIsland_Reg1_15);
						
       					labelXZContIslandd16.setText("16");
     		 			MultContIslandWindow.add(labelXZContIslandd16);
						MultContIslandWindow.add(TextMultContIsland_Reg1_16);
				
       					labelXZContIslandd17.setText("17");
     		 			MultContIslandWindow.add(labelXZContIslandd17);
						MultContIslandWindow.add(TextMultContIsland_Reg1_17);
				
   		    			labelXZContIslandd18.setText("18");
     		 			MultContIslandWindow.add(labelXZContIslandd18);
						MultContIslandWindow.add(TextMultContIsland_Reg1_18);
				
       					labelXZContIslandd19.setText("19");
      					MultContIslandWindow.add(labelXZContIslandd19);
						MultContIslandWindow.add(TextMultContIsland_Reg1_19);
				
      		 			labelXZContIslandd20.setText("20");
     		 			MultContIslandWindow.add(labelXZContIslandd20);
						MultContIslandWindow.add(TextMultContIsland_Reg1_20);
				
				
						JLabel labelXA = new JLabel();
       					labelXA.setText(" ");
      					MultContIslandWindow.add(labelXA);
				
						JLabel labelXB = new JLabel();
       					labelXB.setText(" ");
      					MultContIslandWindow.add(labelXB);
						
						
				
						// default
      					labelXZContIslandd5.setVisible(false);
						TextMultContIsland_Reg1_5.setVisible(false);

       					labelXZContIslandd6.setVisible(false);
						TextMultContIsland_Reg1_6.setVisible(false);

       					labelXZContIslandd7.setVisible(false);
						TextMultContIsland_Reg1_7.setVisible(false);

       					labelXZContIslandd8.setVisible(false);
						TextMultContIsland_Reg1_8.setVisible(false);

       					labelXZContIslandd9.setVisible(false);
						TextMultContIsland_Reg1_9.setVisible(false);

       					labelXZContIslandd10.setVisible(false);
						TextMultContIsland_Reg1_10.setVisible(false);

						labelXZContIslandd11.setVisible(false);
						TextMultContIsland_Reg1_11.setVisible(false);

      		 			labelXZContIslandd12.setVisible(false);
						TextMultContIsland_Reg1_12.setVisible(false);

						labelXZContIslandd13.setVisible(false);
						TextMultContIsland_Reg1_13.setVisible(false);

      		 			labelXZContIslandd14.setVisible(false);
						TextMultContIsland_Reg1_14.setVisible(false);

       					labelXZContIslandd15.setVisible(false);
						TextMultContIsland_Reg1_15.setVisible(false);

       					labelXZContIslandd16.setVisible(false);
						TextMultContIsland_Reg1_16.setVisible(false);

       					labelXZContIslandd17.setVisible(false);
						TextMultContIsland_Reg1_17.setVisible(false);

       					labelXZContIslandd18.setVisible(false);
						TextMultContIsland_Reg1_18.setVisible(false);

       					labelXZContIslandd19.setVisible(false);
						TextMultContIsland_Reg1_19.setVisible(false);

       					labelXZContIslandd20.setVisible(false);
						TextMultContIsland_Reg1_20.setVisible(false);
						
						TextNumberOfMultContIslandProteinEvolverABC.setText("4");
						NumberOfMultContIslandProteinEvolverABC_.setSelectedItem("4");
				
						NumberOfMultContIslandProteinEvolverABC_.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox NumberOfMultContIslandProteinEvolverABC_Here = (JComboBox) e.getSource();
							String seletedNumberOfMultContIslandProteinEvolverABC_Here = (String) NumberOfMultContIslandProteinEvolverABC_Here.getSelectedItem();
								
							TextNumberOfMultContIslandProteinEvolverABC.setText(seletedNumberOfMultContIslandProteinEvolverABC_Here); 

							int Here_the_value_ContIsland = 0;
							Here_the_value_ContIsland = Integer.parseInt(seletedNumberOfMultContIslandProteinEvolverABC_Here);
					
							labelXZContIslandd3.setVisible(false);
							TextMultContIsland_Reg1_3.setVisible(false);
					
	 		      			labelXZContIslandd4.setVisible(false);
							TextMultContIsland_Reg1_4.setVisible(false);
	
	    		   			labelXZContIslandd5.setVisible(false);
							TextMultContIsland_Reg1_5.setVisible(false);
	
	       					labelXZContIslandd6.setVisible(false);
							TextMultContIsland_Reg1_6.setVisible(false);
	
	       					labelXZContIslandd7.setVisible(false);
							TextMultContIsland_Reg1_7.setVisible(false);
	
	       					labelXZContIslandd8.setVisible(false);
							TextMultContIsland_Reg1_8.setVisible(false);
	
	       					labelXZContIslandd9.setVisible(false);
							TextMultContIsland_Reg1_9.setVisible(false);
	
	       					labelXZContIslandd10.setVisible(false);
							TextMultContIsland_Reg1_10.setVisible(false);

							labelXZContIslandd11.setVisible(false);
							TextMultContIsland_Reg1_11.setVisible(false);

							labelXZContIslandd12.setVisible(false);
							TextMultContIsland_Reg1_12.setVisible(false);
				
							labelXZContIslandd13.setVisible(false);
							TextMultContIsland_Reg1_13.setVisible(false);
					
	 		      			labelXZContIslandd14.setVisible(false);
							TextMultContIsland_Reg1_14.setVisible(false);
	
	    		   			labelXZContIslandd15.setVisible(false);
							TextMultContIsland_Reg1_15.setVisible(false);
	
	       					labelXZContIslandd16.setVisible(false);
							TextMultContIsland_Reg1_16.setVisible(false);
	
	       					labelXZContIslandd17.setVisible(false);
							TextMultContIsland_Reg1_17.setVisible(false);
	
	       					labelXZContIslandd18.setVisible(false);
							TextMultContIsland_Reg1_18.setVisible(false);
	
	       					labelXZContIslandd19.setVisible(false);
							TextMultContIsland_Reg1_19.setVisible(false);
	
	       					labelXZContIslandd20.setVisible(false);
							TextMultContIsland_Reg1_20.setVisible(false);

				
							TextMultContIsland_Reg1_3.setText("");
							TextMultContIsland_Reg1_4.setText("");
							TextMultContIsland_Reg1_5.setText("");
							TextMultContIsland_Reg1_6.setText("");
							TextMultContIsland_Reg1_7.setText("");
							TextMultContIsland_Reg1_8.setText("");
							TextMultContIsland_Reg1_9.setText("");
							TextMultContIsland_Reg1_10.setText("");
							TextMultContIsland_Reg1_11.setText("");
							TextMultContIsland_Reg1_12.setText("");
							TextMultContIsland_Reg1_13.setText("");
							TextMultContIsland_Reg1_14.setText("");
							TextMultContIsland_Reg1_15.setText("");
							TextMultContIsland_Reg1_16.setText("");
							TextMultContIsland_Reg1_17.setText("");
							TextMultContIsland_Reg1_18.setText("");
							TextMultContIsland_Reg1_19.setText("");
							TextMultContIsland_Reg1_20.setText("");
				
							if (Here_the_value_ContIsland == 2) 
								{
								labelXZContIslandd3.setVisible(false);
								TextMultContIsland_Reg1_3.setVisible(false);
					
	 		    	  			labelXZContIslandd4.setVisible(false);
								TextMultContIsland_Reg1_4.setVisible(false);
		
	    			   			labelXZContIslandd5.setVisible(false);
								TextMultContIsland_Reg1_5.setVisible(false);
		
	    	   					labelXZContIslandd6.setVisible(false);
								TextMultContIsland_Reg1_6.setVisible(false);
		
	    	   					labelXZContIslandd7.setVisible(false);
								TextMultContIsland_Reg1_7.setVisible(false);
		
	    	   					labelXZContIslandd8.setVisible(false);
								TextMultContIsland_Reg1_8.setVisible(false);
		
	    	   					labelXZContIslandd9.setVisible(false);
								TextMultContIsland_Reg1_9.setVisible(false);
		
	    	   					labelXZContIslandd10.setVisible(false);
								TextMultContIsland_Reg1_10.setVisible(false);
	
								labelXZContIslandd11.setVisible(false);
								TextMultContIsland_Reg1_11.setVisible(false);		
		
								labelXZContIslandd12.setVisible(false);
								TextMultContIsland_Reg1_12.setVisible(false);
					
								labelXZContIslandd13.setVisible(false);
								TextMultContIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZContIslandd14.setVisible(false);
								TextMultContIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZContIslandd15.setVisible(false);
								TextMultContIsland_Reg1_15.setVisible(false);
	
	       						labelXZContIslandd16.setVisible(false);
								TextMultContIsland_Reg1_16.setVisible(false);
	
	       						labelXZContIslandd17.setVisible(false);
								TextMultContIsland_Reg1_17.setVisible(false);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("");
								TextMultContIsland_Reg1_4.setText("");
								TextMultContIsland_Reg1_5.setText("");
								TextMultContIsland_Reg1_6.setText("");
								TextMultContIsland_Reg1_7.setText("");
								TextMultContIsland_Reg1_8.setText("");
								TextMultContIsland_Reg1_9.setText("");
								TextMultContIsland_Reg1_10.setText("");
								TextMultContIsland_Reg1_11.setText("");
								TextMultContIsland_Reg1_12.setText("");
								TextMultContIsland_Reg1_13.setText("");
								TextMultContIsland_Reg1_14.setText("");
								TextMultContIsland_Reg1_15.setText("");
								TextMultContIsland_Reg1_16.setText("");
								TextMultContIsland_Reg1_17.setText("");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 3) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(false);
								TextMultContIsland_Reg1_4.setVisible(false);
		
	    			   			labelXZContIslandd5.setVisible(false);
								TextMultContIsland_Reg1_5.setVisible(false);
		
	    	   					labelXZContIslandd6.setVisible(false);
								TextMultContIsland_Reg1_6.setVisible(false);
		
	    	   					labelXZContIslandd7.setVisible(false);
								TextMultContIsland_Reg1_7.setVisible(false);
		
	    	   					labelXZContIslandd8.setVisible(false);
								TextMultContIsland_Reg1_8.setVisible(false);
		
	    	   					labelXZContIslandd9.setVisible(false);
								TextMultContIsland_Reg1_9.setVisible(false);
		
	    	   					labelXZContIslandd10.setVisible(false);
								TextMultContIsland_Reg1_10.setVisible(false);
	
								labelXZContIslandd11.setVisible(false);
								TextMultContIsland_Reg1_11.setVisible(false);		
		
								labelXZContIslandd12.setVisible(false);
								TextMultContIsland_Reg1_12.setVisible(false);
					
								labelXZContIslandd13.setVisible(false);
								TextMultContIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZContIslandd14.setVisible(false);
								TextMultContIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZContIslandd15.setVisible(false);
								TextMultContIsland_Reg1_15.setVisible(false);
	
	       						labelXZContIslandd16.setVisible(false);
								TextMultContIsland_Reg1_16.setVisible(false);
	
	       						labelXZContIslandd17.setVisible(false);
								TextMultContIsland_Reg1_17.setVisible(false);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("");
								TextMultContIsland_Reg1_5.setText("");
								TextMultContIsland_Reg1_6.setText("");
								TextMultContIsland_Reg1_7.setText("");
								TextMultContIsland_Reg1_8.setText("");
								TextMultContIsland_Reg1_9.setText("");
								TextMultContIsland_Reg1_10.setText("");
								TextMultContIsland_Reg1_11.setText("");
								TextMultContIsland_Reg1_12.setText("");
								TextMultContIsland_Reg1_13.setText("");
								TextMultContIsland_Reg1_14.setText("");
								TextMultContIsland_Reg1_15.setText("");
								TextMultContIsland_Reg1_16.setText("");
								TextMultContIsland_Reg1_17.setText("");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 4) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(false);
								TextMultContIsland_Reg1_5.setVisible(false);
		
	    	   					labelXZContIslandd6.setVisible(false);
								TextMultContIsland_Reg1_6.setVisible(false);
		
	    	   					labelXZContIslandd7.setVisible(false);
								TextMultContIsland_Reg1_7.setVisible(false);
		
	    	   					labelXZContIslandd8.setVisible(false);
								TextMultContIsland_Reg1_8.setVisible(false);
		
	    	   					labelXZContIslandd9.setVisible(false);
								TextMultContIsland_Reg1_9.setVisible(false);
		
	    	   					labelXZContIslandd10.setVisible(false);
								TextMultContIsland_Reg1_10.setVisible(false);
	
								labelXZContIslandd11.setVisible(false);
								TextMultContIsland_Reg1_11.setVisible(false);		
		
								labelXZContIslandd12.setVisible(false);
								TextMultContIsland_Reg1_12.setVisible(false);
					
								labelXZContIslandd13.setVisible(false);
								TextMultContIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZContIslandd14.setVisible(false);
								TextMultContIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZContIslandd15.setVisible(false);
								TextMultContIsland_Reg1_15.setVisible(false);
	
	       						labelXZContIslandd16.setVisible(false);
								TextMultContIsland_Reg1_16.setVisible(false);
	
	       						labelXZContIslandd17.setVisible(false);
								TextMultContIsland_Reg1_17.setVisible(false);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("");
								TextMultContIsland_Reg1_6.setText("");
								TextMultContIsland_Reg1_7.setText("");
								TextMultContIsland_Reg1_8.setText("");
								TextMultContIsland_Reg1_9.setText("");
								TextMultContIsland_Reg1_10.setText("");
								TextMultContIsland_Reg1_11.setText("");
								TextMultContIsland_Reg1_12.setText("");
								TextMultContIsland_Reg1_13.setText("");
								TextMultContIsland_Reg1_14.setText("");
								TextMultContIsland_Reg1_15.setText("");
								TextMultContIsland_Reg1_16.setText("");
								TextMultContIsland_Reg1_17.setText("");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 5) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(false);
								TextMultContIsland_Reg1_6.setVisible(false);
		
	    	   					labelXZContIslandd7.setVisible(false);
								TextMultContIsland_Reg1_7.setVisible(false);
		
	    	   					labelXZContIslandd8.setVisible(false);
								TextMultContIsland_Reg1_8.setVisible(false);
		
	    	   					labelXZContIslandd9.setVisible(false);
								TextMultContIsland_Reg1_9.setVisible(false);
		
	    	   					labelXZContIslandd10.setVisible(false);
								TextMultContIsland_Reg1_10.setVisible(false);
	
								labelXZContIslandd11.setVisible(false);
								TextMultContIsland_Reg1_11.setVisible(false);		
		
								labelXZContIslandd12.setVisible(false);
								TextMultContIsland_Reg1_12.setVisible(false);
					
								labelXZContIslandd13.setVisible(false);
								TextMultContIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZContIslandd14.setVisible(false);
								TextMultContIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZContIslandd15.setVisible(false);
								TextMultContIsland_Reg1_15.setVisible(false);
	
	       						labelXZContIslandd16.setVisible(false);
								TextMultContIsland_Reg1_16.setVisible(false);
	
	       						labelXZContIslandd17.setVisible(false);
								TextMultContIsland_Reg1_17.setVisible(false);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("");
								TextMultContIsland_Reg1_7.setText("");
								TextMultContIsland_Reg1_8.setText("");
								TextMultContIsland_Reg1_9.setText("");
								TextMultContIsland_Reg1_10.setText("");
								TextMultContIsland_Reg1_11.setText("");
								TextMultContIsland_Reg1_12.setText("");
								TextMultContIsland_Reg1_13.setText("");
								TextMultContIsland_Reg1_14.setText("");
								TextMultContIsland_Reg1_15.setText("");
								TextMultContIsland_Reg1_16.setText("");
								TextMultContIsland_Reg1_17.setText("");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 6) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(true);
								TextMultContIsland_Reg1_6.setVisible(true);
		
	    	   					labelXZContIslandd7.setVisible(false);
								TextMultContIsland_Reg1_7.setVisible(false);
		
	    	   					labelXZContIslandd8.setVisible(false);
								TextMultContIsland_Reg1_8.setVisible(false);
		
	    	   					labelXZContIslandd9.setVisible(false);
								TextMultContIsland_Reg1_9.setVisible(false);
		
	    	   					labelXZContIslandd10.setVisible(false);
								TextMultContIsland_Reg1_10.setVisible(false);
	
								labelXZContIslandd11.setVisible(false);
								TextMultContIsland_Reg1_11.setVisible(false);		
		
								labelXZContIslandd12.setVisible(false);
								TextMultContIsland_Reg1_12.setVisible(false);
					
								labelXZContIslandd13.setVisible(false);
								TextMultContIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZContIslandd14.setVisible(false);
								TextMultContIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZContIslandd15.setVisible(false);
								TextMultContIsland_Reg1_15.setVisible(false);
	
	       						labelXZContIslandd16.setVisible(false);
								TextMultContIsland_Reg1_16.setVisible(false);
	
	       						labelXZContIslandd17.setVisible(false);
								TextMultContIsland_Reg1_17.setVisible(false);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("2");
								TextMultContIsland_Reg1_7.setText("");
								TextMultContIsland_Reg1_8.setText("");
								TextMultContIsland_Reg1_9.setText("");
								TextMultContIsland_Reg1_10.setText("");
								TextMultContIsland_Reg1_11.setText("");
								TextMultContIsland_Reg1_12.setText("");
								TextMultContIsland_Reg1_13.setText("");
								TextMultContIsland_Reg1_14.setText("");
								TextMultContIsland_Reg1_15.setText("");
								TextMultContIsland_Reg1_16.setText("");
								TextMultContIsland_Reg1_17.setText("");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 7) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(true);
								TextMultContIsland_Reg1_6.setVisible(true);
		
	    	   					labelXZContIslandd7.setVisible(true);
								TextMultContIsland_Reg1_7.setVisible(true);
		
	    	   					labelXZContIslandd8.setVisible(false);
								TextMultContIsland_Reg1_8.setVisible(false);
		
	    	   					labelXZContIslandd9.setVisible(false);
								TextMultContIsland_Reg1_9.setVisible(false);
		
	    	   					labelXZContIslandd10.setVisible(false);
								TextMultContIsland_Reg1_10.setVisible(false);
	
								labelXZContIslandd11.setVisible(false);
								TextMultContIsland_Reg1_11.setVisible(false);		
		
								labelXZContIslandd12.setVisible(false);
								TextMultContIsland_Reg1_12.setVisible(false);
					
								labelXZContIslandd13.setVisible(false);
								TextMultContIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZContIslandd14.setVisible(false);
								TextMultContIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZContIslandd15.setVisible(false);
								TextMultContIsland_Reg1_15.setVisible(false);
	
	       						labelXZContIslandd16.setVisible(false);
								TextMultContIsland_Reg1_16.setVisible(false);
	
	       						labelXZContIslandd17.setVisible(false);
								TextMultContIsland_Reg1_17.setVisible(false);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("2");
								TextMultContIsland_Reg1_7.setText("3");
								TextMultContIsland_Reg1_8.setText("");
								TextMultContIsland_Reg1_9.setText("");
								TextMultContIsland_Reg1_10.setText("");
								TextMultContIsland_Reg1_11.setText("");
								TextMultContIsland_Reg1_12.setText("");
								TextMultContIsland_Reg1_13.setText("");
								TextMultContIsland_Reg1_14.setText("");
								TextMultContIsland_Reg1_15.setText("");
								TextMultContIsland_Reg1_16.setText("");
								TextMultContIsland_Reg1_17.setText("");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 8) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(true);
								TextMultContIsland_Reg1_6.setVisible(true);
		
	    	   					labelXZContIslandd7.setVisible(true);
								TextMultContIsland_Reg1_7.setVisible(true);
		
	    	   					labelXZContIslandd8.setVisible(true);
								TextMultContIsland_Reg1_8.setVisible(true);
		
	    	   					labelXZContIslandd9.setVisible(false);
								TextMultContIsland_Reg1_9.setVisible(false);
		
	    	   					labelXZContIslandd10.setVisible(false);
								TextMultContIsland_Reg1_10.setVisible(false);
	
								labelXZContIslandd11.setVisible(false);
								TextMultContIsland_Reg1_11.setVisible(false);		
		
								labelXZContIslandd12.setVisible(false);
								TextMultContIsland_Reg1_12.setVisible(false);
					
								labelXZContIslandd13.setVisible(false);
								TextMultContIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZContIslandd14.setVisible(false);
								TextMultContIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZContIslandd15.setVisible(false);
								TextMultContIsland_Reg1_15.setVisible(false);
	
	       						labelXZContIslandd16.setVisible(false);
								TextMultContIsland_Reg1_16.setVisible(false);
	
	       						labelXZContIslandd17.setVisible(false);
								TextMultContIsland_Reg1_17.setVisible(false);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("2");
								TextMultContIsland_Reg1_7.setText("3");
								TextMultContIsland_Reg1_8.setText("2");
								TextMultContIsland_Reg1_9.setText("");
								TextMultContIsland_Reg1_10.setText("");
								TextMultContIsland_Reg1_11.setText("");
								TextMultContIsland_Reg1_12.setText("");
								TextMultContIsland_Reg1_13.setText("");
								TextMultContIsland_Reg1_14.setText("");
								TextMultContIsland_Reg1_15.setText("");
								TextMultContIsland_Reg1_16.setText("");
								TextMultContIsland_Reg1_17.setText("");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 9) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(true);
								TextMultContIsland_Reg1_6.setVisible(true);
		
	    	   					labelXZContIslandd7.setVisible(true);
								TextMultContIsland_Reg1_7.setVisible(true);
		
	    	   					labelXZContIslandd8.setVisible(true);
								TextMultContIsland_Reg1_8.setVisible(true);
		
	    	   					labelXZContIslandd9.setVisible(true);
								TextMultContIsland_Reg1_9.setVisible(true);
		
	    	   					labelXZContIslandd10.setVisible(false);
								TextMultContIsland_Reg1_10.setVisible(false);
	
								labelXZContIslandd11.setVisible(false);
								TextMultContIsland_Reg1_11.setVisible(false);		
		
								labelXZContIslandd12.setVisible(false);
								TextMultContIsland_Reg1_12.setVisible(false);
					
								labelXZContIslandd13.setVisible(false);
								TextMultContIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZContIslandd14.setVisible(false);
								TextMultContIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZContIslandd15.setVisible(false);
								TextMultContIsland_Reg1_15.setVisible(false);
	
	       						labelXZContIslandd16.setVisible(false);
								TextMultContIsland_Reg1_16.setVisible(false);
	
	       						labelXZContIslandd17.setVisible(false);
								TextMultContIsland_Reg1_17.setVisible(false);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("2");
								TextMultContIsland_Reg1_7.setText("3");
								TextMultContIsland_Reg1_8.setText("2");
								TextMultContIsland_Reg1_9.setText("2");
								TextMultContIsland_Reg1_10.setText("");
								TextMultContIsland_Reg1_11.setText("");
								TextMultContIsland_Reg1_12.setText("");
								TextMultContIsland_Reg1_13.setText("");
								TextMultContIsland_Reg1_14.setText("");
								TextMultContIsland_Reg1_15.setText("");
								TextMultContIsland_Reg1_16.setText("");
								TextMultContIsland_Reg1_17.setText("");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 10) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(true);
								TextMultContIsland_Reg1_6.setVisible(true);
		
	    	   					labelXZContIslandd7.setVisible(true);
								TextMultContIsland_Reg1_7.setVisible(true);
		
	    	   					labelXZContIslandd8.setVisible(true);
								TextMultContIsland_Reg1_8.setVisible(true);
		
	    	   					labelXZContIslandd9.setVisible(true);
								TextMultContIsland_Reg1_9.setVisible(true);
		
	    	   					labelXZContIslandd10.setVisible(true);
								TextMultContIsland_Reg1_10.setVisible(true);
	
								labelXZContIslandd11.setVisible(false);
								TextMultContIsland_Reg1_11.setVisible(false);		
		
								labelXZContIslandd12.setVisible(false);
								TextMultContIsland_Reg1_12.setVisible(false);
					
								labelXZContIslandd13.setVisible(false);
								TextMultContIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZContIslandd14.setVisible(false);
								TextMultContIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZContIslandd15.setVisible(false);
								TextMultContIsland_Reg1_15.setVisible(false);
	
	       						labelXZContIslandd16.setVisible(false);
								TextMultContIsland_Reg1_16.setVisible(false);
	
	       						labelXZContIslandd17.setVisible(false);
								TextMultContIsland_Reg1_17.setVisible(false);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("2");
								TextMultContIsland_Reg1_7.setText("3");
								TextMultContIsland_Reg1_8.setText("2");
								TextMultContIsland_Reg1_9.setText("2");
								TextMultContIsland_Reg1_10.setText("1");
								TextMultContIsland_Reg1_11.setText("");
								TextMultContIsland_Reg1_12.setText("");
								TextMultContIsland_Reg1_13.setText("");
								TextMultContIsland_Reg1_14.setText("");
								TextMultContIsland_Reg1_15.setText("");
								TextMultContIsland_Reg1_16.setText("");
								TextMultContIsland_Reg1_17.setText("");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}	
							if (Here_the_value_ContIsland == 11) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(true);
								TextMultContIsland_Reg1_6.setVisible(true);
		
	    	   					labelXZContIslandd7.setVisible(true);
								TextMultContIsland_Reg1_7.setVisible(true);
		
	    	   					labelXZContIslandd8.setVisible(true);
								TextMultContIsland_Reg1_8.setVisible(true);
		
	    	   					labelXZContIslandd9.setVisible(true);
								TextMultContIsland_Reg1_9.setVisible(true);
		
	    	   					labelXZContIslandd10.setVisible(true);
								TextMultContIsland_Reg1_10.setVisible(true);
	
								labelXZContIslandd11.setVisible(true);
								TextMultContIsland_Reg1_11.setVisible(true);		
		
								labelXZContIslandd12.setVisible(false);
								TextMultContIsland_Reg1_12.setVisible(false);
					
								labelXZContIslandd13.setVisible(false);
								TextMultContIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZContIslandd14.setVisible(false);
								TextMultContIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZContIslandd15.setVisible(false);
								TextMultContIsland_Reg1_15.setVisible(false);
	
	       						labelXZContIslandd16.setVisible(false);
								TextMultContIsland_Reg1_16.setVisible(false);
	
	       						labelXZContIslandd17.setVisible(false);
								TextMultContIsland_Reg1_17.setVisible(false);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("2");
								TextMultContIsland_Reg1_7.setText("3");
								TextMultContIsland_Reg1_8.setText("2");
								TextMultContIsland_Reg1_9.setText("2");
								TextMultContIsland_Reg1_10.setText("1");
								TextMultContIsland_Reg1_11.setText("1");
								TextMultContIsland_Reg1_12.setText("");
								TextMultContIsland_Reg1_13.setText("");
								TextMultContIsland_Reg1_14.setText("");
								TextMultContIsland_Reg1_15.setText("");
								TextMultContIsland_Reg1_16.setText("");
								TextMultContIsland_Reg1_17.setText("");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 12) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(true);
								TextMultContIsland_Reg1_6.setVisible(true);
		
	    	   					labelXZContIslandd7.setVisible(true);
								TextMultContIsland_Reg1_7.setVisible(true);
		
	    	   					labelXZContIslandd8.setVisible(true);
								TextMultContIsland_Reg1_8.setVisible(true);
		
	    	   					labelXZContIslandd9.setVisible(true);
								TextMultContIsland_Reg1_9.setVisible(true);
		
	    	   					labelXZContIslandd10.setVisible(true);
								TextMultContIsland_Reg1_10.setVisible(true);
	
								labelXZContIslandd11.setVisible(true);
								TextMultContIsland_Reg1_11.setVisible(true);		
		
								labelXZContIslandd12.setVisible(true);
								TextMultContIsland_Reg1_12.setVisible(true);
					
								labelXZContIslandd13.setVisible(false);
								TextMultContIsland_Reg1_13.setVisible(false);
					
	 			      			labelXZContIslandd14.setVisible(false);
								TextMultContIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZContIslandd15.setVisible(false);
								TextMultContIsland_Reg1_15.setVisible(false);
	
	       						labelXZContIslandd16.setVisible(false);
								TextMultContIsland_Reg1_16.setVisible(false);
	
	       						labelXZContIslandd17.setVisible(false);
								TextMultContIsland_Reg1_17.setVisible(false);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("2");
								TextMultContIsland_Reg1_7.setText("3");
								TextMultContIsland_Reg1_8.setText("2");
								TextMultContIsland_Reg1_9.setText("2");
								TextMultContIsland_Reg1_10.setText("1");
								TextMultContIsland_Reg1_11.setText("1");
								TextMultContIsland_Reg1_12.setText("2");
								TextMultContIsland_Reg1_13.setText("");
								TextMultContIsland_Reg1_14.setText("");
								TextMultContIsland_Reg1_15.setText("");
								TextMultContIsland_Reg1_16.setText("");
								TextMultContIsland_Reg1_17.setText("");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 13) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(true);
								TextMultContIsland_Reg1_6.setVisible(true);
		
	    	   					labelXZContIslandd7.setVisible(true);
								TextMultContIsland_Reg1_7.setVisible(true);
		
	    	   					labelXZContIslandd8.setVisible(true);
								TextMultContIsland_Reg1_8.setVisible(true);
		
	    	   					labelXZContIslandd9.setVisible(true);
								TextMultContIsland_Reg1_9.setVisible(true);
		
	    	   					labelXZContIslandd10.setVisible(true);
								TextMultContIsland_Reg1_10.setVisible(true);
	
								labelXZContIslandd11.setVisible(true);
								TextMultContIsland_Reg1_11.setVisible(true);		
		
								labelXZContIslandd12.setVisible(true);
								TextMultContIsland_Reg1_12.setVisible(true);
					
								labelXZContIslandd13.setVisible(true);
								TextMultContIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZContIslandd14.setVisible(false);
								TextMultContIsland_Reg1_14.setVisible(false);
	
	    			   			labelXZContIslandd15.setVisible(false);
								TextMultContIsland_Reg1_15.setVisible(false);
	
	       						labelXZContIslandd16.setVisible(false);
								TextMultContIsland_Reg1_16.setVisible(false);
	
	       						labelXZContIslandd17.setVisible(false);
								TextMultContIsland_Reg1_17.setVisible(false);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("2");
								TextMultContIsland_Reg1_7.setText("3");
								TextMultContIsland_Reg1_8.setText("2");
								TextMultContIsland_Reg1_9.setText("2");
								TextMultContIsland_Reg1_10.setText("1");
								TextMultContIsland_Reg1_11.setText("1");
								TextMultContIsland_Reg1_12.setText("2");
								TextMultContIsland_Reg1_13.setText("2");
								TextMultContIsland_Reg1_14.setText("");
								TextMultContIsland_Reg1_15.setText("");
								TextMultContIsland_Reg1_16.setText("");
								TextMultContIsland_Reg1_17.setText("");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 14) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(true);
								TextMultContIsland_Reg1_6.setVisible(true);
		
	    	   					labelXZContIslandd7.setVisible(true);
								TextMultContIsland_Reg1_7.setVisible(true);
		
	    	   					labelXZContIslandd8.setVisible(true);
								TextMultContIsland_Reg1_8.setVisible(true);
		
	    	   					labelXZContIslandd9.setVisible(true);
								TextMultContIsland_Reg1_9.setVisible(true);
		
	    	   					labelXZContIslandd10.setVisible(true);
								TextMultContIsland_Reg1_10.setVisible(true);
	
								labelXZContIslandd11.setVisible(true);
								TextMultContIsland_Reg1_11.setVisible(true);		
		
								labelXZContIslandd12.setVisible(true);
								TextMultContIsland_Reg1_12.setVisible(true);
					
								labelXZContIslandd13.setVisible(true);
								TextMultContIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZContIslandd14.setVisible(true);
								TextMultContIsland_Reg1_14.setVisible(true);
	
	    			   			labelXZContIslandd15.setVisible(false);
								TextMultContIsland_Reg1_15.setVisible(false);
	
	       						labelXZContIslandd16.setVisible(false);
								TextMultContIsland_Reg1_16.setVisible(false);
	
	       						labelXZContIslandd17.setVisible(false);
								TextMultContIsland_Reg1_17.setVisible(false);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("2");
								TextMultContIsland_Reg1_7.setText("3");
								TextMultContIsland_Reg1_8.setText("2");
								TextMultContIsland_Reg1_9.setText("2");
								TextMultContIsland_Reg1_10.setText("1");
								TextMultContIsland_Reg1_11.setText("1");
								TextMultContIsland_Reg1_12.setText("2");
								TextMultContIsland_Reg1_13.setText("2");
								TextMultContIsland_Reg1_14.setText("1");
								TextMultContIsland_Reg1_15.setText("");
								TextMultContIsland_Reg1_16.setText("");
								TextMultContIsland_Reg1_17.setText("");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 15) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(true);
								TextMultContIsland_Reg1_6.setVisible(true);
		
	    	   					labelXZContIslandd7.setVisible(true);
								TextMultContIsland_Reg1_7.setVisible(true);
		
	    	   					labelXZContIslandd8.setVisible(true);
								TextMultContIsland_Reg1_8.setVisible(true);
		
	    	   					labelXZContIslandd9.setVisible(true);
								TextMultContIsland_Reg1_9.setVisible(true);
		
	    	   					labelXZContIslandd10.setVisible(true);
								TextMultContIsland_Reg1_10.setVisible(true);
	
								labelXZContIslandd11.setVisible(true);
								TextMultContIsland_Reg1_11.setVisible(true);		
		
								labelXZContIslandd12.setVisible(true);
								TextMultContIsland_Reg1_12.setVisible(true);
					
								labelXZContIslandd13.setVisible(true);
								TextMultContIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZContIslandd14.setVisible(true);
								TextMultContIsland_Reg1_14.setVisible(true);
	
	    			   			labelXZContIslandd15.setVisible(true);
								TextMultContIsland_Reg1_15.setVisible(true);
	
	       						labelXZContIslandd16.setVisible(false);
								TextMultContIsland_Reg1_16.setVisible(false);
	
	       						labelXZContIslandd17.setVisible(false);
								TextMultContIsland_Reg1_17.setVisible(false);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("2");
								TextMultContIsland_Reg1_7.setText("3");
								TextMultContIsland_Reg1_8.setText("2");
								TextMultContIsland_Reg1_9.setText("2");
								TextMultContIsland_Reg1_10.setText("1");
								TextMultContIsland_Reg1_11.setText("1");
								TextMultContIsland_Reg1_12.setText("2");
								TextMultContIsland_Reg1_13.setText("2");
								TextMultContIsland_Reg1_14.setText("1");
								TextMultContIsland_Reg1_15.setText("2");
								TextMultContIsland_Reg1_16.setText("");
								TextMultContIsland_Reg1_17.setText("");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 16) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(true);
								TextMultContIsland_Reg1_6.setVisible(true);
		
	    	   					labelXZContIslandd7.setVisible(true);
								TextMultContIsland_Reg1_7.setVisible(true);
		
	    	   					labelXZContIslandd8.setVisible(true);
								TextMultContIsland_Reg1_8.setVisible(true);
		
	    	   					labelXZContIslandd9.setVisible(true);
								TextMultContIsland_Reg1_9.setVisible(true);
		
	    	   					labelXZContIslandd10.setVisible(true);
								TextMultContIsland_Reg1_10.setVisible(true);
	
								labelXZContIslandd11.setVisible(true);
								TextMultContIsland_Reg1_11.setVisible(true);		
		
								labelXZContIslandd12.setVisible(true);
								TextMultContIsland_Reg1_12.setVisible(true);
					
								labelXZContIslandd13.setVisible(true);
								TextMultContIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZContIslandd14.setVisible(true);
								TextMultContIsland_Reg1_14.setVisible(true);
	
	    			   			labelXZContIslandd15.setVisible(true);
								TextMultContIsland_Reg1_15.setVisible(true);
	
	       						labelXZContIslandd16.setVisible(true);
								TextMultContIsland_Reg1_16.setVisible(true);
	
	       						labelXZContIslandd17.setVisible(false);
								TextMultContIsland_Reg1_17.setVisible(false);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("2");
								TextMultContIsland_Reg1_7.setText("3");
								TextMultContIsland_Reg1_8.setText("2");
								TextMultContIsland_Reg1_9.setText("2");
								TextMultContIsland_Reg1_10.setText("1");
								TextMultContIsland_Reg1_11.setText("1");
								TextMultContIsland_Reg1_12.setText("2");
								TextMultContIsland_Reg1_13.setText("2");
								TextMultContIsland_Reg1_14.setText("1");
								TextMultContIsland_Reg1_15.setText("2");
								TextMultContIsland_Reg1_16.setText("2");
								TextMultContIsland_Reg1_17.setText("");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 17) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(true);
								TextMultContIsland_Reg1_6.setVisible(true);
		
	    	   					labelXZContIslandd7.setVisible(true);
								TextMultContIsland_Reg1_7.setVisible(true);
		
	    	   					labelXZContIslandd8.setVisible(true);
								TextMultContIsland_Reg1_8.setVisible(true);
		
	    	   					labelXZContIslandd9.setVisible(true);
								TextMultContIsland_Reg1_9.setVisible(true);
		
	    	   					labelXZContIslandd10.setVisible(true);
								TextMultContIsland_Reg1_10.setVisible(true);
	
								labelXZContIslandd11.setVisible(true);
								TextMultContIsland_Reg1_11.setVisible(true);		
		
								labelXZContIslandd12.setVisible(true);
								TextMultContIsland_Reg1_12.setVisible(true);
					
								labelXZContIslandd13.setVisible(true);
								TextMultContIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZContIslandd14.setVisible(true);
								TextMultContIsland_Reg1_14.setVisible(true);
	
	    			   			labelXZContIslandd15.setVisible(true);
								TextMultContIsland_Reg1_15.setVisible(true);
	
	       						labelXZContIslandd16.setVisible(true);
								TextMultContIsland_Reg1_16.setVisible(true);
	
	       						labelXZContIslandd17.setVisible(true);
								TextMultContIsland_Reg1_17.setVisible(true);
	
	       						labelXZContIslandd18.setVisible(false);
								TextMultContIsland_Reg1_18.setVisible(false);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("2");
								TextMultContIsland_Reg1_7.setText("3");
								TextMultContIsland_Reg1_8.setText("2");
								TextMultContIsland_Reg1_9.setText("2");
								TextMultContIsland_Reg1_10.setText("1");
								TextMultContIsland_Reg1_11.setText("1");
								TextMultContIsland_Reg1_12.setText("2");
								TextMultContIsland_Reg1_13.setText("2");
								TextMultContIsland_Reg1_14.setText("1");
								TextMultContIsland_Reg1_15.setText("2");
								TextMultContIsland_Reg1_16.setText("2");
								TextMultContIsland_Reg1_17.setText("1");
								TextMultContIsland_Reg1_18.setText("");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 18) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(true);
								TextMultContIsland_Reg1_6.setVisible(true);
		
	    	   					labelXZContIslandd7.setVisible(true);
								TextMultContIsland_Reg1_7.setVisible(true);
		
	    	   					labelXZContIslandd8.setVisible(true);
								TextMultContIsland_Reg1_8.setVisible(true);
		
	    	   					labelXZContIslandd9.setVisible(true);
								TextMultContIsland_Reg1_9.setVisible(true);
		
	    	   					labelXZContIslandd10.setVisible(true);
								TextMultContIsland_Reg1_10.setVisible(true);
	
								labelXZContIslandd11.setVisible(true);
								TextMultContIsland_Reg1_11.setVisible(true);		
		
								labelXZContIslandd12.setVisible(true);
								TextMultContIsland_Reg1_12.setVisible(true);
					
								labelXZContIslandd13.setVisible(true);
								TextMultContIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZContIslandd14.setVisible(true);
								TextMultContIsland_Reg1_14.setVisible(true);
	
	    			   			labelXZContIslandd15.setVisible(true);
								TextMultContIsland_Reg1_15.setVisible(true);
	
	       						labelXZContIslandd16.setVisible(true);
								TextMultContIsland_Reg1_16.setVisible(true);
	
	       						labelXZContIslandd17.setVisible(true);
								TextMultContIsland_Reg1_17.setVisible(true);
	
	       						labelXZContIslandd18.setVisible(true);
								TextMultContIsland_Reg1_18.setVisible(true);
	
	       						labelXZContIslandd19.setVisible(false);
								TextMultContIsland_Reg1_19.setVisible(false);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("2");
								TextMultContIsland_Reg1_7.setText("3");
								TextMultContIsland_Reg1_8.setText("2");
								TextMultContIsland_Reg1_9.setText("2");
								TextMultContIsland_Reg1_10.setText("1");
								TextMultContIsland_Reg1_11.setText("1");
								TextMultContIsland_Reg1_12.setText("2");
								TextMultContIsland_Reg1_13.setText("2");
								TextMultContIsland_Reg1_14.setText("1");
								TextMultContIsland_Reg1_15.setText("2");
								TextMultContIsland_Reg1_16.setText("2");
								TextMultContIsland_Reg1_17.setText("1");
								TextMultContIsland_Reg1_18.setText("2");
								TextMultContIsland_Reg1_19.setText("");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 19) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(true);
								TextMultContIsland_Reg1_6.setVisible(true);
		
	    	   					labelXZContIslandd7.setVisible(true);
								TextMultContIsland_Reg1_7.setVisible(true);
		
	    	   					labelXZContIslandd8.setVisible(true);
								TextMultContIsland_Reg1_8.setVisible(true);
		
	    	   					labelXZContIslandd9.setVisible(true);
								TextMultContIsland_Reg1_9.setVisible(true);
		
	    	   					labelXZContIslandd10.setVisible(true);
								TextMultContIsland_Reg1_10.setVisible(true);
	
								labelXZContIslandd11.setVisible(true);
								TextMultContIsland_Reg1_11.setVisible(true);		
		
								labelXZContIslandd12.setVisible(true);
								TextMultContIsland_Reg1_12.setVisible(true);
					
								labelXZContIslandd13.setVisible(true);
								TextMultContIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZContIslandd14.setVisible(true);
								TextMultContIsland_Reg1_14.setVisible(true);
	
	    			   			labelXZContIslandd15.setVisible(true);
								TextMultContIsland_Reg1_15.setVisible(true);
	
	       						labelXZContIslandd16.setVisible(true);
								TextMultContIsland_Reg1_16.setVisible(true);
	
	       						labelXZContIslandd17.setVisible(true);
								TextMultContIsland_Reg1_17.setVisible(true);
	
	       						labelXZContIslandd18.setVisible(true);
								TextMultContIsland_Reg1_18.setVisible(true);
	
	       						labelXZContIslandd19.setVisible(true);
								TextMultContIsland_Reg1_19.setVisible(true);
	
	       						labelXZContIslandd20.setVisible(false);
								TextMultContIsland_Reg1_20.setVisible(false);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("2");
								TextMultContIsland_Reg1_7.setText("3");
								TextMultContIsland_Reg1_8.setText("2");
								TextMultContIsland_Reg1_9.setText("2");
								TextMultContIsland_Reg1_10.setText("1");
								TextMultContIsland_Reg1_11.setText("1");
								TextMultContIsland_Reg1_12.setText("2");
								TextMultContIsland_Reg1_13.setText("2");
								TextMultContIsland_Reg1_14.setText("1");
								TextMultContIsland_Reg1_15.setText("2");
								TextMultContIsland_Reg1_16.setText("2");
								TextMultContIsland_Reg1_17.setText("1");
								TextMultContIsland_Reg1_18.setText("2");
								TextMultContIsland_Reg1_19.setText("3");
								TextMultContIsland_Reg1_20.setText("");
								}
							if (Here_the_value_ContIsland == 20) 
								{
								labelXZContIslandd3.setVisible(true);
								TextMultContIsland_Reg1_3.setVisible(true);
					
	 		    	  			labelXZContIslandd4.setVisible(true);
								TextMultContIsland_Reg1_4.setVisible(true);
		
	    			   			labelXZContIslandd5.setVisible(true);
								TextMultContIsland_Reg1_5.setVisible(true);
		
	    	   					labelXZContIslandd6.setVisible(true);
								TextMultContIsland_Reg1_6.setVisible(true);
		
	    	   					labelXZContIslandd7.setVisible(true);
								TextMultContIsland_Reg1_7.setVisible(true);
		
	    	   					labelXZContIslandd8.setVisible(true);
								TextMultContIsland_Reg1_8.setVisible(true);
		
	    	   					labelXZContIslandd9.setVisible(true);
								TextMultContIsland_Reg1_9.setVisible(true);
		
	    	   					labelXZContIslandd10.setVisible(true);
								TextMultContIsland_Reg1_10.setVisible(true);
	
								labelXZContIslandd11.setVisible(true);
								TextMultContIsland_Reg1_11.setVisible(true);		
		
								labelXZContIslandd12.setVisible(true);
								TextMultContIsland_Reg1_12.setVisible(true);
					
								labelXZContIslandd13.setVisible(true);
								TextMultContIsland_Reg1_13.setVisible(true);
					
	 			      			labelXZContIslandd14.setVisible(true);
								TextMultContIsland_Reg1_14.setVisible(true);
	
	    			   			labelXZContIslandd15.setVisible(true);
								TextMultContIsland_Reg1_15.setVisible(true);
	
	       						labelXZContIslandd16.setVisible(true);
								TextMultContIsland_Reg1_16.setVisible(true);
	
	       						labelXZContIslandd17.setVisible(true);
								TextMultContIsland_Reg1_17.setVisible(true);
	
	       						labelXZContIslandd18.setVisible(true);
								TextMultContIsland_Reg1_18.setVisible(true);
	
	       						labelXZContIslandd19.setVisible(true);
								TextMultContIsland_Reg1_19.setVisible(true);
	
	       						labelXZContIslandd20.setVisible(true);
								TextMultContIsland_Reg1_20.setVisible(true);

				
								TextMultContIsland_Reg1_3.setText("1");
								TextMultContIsland_Reg1_4.setText("1");
								TextMultContIsland_Reg1_5.setText("1");
								TextMultContIsland_Reg1_6.setText("2");
								TextMultContIsland_Reg1_7.setText("3");
								TextMultContIsland_Reg1_8.setText("2");
								TextMultContIsland_Reg1_9.setText("2");
								TextMultContIsland_Reg1_10.setText("1");
								TextMultContIsland_Reg1_11.setText("1");
								TextMultContIsland_Reg1_12.setText("2");
								TextMultContIsland_Reg1_13.setText("2");
								TextMultContIsland_Reg1_14.setText("1");
								TextMultContIsland_Reg1_15.setText("2");
								TextMultContIsland_Reg1_16.setText("2");
								TextMultContIsland_Reg1_17.setText("1");
								TextMultContIsland_Reg1_18.setText("2");
								TextMultContIsland_Reg1_19.setText("3");
								TextMultContIsland_Reg1_20.setText("2");
								}						
							}
						});
			
			
						//This creates a new button 
      		 			ButtonNextFrameMultContIsland_SaveNext.setSize(70, 70); // long, high
						runMultContIslandSaveNextHandler = new runButtonMultContIslandSaveNextHandler();
						ButtonNextFrameMultContIsland_SaveNext.addActionListener(runMultContIslandSaveNextHandler);
       			 		ButtonNextFrameMultContIsland_SaveNext.setVisible(true); 
       					MultContIslandWindow.add(ButtonNextFrameMultContIsland_SaveNext);


						//This creates a new button 
      	 				ButtonNextFrameMultContIsland_Back.setSize(70, 70); // long, high
						runMultContIslandExitHandler = new runButtonMultContIslandExitHandler();
						ButtonNextFrameMultContIsland_Back.addActionListener(runMultContIslandExitHandler);
       			 		ButtonNextFrameMultContIsland_Back.setVisible(true); 
       					MultContIslandWindow.add(ButtonNextFrameMultContIsland_Back);
						}

					label4l.setVisible(true);
					label4ll.setVisible(true);
					MigrationRate_Cte.setVisible(true);
					MigrationRate_Var.setVisible(true);
					TextMigrationRateProteinEvolverABC.setVisible(true);
					TextMigrationRateProteinEvolverABC.setText("0.005");
					MigrationRate_Cte.setSelected(true);
					label4eeeSD.setVisible(false);
					ProteinEvolverABC_MigrationRate = "#MigrationRate=1 0.005";
					ConvergenceDemesProteinEvolverABC_No.setVisible(true);
					ConvergenceDemesProteinEvolverABC_Yes.setVisible(true);
        			} // end cont-island migration model
        			
				}
			});



       		
       	label4ll.setText("Populations/species tree: ");
		label4ll.setLocation(450, 290); // right, down
        label4ll.setSize(350, 30); // long, high
      	panel4.add(label4ll);
		label4ll.setVisible(false);

		/* Multiple user-specified Demographics */
		label4eeeM.setText("");
		label4eeeM.setFont(new Font("Arial", Font.PLAIN, 14));
		label4eeeM.setForeground(Color.darkGray);
		label4eeeM.setLocation(780, 290); // right, down
        label4eeeM.setSize(250, 30); // long, high
      	panel4.add(label4eeeM);
		label4eeeM.setVisible(false);

		ConvergenceDemesProteinEvolverABC_group.add(ConvergenceDemesProteinEvolverABC_No);
		ConvergenceDemesProteinEvolverABC_group.add(ConvergenceDemesProteinEvolverABC_Yes);
		ConvergenceDemesProteinEvolverABC_No.setSelected(true);
		ConvergenceDemesProteinEvolverABC_No.setLocation(640, 290); // right, down
		ConvergenceDemesProteinEvolverABC_No.setSize(60, 30); // long, high
		ConvergenceDemesProteinEvolverABC_Yes.setLocation(710, 290); // right, down
		ConvergenceDemesProteinEvolverABC_Yes.setSize(60, 30); // long, high
		panel4.add(ConvergenceDemesProteinEvolverABC_No);
		panel4.add(ConvergenceDemesProteinEvolverABC_Yes);
		ConvergenceDemesProteinEvolverABC_No.setVisible(false);
		ConvergenceDemesProteinEvolverABC_Yes.setVisible(false);		
		
		ConvergenceDemesProteinEvolverABC_No.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			SavedMultPopStruct = 0;
			ProteinEvolverABC_ConvDemes = "#Species/populationsTree=3 1 2 300 3 4 600 5 6 700";
			label4eeeM.setText("");
			label4eeeM.setVisible(false); // not saved
			
			MultPopStructWindow.setVisible(false);
			MultPopStructWindow.dispose();
			System.out.println("Do not demes tree: " + ProteinEvolverABC_ConvDemes);		
			}
		});
		ConvergenceDemesProteinEvolverABC_Yes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

					SavedMultPopStruct = 0;
					label4eeeM.setText("");
					label4eeeM.setVisible(false); // not saved
					ProteinEvolverABC_ConvDemes = "#Species/populationsTree=3 1 2 300 3 4 600 5 6 700";
					
					FirstTimeMultPopStructWindow = FirstTimeMultPopStructWindow + 1;
					MultPopStructWindow.setVisible( true );

			
					if (FirstTimeMultPopStructWindow == 1)
						{
						MultPopStructWindow.setTitle( "User-specified population/species tree" );
						MultPopStructWindow.setSize(1000, 800);
						MultPopStructWindow.setLayout( new GridLayout( 15, 4 ) ); // 16 rows, 4 columns
						MultPopStructWindow.setBackground(Color.white);
						MultPopStructWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      			  		MultPopStructWindow.setLocationRelativeTo(null);
				
						JLabel labelX1 = new JLabel();
						labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1.setText("Population/species periods");
   			   			MultPopStructWindow.add(labelX1);

						JLabel labelX1b = new JLabel();
						labelX1b.setFont(new Font("Arial", Font.BOLD, 14));
      		 			labelX1b.setText(" ");
     		 			MultPopStructWindow.add(labelX1b);

						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					MultPopStructWindow.add(labelX1c);
      			
      					JLabel labelX1d = new JLabel();
       					labelX1d.setText(" ");
      					MultPopStructWindow.add(labelX1d);
				
				
						JLabel labelX2 = new JLabel();
      		 			labelX2.setText("Number of convergence events ");
      					MultPopStructWindow.add(labelX2);

						MultPopStructWindow.add(NumberOfMultPopStructProteinEvolverABC_);
				
						JLabel labelX2m = new JLabel();
		       			labelX2m.setText(" "); 
      					MultPopStructWindow.add(labelX2m);
				
						JLabel labelX2n = new JLabel();
       					labelX2n.setText(" "); 
      					MultPopStructWindow.add(labelX2n);
				
				
						JLabel labelX3a = new JLabel();
       					labelX3a.setText("Convergence event number ");
      					MultPopStructWindow.add(labelX3a);
				
						JLabel labelX3 = new JLabel();
       					labelX3.setText("Deme ID");
      					MultPopStructWindow.add(labelX3);

						JLabel labelX3bc = new JLabel();
       					labelX3bc.setText("Deme ID");
      					MultPopStructWindow.add(labelX3bc);

						JLabel labelX1e = new JLabel();
       					labelX1e.setText("Time of convergence event");
      					MultPopStructWindow.add(labelX1e);

  		     			labelXZdd1.setText("1");
     		 			MultPopStructWindow.add(labelXZdd1);
						MultPopStructWindow.add(TextMultPopStruct_Reg1_1);
       					TextMultPopStruct_Reg1_1.setText("1");
						MultPopStructWindow.add(TextMultPopStruct_Reg2_1);
       					TextMultPopStruct_Reg2_1.setText("2");
						MultPopStructWindow.add(TextMultPopStructProteinEvolverABC_1);
       					TextMultPopStructProteinEvolverABC_1.setText("200");

		       			labelXZdd2.setText("2");
     		 			MultPopStructWindow.add(labelXZdd2);
						MultPopStructWindow.add(TextMultPopStruct_Reg1_2);
       					TextMultPopStruct_Reg1_2.setText("3");
						MultPopStructWindow.add(TextMultPopStruct_Reg2_2);
       					TextMultPopStruct_Reg2_2.setText("4");
						MultPopStructWindow.add(TextMultPopStructProteinEvolverABC_2);
       					TextMultPopStructProteinEvolverABC_2.setText("350");

		       			labelXZdd3.setText("3");
     		 			MultPopStructWindow.add(labelXZdd3);
						MultPopStructWindow.add(TextMultPopStruct_Reg1_3);
       					TextMultPopStruct_Reg1_3.setText("5");
						MultPopStructWindow.add(TextMultPopStruct_Reg2_3);
       					TextMultPopStruct_Reg2_3.setText("6");
						MultPopStructWindow.add(TextMultPopStructProteinEvolverABC_3);
       					TextMultPopStructProteinEvolverABC_3.setText("500");

       					labelXZdd4.setText("4");
      					MultPopStructWindow.add(labelXZdd4);
						MultPopStructWindow.add(TextMultPopStruct_Reg1_4);
						MultPopStructWindow.add(TextMultPopStruct_Reg2_4);
						MultPopStructWindow.add(TextMultPopStructProteinEvolverABC_4);

       					labelXZdd5.setText("5");
     		 			MultPopStructWindow.add(labelXZdd5);
						MultPopStructWindow.add(TextMultPopStruct_Reg1_5);
						MultPopStructWindow.add(TextMultPopStruct_Reg2_5);
						MultPopStructWindow.add(TextMultPopStructProteinEvolverABC_5);

       					labelXZdd6.setText("6");
     		 			MultPopStructWindow.add(labelXZdd6);
						MultPopStructWindow.add(TextMultPopStruct_Reg1_6);
						MultPopStructWindow.add(TextMultPopStruct_Reg2_6);
						MultPopStructWindow.add(TextMultPopStructProteinEvolverABC_6);
				
       					labelXZdd7.setText("7");
     		 			MultPopStructWindow.add(labelXZdd7);
						MultPopStructWindow.add(TextMultPopStruct_Reg1_7);
						MultPopStructWindow.add(TextMultPopStruct_Reg2_7);
						MultPopStructWindow.add(TextMultPopStructProteinEvolverABC_7);
				
   		    			labelXZdd8.setText("8");
     		 			MultPopStructWindow.add(labelXZdd8);
						MultPopStructWindow.add(TextMultPopStruct_Reg1_8);
						MultPopStructWindow.add(TextMultPopStruct_Reg2_8);
						MultPopStructWindow.add(TextMultPopStructProteinEvolverABC_8);
				
       					labelXZdd9.setText("9");
      					MultPopStructWindow.add(labelXZdd9);
						MultPopStructWindow.add(TextMultPopStruct_Reg1_9);
						MultPopStructWindow.add(TextMultPopStruct_Reg2_9);
						MultPopStructWindow.add(TextMultPopStructProteinEvolverABC_9);
				
      		 			labelXZdd10.setText("10");
     		 			MultPopStructWindow.add(labelXZdd10);
						MultPopStructWindow.add(TextMultPopStruct_Reg1_10);
						MultPopStructWindow.add(TextMultPopStruct_Reg2_10);
						MultPopStructWindow.add(TextMultPopStructProteinEvolverABC_10);
				
				
						JLabel labelXA = new JLabel();
       					labelXA.setText(" ");
      					MultPopStructWindow.add(labelXA);
				
						JLabel labelXB = new JLabel();
       					labelXB.setText(" ");
      					MultPopStructWindow.add(labelXB);
						
						JLabel labelXC = new JLabel();
       					labelXC.setText(" ");
      					MultPopStructWindow.add(labelXC);
						
						JLabel labelXZdd = new JLabel();
       					labelXZdd.setText(" ");
      					MultPopStructWindow.add(labelXZdd);
						
				
						// default
      		 			labelXZdd4.setVisible(false);
						TextMultPopStruct_Reg1_4.setVisible(false);
						TextMultPopStruct_Reg2_4.setVisible(false);
						TextMultPopStructProteinEvolverABC_4.setVisible(false);

       					labelXZdd5.setVisible(false);
						TextMultPopStruct_Reg1_5.setVisible(false);
						TextMultPopStruct_Reg2_5.setVisible(false);
						TextMultPopStructProteinEvolverABC_5.setVisible(false);

       					labelXZdd6.setVisible(false);
						TextMultPopStruct_Reg1_6.setVisible(false);
						TextMultPopStruct_Reg2_6.setVisible(false);
						TextMultPopStructProteinEvolverABC_6.setVisible(false);

       					labelXZdd7.setVisible(false);
						TextMultPopStruct_Reg1_7.setVisible(false);
						TextMultPopStruct_Reg2_7.setVisible(false);
						TextMultPopStructProteinEvolverABC_7.setVisible(false);

       					labelXZdd8.setVisible(false);
						TextMultPopStruct_Reg1_8.setVisible(false);
						TextMultPopStruct_Reg2_8.setVisible(false);
						TextMultPopStructProteinEvolverABC_8.setVisible(false);

       					labelXZdd9.setVisible(false);
						TextMultPopStruct_Reg1_9.setVisible(false);
						TextMultPopStruct_Reg2_9.setVisible(false);
						TextMultPopStructProteinEvolverABC_9.setVisible(false);

       					labelXZdd10.setVisible(false);
						TextMultPopStruct_Reg1_10.setVisible(false);
						TextMultPopStruct_Reg2_10.setVisible(false);
						TextMultPopStructProteinEvolverABC_10.setVisible(false);
						
						TextNumberOfMultPopStructProteinEvolverABC.setText("3");
						NumberOfMultPopStructProteinEvolverABC_.setSelectedItem("3");
				
						NumberOfMultPopStructProteinEvolverABC_.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox NumberOfMultPopStructProteinEvolverABC_Here = (JComboBox) e.getSource();
							String seletedNumberOfMultPopStructProteinEvolverABC_Here = (String) NumberOfMultPopStructProteinEvolverABC_Here.getSelectedItem();
								
							TextNumberOfMultPopStructProteinEvolverABC.setText(seletedNumberOfMultPopStructProteinEvolverABC_Here); 

							int Here_the_value_PopStruct = 0;
							Here_the_value_PopStruct = Integer.parseInt(seletedNumberOfMultPopStructProteinEvolverABC_Here);
					
							labelXZdd2.setVisible(false);
							TextMultPopStruct_Reg1_2.setVisible(false);
							TextMultPopStruct_Reg2_2.setVisible(false);
							TextMultPopStructProteinEvolverABC_2.setVisible(false);

							labelXZdd3.setVisible(false);
							TextMultPopStruct_Reg1_3.setVisible(false);
							TextMultPopStruct_Reg2_3.setVisible(false);
							TextMultPopStructProteinEvolverABC_3.setVisible(false);
					
	 		      			labelXZdd4.setVisible(false);
							TextMultPopStruct_Reg1_4.setVisible(false);
							TextMultPopStruct_Reg2_4.setVisible(false);
							TextMultPopStructProteinEvolverABC_4.setVisible(false);
	
	    		   			labelXZdd5.setVisible(false);
							TextMultPopStruct_Reg1_5.setVisible(false);
							TextMultPopStruct_Reg2_5.setVisible(false);
							TextMultPopStructProteinEvolverABC_5.setVisible(false);
	
	       					labelXZdd6.setVisible(false);
							TextMultPopStruct_Reg1_6.setVisible(false);
							TextMultPopStruct_Reg2_6.setVisible(false);
							TextMultPopStructProteinEvolverABC_6.setVisible(false);
	
	       					labelXZdd7.setVisible(false);
							TextMultPopStruct_Reg1_7.setVisible(false);
							TextMultPopStruct_Reg2_7.setVisible(false);
							TextMultPopStructProteinEvolverABC_7.setVisible(false);
	
	       					labelXZdd8.setVisible(false);
							TextMultPopStruct_Reg1_8.setVisible(false);
							TextMultPopStruct_Reg2_8.setVisible(false);
							TextMultPopStructProteinEvolverABC_8.setVisible(false);
	
	       					labelXZdd9.setVisible(false);
							TextMultPopStruct_Reg1_9.setVisible(false);
							TextMultPopStruct_Reg2_9.setVisible(false);
							TextMultPopStructProteinEvolverABC_9.setVisible(false);
	
	       					labelXZdd10.setVisible(false);
							TextMultPopStruct_Reg1_10.setVisible(false);
							TextMultPopStruct_Reg2_10.setVisible(false);
							TextMultPopStructProteinEvolverABC_10.setVisible(false);
				
							TextMultPopStruct_Reg1_2.setText("");
							TextMultPopStruct_Reg2_2.setText("");
							TextMultPopStructProteinEvolverABC_2.setText("");
							TextMultPopStruct_Reg1_3.setText("");
							TextMultPopStruct_Reg2_3.setText("");
							TextMultPopStructProteinEvolverABC_3.setText("");
							TextMultPopStruct_Reg1_4.setText("");
							TextMultPopStruct_Reg2_4.setText("");
							TextMultPopStructProteinEvolverABC_4.setText("");
							TextMultPopStruct_Reg1_5.setText("");
							TextMultPopStruct_Reg2_5.setText("");
							TextMultPopStructProteinEvolverABC_5.setText("");
							TextMultPopStruct_Reg1_6.setText("");
							TextMultPopStruct_Reg2_6.setText("");
							TextMultPopStructProteinEvolverABC_6.setText("");
							TextMultPopStruct_Reg1_7.setText("");
							TextMultPopStruct_Reg2_7.setText("");
							TextMultPopStructProteinEvolverABC_7.setText("");
							TextMultPopStruct_Reg1_8.setText("");
							TextMultPopStruct_Reg2_8.setText("");
							TextMultPopStructProteinEvolverABC_8.setText("");
							TextMultPopStruct_Reg1_9.setText("");
							TextMultPopStruct_Reg2_9.setText("");
							TextMultPopStructProteinEvolverABC_9.setText("");
							TextMultPopStruct_Reg1_10.setText("");
							TextMultPopStruct_Reg2_10.setText("");
							TextMultPopStructProteinEvolverABC_10.setText("");
					
							if (Here_the_value_PopStruct == 2) 
								{
								labelXZdd2.setVisible(true);
								TextMultPopStruct_Reg1_2.setVisible(true);
								TextMultPopStruct_Reg1_2.setText("3");
								TextMultPopStruct_Reg2_2.setVisible(true);
								TextMultPopStruct_Reg2_2.setText("4");
								TextMultPopStructProteinEvolverABC_2.setVisible(true);
								TextMultPopStructProteinEvolverABC_2.setText("350");
								}
							if (Here_the_value_PopStruct == 3) 
								{
								labelXZdd2.setVisible(true);
								TextMultPopStruct_Reg1_2.setVisible(true);
								TextMultPopStruct_Reg1_2.setText("3");
								TextMultPopStruct_Reg2_2.setVisible(true);
								TextMultPopStruct_Reg2_2.setText("4");
								TextMultPopStructProteinEvolverABC_2.setVisible(true);
								TextMultPopStructProteinEvolverABC_2.setText("350");

								labelXZdd3.setVisible(true);
								TextMultPopStruct_Reg1_3.setVisible(true);
								TextMultPopStruct_Reg1_3.setText("5");
								TextMultPopStruct_Reg2_3.setVisible(true);
								TextMultPopStruct_Reg2_3.setText("6");
								TextMultPopStructProteinEvolverABC_3.setVisible(true);
								TextMultPopStructProteinEvolverABC_3.setText("500");
								}
							if (Here_the_value_PopStruct == 4) 
								{
								labelXZdd2.setVisible(true);
								TextMultPopStruct_Reg1_2.setVisible(true);
								TextMultPopStruct_Reg1_2.setText("3");
								TextMultPopStruct_Reg2_2.setVisible(true);
								TextMultPopStruct_Reg2_2.setText("4");
								TextMultPopStructProteinEvolverABC_2.setVisible(true);
								TextMultPopStructProteinEvolverABC_2.setText("350");

								labelXZdd3.setVisible(true);
								TextMultPopStruct_Reg1_3.setVisible(true);
								TextMultPopStruct_Reg1_3.setText("5");
								TextMultPopStruct_Reg2_3.setVisible(true);
								TextMultPopStruct_Reg2_3.setText("6");
								TextMultPopStructProteinEvolverABC_3.setVisible(true);
								TextMultPopStructProteinEvolverABC_3.setText("500");

								labelXZdd4.setVisible(true);
								TextMultPopStruct_Reg1_4.setVisible(true);
								TextMultPopStruct_Reg1_4.setText("");
								TextMultPopStruct_Reg2_4.setVisible(true);
								TextMultPopStruct_Reg2_4.setText("");
								TextMultPopStructProteinEvolverABC_4.setVisible(true);
								TextMultPopStructProteinEvolverABC_4.setText("");
								}
							if (Here_the_value_PopStruct == 5) 
								{
								labelXZdd2.setVisible(true);
								TextMultPopStruct_Reg1_2.setVisible(true);
								TextMultPopStruct_Reg1_2.setText("3");
								TextMultPopStruct_Reg2_2.setVisible(true);
								TextMultPopStruct_Reg2_2.setText("4");
								TextMultPopStructProteinEvolverABC_2.setVisible(true);
								TextMultPopStructProteinEvolverABC_2.setText("350");

								labelXZdd3.setVisible(true);
								TextMultPopStruct_Reg1_3.setVisible(true);
								TextMultPopStruct_Reg1_3.setText("5");
								TextMultPopStruct_Reg2_3.setVisible(true);
								TextMultPopStruct_Reg2_3.setText("6");
								TextMultPopStructProteinEvolverABC_3.setVisible(true);
								TextMultPopStructProteinEvolverABC_3.setText("500");

								labelXZdd4.setVisible(true);
								TextMultPopStruct_Reg1_4.setVisible(true);
								TextMultPopStruct_Reg1_4.setText("");
								TextMultPopStruct_Reg2_4.setVisible(true);
								TextMultPopStruct_Reg2_4.setText("");
								TextMultPopStructProteinEvolverABC_4.setVisible(true);
								TextMultPopStructProteinEvolverABC_4.setText("");

								labelXZdd5.setVisible(true);
								TextMultPopStruct_Reg1_5.setVisible(true);
								TextMultPopStruct_Reg1_5.setText("");
								TextMultPopStruct_Reg2_5.setVisible(true);
								TextMultPopStruct_Reg2_5.setText("");
								TextMultPopStructProteinEvolverABC_5.setVisible(true);
								TextMultPopStructProteinEvolverABC_5.setText("");
								}
							if (Here_the_value_PopStruct == 6) 
								{
								labelXZdd2.setVisible(true);
								TextMultPopStruct_Reg1_2.setVisible(true);
								TextMultPopStruct_Reg1_2.setText("3");
								TextMultPopStruct_Reg2_2.setVisible(true);
								TextMultPopStruct_Reg2_2.setText("4");
								TextMultPopStructProteinEvolverABC_2.setVisible(true);
								TextMultPopStructProteinEvolverABC_2.setText("350");

								labelXZdd3.setVisible(true);
								TextMultPopStruct_Reg1_3.setVisible(true);
								TextMultPopStruct_Reg1_3.setText("5");
								TextMultPopStruct_Reg2_3.setVisible(true);
								TextMultPopStruct_Reg2_3.setText("6");
								TextMultPopStructProteinEvolverABC_3.setVisible(true);
								TextMultPopStructProteinEvolverABC_3.setText("500");

								labelXZdd4.setVisible(true);
								TextMultPopStruct_Reg1_4.setVisible(true);
								TextMultPopStruct_Reg1_4.setText("");
								TextMultPopStruct_Reg2_4.setVisible(true);
								TextMultPopStruct_Reg2_4.setText("");
								TextMultPopStructProteinEvolverABC_4.setVisible(true);
								TextMultPopStructProteinEvolverABC_4.setText("");

								labelXZdd5.setVisible(true);
								TextMultPopStruct_Reg1_5.setVisible(true);
								TextMultPopStruct_Reg1_5.setText("");
								TextMultPopStruct_Reg2_5.setVisible(true);
								TextMultPopStruct_Reg2_5.setText("");
								TextMultPopStructProteinEvolverABC_5.setVisible(true);
								TextMultPopStructProteinEvolverABC_5.setText("");

								labelXZdd6.setVisible(true);
								TextMultPopStruct_Reg1_6.setVisible(true);
								TextMultPopStruct_Reg1_6.setText("");
								TextMultPopStruct_Reg2_6.setVisible(true);
								TextMultPopStruct_Reg2_6.setText("");
								TextMultPopStructProteinEvolverABC_6.setVisible(true);
								TextMultPopStructProteinEvolverABC_6.setText("");
								}
							if (Here_the_value_PopStruct == 7) 
								{
								labelXZdd2.setVisible(true);
								TextMultPopStruct_Reg1_2.setVisible(true);
								TextMultPopStruct_Reg1_2.setText("3");
								TextMultPopStruct_Reg2_2.setVisible(true);
								TextMultPopStruct_Reg2_2.setText("4");
								TextMultPopStructProteinEvolverABC_2.setVisible(true);
								TextMultPopStructProteinEvolverABC_2.setText("350");

								labelXZdd3.setVisible(true);
								TextMultPopStruct_Reg1_3.setVisible(true);
								TextMultPopStruct_Reg1_3.setText("5");
								TextMultPopStruct_Reg2_3.setVisible(true);
								TextMultPopStruct_Reg2_3.setText("6");
								TextMultPopStructProteinEvolverABC_3.setVisible(true);
								TextMultPopStructProteinEvolverABC_3.setText("500");

								labelXZdd4.setVisible(true);
								TextMultPopStruct_Reg1_4.setVisible(true);
								TextMultPopStruct_Reg1_4.setText("");
								TextMultPopStruct_Reg2_4.setVisible(true);
								TextMultPopStruct_Reg2_4.setText("");
								TextMultPopStructProteinEvolverABC_4.setVisible(true);
								TextMultPopStructProteinEvolverABC_4.setText("");

								labelXZdd5.setVisible(true);
								TextMultPopStruct_Reg1_5.setVisible(true);
								TextMultPopStruct_Reg1_5.setText("");
								TextMultPopStruct_Reg2_5.setVisible(true);
								TextMultPopStruct_Reg2_5.setText("");
								TextMultPopStructProteinEvolverABC_5.setVisible(true);
								TextMultPopStructProteinEvolverABC_5.setText("");

								labelXZdd6.setVisible(true);
								TextMultPopStruct_Reg1_6.setVisible(true);
								TextMultPopStruct_Reg1_6.setText("");
								TextMultPopStruct_Reg2_6.setVisible(true);
								TextMultPopStruct_Reg2_6.setText("");
								TextMultPopStructProteinEvolverABC_6.setVisible(true);
								TextMultPopStructProteinEvolverABC_6.setText("");

								labelXZdd7.setVisible(true);
								TextMultPopStruct_Reg1_7.setVisible(true);
								TextMultPopStruct_Reg1_7.setText("");
								TextMultPopStruct_Reg2_7.setVisible(true);
								TextMultPopStruct_Reg2_7.setText("");
								TextMultPopStructProteinEvolverABC_7.setVisible(true);
								TextMultPopStructProteinEvolverABC_7.setText("");
								}
							if (Here_the_value_PopStruct == 8) 
								{
								labelXZdd2.setVisible(true);
								TextMultPopStruct_Reg1_2.setVisible(true);
								TextMultPopStruct_Reg1_2.setText("3");
								TextMultPopStruct_Reg2_2.setVisible(true);
								TextMultPopStruct_Reg2_2.setText("4");
								TextMultPopStructProteinEvolverABC_2.setVisible(true);
								TextMultPopStructProteinEvolverABC_2.setText("350");

								labelXZdd3.setVisible(true);
								TextMultPopStruct_Reg1_3.setVisible(true);
								TextMultPopStruct_Reg1_3.setText("5");
								TextMultPopStruct_Reg2_3.setVisible(true);
								TextMultPopStruct_Reg2_3.setText("6");
								TextMultPopStructProteinEvolverABC_3.setVisible(true);
								TextMultPopStructProteinEvolverABC_3.setText("500");

								labelXZdd4.setVisible(true);
								TextMultPopStruct_Reg1_4.setVisible(true);
								TextMultPopStruct_Reg1_4.setText("");
								TextMultPopStruct_Reg2_4.setVisible(true);
								TextMultPopStruct_Reg2_4.setText("");
								TextMultPopStructProteinEvolverABC_4.setVisible(true);
								TextMultPopStructProteinEvolverABC_4.setText("");

								labelXZdd5.setVisible(true);
								TextMultPopStruct_Reg1_5.setVisible(true);
								TextMultPopStruct_Reg1_5.setText("");
								TextMultPopStruct_Reg2_5.setVisible(true);
								TextMultPopStruct_Reg2_5.setText("");
								TextMultPopStructProteinEvolverABC_5.setVisible(true);
								TextMultPopStructProteinEvolverABC_5.setText("");

								labelXZdd6.setVisible(true);
								TextMultPopStruct_Reg1_6.setVisible(true);
								TextMultPopStruct_Reg1_6.setText("");
								TextMultPopStruct_Reg2_6.setVisible(true);
								TextMultPopStruct_Reg2_6.setText("");
								TextMultPopStructProteinEvolverABC_6.setVisible(true);
								TextMultPopStructProteinEvolverABC_6.setText("");

								labelXZdd7.setVisible(true);
								TextMultPopStruct_Reg1_7.setVisible(true);
								TextMultPopStruct_Reg1_7.setText("");
								TextMultPopStruct_Reg2_7.setVisible(true);
								TextMultPopStruct_Reg2_7.setText("");
								TextMultPopStructProteinEvolverABC_7.setVisible(true);
								TextMultPopStructProteinEvolverABC_7.setText("");

								labelXZdd8.setVisible(true);
								TextMultPopStruct_Reg1_8.setVisible(true);
								TextMultPopStruct_Reg1_8.setText("");
								TextMultPopStruct_Reg2_8.setVisible(true);
								TextMultPopStruct_Reg2_8.setText("");
								TextMultPopStructProteinEvolverABC_8.setVisible(true);
								TextMultPopStructProteinEvolverABC_8.setText("");
								}
							if (Here_the_value_PopStruct == 9) 
								{
								labelXZdd2.setVisible(true);
								TextMultPopStruct_Reg1_2.setVisible(true);
								TextMultPopStruct_Reg1_2.setText("3");
								TextMultPopStruct_Reg2_2.setVisible(true);
								TextMultPopStruct_Reg2_2.setText("4");
								TextMultPopStructProteinEvolverABC_2.setVisible(true);
								TextMultPopStructProteinEvolverABC_2.setText("350");

								labelXZdd3.setVisible(true);
								TextMultPopStruct_Reg1_3.setVisible(true);
								TextMultPopStruct_Reg1_3.setText("5");
								TextMultPopStruct_Reg2_3.setVisible(true);
								TextMultPopStruct_Reg2_3.setText("6");
								TextMultPopStructProteinEvolverABC_3.setVisible(true);
								TextMultPopStructProteinEvolverABC_3.setText("500");

								labelXZdd4.setVisible(true);
								TextMultPopStruct_Reg1_4.setVisible(true);
								TextMultPopStruct_Reg1_4.setText("");
								TextMultPopStruct_Reg2_4.setVisible(true);
								TextMultPopStruct_Reg2_4.setText("");
								TextMultPopStructProteinEvolverABC_4.setVisible(true);
								TextMultPopStructProteinEvolverABC_4.setText("");

								labelXZdd5.setVisible(true);
								TextMultPopStruct_Reg1_5.setVisible(true);
								TextMultPopStruct_Reg1_5.setText("");
								TextMultPopStruct_Reg2_5.setVisible(true);
								TextMultPopStruct_Reg2_5.setText("");
								TextMultPopStructProteinEvolverABC_5.setVisible(true);
								TextMultPopStructProteinEvolverABC_5.setText("");

								labelXZdd6.setVisible(true);
								TextMultPopStruct_Reg1_6.setVisible(true);
								TextMultPopStruct_Reg1_6.setText("");
								TextMultPopStruct_Reg2_6.setVisible(true);
								TextMultPopStruct_Reg2_6.setText("");
								TextMultPopStructProteinEvolverABC_6.setVisible(true);
								TextMultPopStructProteinEvolverABC_6.setText("");

								labelXZdd7.setVisible(true);
								TextMultPopStruct_Reg1_7.setVisible(true);
								TextMultPopStruct_Reg1_7.setText("");
								TextMultPopStruct_Reg2_7.setVisible(true);
								TextMultPopStruct_Reg2_7.setText("");
								TextMultPopStructProteinEvolverABC_7.setVisible(true);
								TextMultPopStructProteinEvolverABC_7.setText("");

								labelXZdd8.setVisible(true);
								TextMultPopStruct_Reg1_8.setVisible(true);
								TextMultPopStruct_Reg1_8.setText("");
								TextMultPopStruct_Reg2_8.setVisible(true);
								TextMultPopStruct_Reg2_8.setText("");
								TextMultPopStructProteinEvolverABC_8.setVisible(true);
								TextMultPopStructProteinEvolverABC_8.setText("");

								labelXZdd9.setVisible(true);
								TextMultPopStruct_Reg1_9.setVisible(true);
								TextMultPopStruct_Reg1_9.setText("");
								TextMultPopStruct_Reg2_9.setVisible(true);
								TextMultPopStruct_Reg2_9.setText("");
								TextMultPopStructProteinEvolverABC_9.setVisible(true);
								TextMultPopStructProteinEvolverABC_9.setText("");
								}
							if (Here_the_value_PopStruct == 10) 
								{
								labelXZdd2.setVisible(true);
								TextMultPopStruct_Reg1_2.setVisible(true);
								TextMultPopStruct_Reg1_2.setText("3");
								TextMultPopStruct_Reg2_2.setVisible(true);
								TextMultPopStruct_Reg2_2.setText("4");
								TextMultPopStructProteinEvolverABC_2.setVisible(true);
								TextMultPopStructProteinEvolverABC_2.setText("350");

								labelXZdd3.setVisible(true);
								TextMultPopStruct_Reg1_3.setVisible(true);
								TextMultPopStruct_Reg1_3.setText("5");
								TextMultPopStruct_Reg2_3.setVisible(true);
								TextMultPopStruct_Reg2_3.setText("6");
								TextMultPopStructProteinEvolverABC_3.setVisible(true);
								TextMultPopStructProteinEvolverABC_3.setText("500");

								labelXZdd4.setVisible(true);
								TextMultPopStruct_Reg1_4.setVisible(true);
								TextMultPopStruct_Reg1_4.setText("");
								TextMultPopStruct_Reg2_4.setVisible(true);
								TextMultPopStruct_Reg2_4.setText("");
								TextMultPopStructProteinEvolverABC_4.setVisible(true);
								TextMultPopStructProteinEvolverABC_4.setText("");

								labelXZdd5.setVisible(true);
								TextMultPopStruct_Reg1_5.setVisible(true);
								TextMultPopStruct_Reg1_5.setText("");
								TextMultPopStruct_Reg2_5.setVisible(true);
								TextMultPopStruct_Reg2_5.setText("");
								TextMultPopStructProteinEvolverABC_5.setVisible(true);
								TextMultPopStructProteinEvolverABC_5.setText("");

								labelXZdd6.setVisible(true);
								TextMultPopStruct_Reg1_6.setVisible(true);
								TextMultPopStruct_Reg1_6.setText("");
								TextMultPopStruct_Reg2_6.setVisible(true);
								TextMultPopStruct_Reg2_6.setText("");
								TextMultPopStructProteinEvolverABC_6.setVisible(true);
								TextMultPopStructProteinEvolverABC_6.setText("");

								labelXZdd7.setVisible(true);
								TextMultPopStruct_Reg1_7.setVisible(true);
								TextMultPopStruct_Reg1_7.setText("");
								TextMultPopStruct_Reg2_7.setVisible(true);
								TextMultPopStruct_Reg2_7.setText("");
								TextMultPopStructProteinEvolverABC_7.setVisible(true);
								TextMultPopStructProteinEvolverABC_7.setText("");

								labelXZdd8.setVisible(true);
								TextMultPopStruct_Reg1_8.setVisible(true);
								TextMultPopStruct_Reg1_8.setText("");
								TextMultPopStruct_Reg2_8.setVisible(true);
								TextMultPopStruct_Reg2_8.setText("");
								TextMultPopStructProteinEvolverABC_8.setVisible(true);
								TextMultPopStructProteinEvolverABC_8.setText("");

								labelXZdd9.setVisible(true);
								TextMultPopStruct_Reg1_9.setVisible(true);
								TextMultPopStruct_Reg1_9.setText("");
								TextMultPopStruct_Reg2_9.setVisible(true);
								TextMultPopStruct_Reg2_9.setText("");
								TextMultPopStructProteinEvolverABC_9.setVisible(true);
								TextMultPopStructProteinEvolverABC_9.setText("");

								labelXZdd10.setVisible(true);
								TextMultPopStruct_Reg1_10.setVisible(true);
								TextMultPopStruct_Reg1_10.setText("");
								TextMultPopStruct_Reg2_10.setVisible(true);
								TextMultPopStruct_Reg2_10.setText("");
								TextMultPopStructProteinEvolverABC_10.setVisible(true);
								TextMultPopStructProteinEvolverABC_10.setText("");
								}							
							}
						});
			
			
						//This creates a new button 
      		 			ButtonNextFrameMultPopStruct_SaveNext.setSize(70, 70); // long, high
						runMultPopStructSaveNextHandler = new runButtonMultPopStructSaveNextHandler();
						ButtonNextFrameMultPopStruct_SaveNext.addActionListener(runMultPopStructSaveNextHandler);
       			 		ButtonNextFrameMultPopStruct_SaveNext.setVisible(true); 
       					MultPopStructWindow.add(ButtonNextFrameMultPopStruct_SaveNext);

						JLabel labelXE = new JLabel();
       					labelXE.setText(" ");
      					MultPopStructWindow.add(labelXE);
						JLabel labelXq = new JLabel();
       					labelXq.setText(" ");
      					MultPopStructWindow.add(labelXq);

						//This creates a new button 
      	 				ButtonNextFrameMultPopStruct_Back.setSize(70, 70); // long, high
						runMultPopStructExitHandler = new runButtonMultPopStructExitHandler();
						ButtonNextFrameMultPopStruct_Back.addActionListener(runMultPopStructExitHandler);
       			 		ButtonNextFrameMultPopStruct_Back.setVisible(true); 
       					MultPopStructWindow.add(ButtonNextFrameMultPopStruct_Back);
						}

			}
		});


		label4l.setText("Migration rate: ");
		label4l.setLocation(450, 330); // right, down
        label4l.setSize(350, 30); // long, high
      	panel4.add(label4l);
      	label4l.setVisible(false);

		MigrationRate_group.add(MigrationRate_Cte);
		MigrationRate_group.add(MigrationRate_Var);
		MigrationRate_Cte.setSelected(true);
		MigrationRate_Cte.setLocation(570, 330); // right, down
		MigrationRate_Cte.setSize(160, 30); // long, high
		MigrationRate_Var.setLocation(740, 330); // right, down
		MigrationRate_Var.setSize(160, 30); // long, high
		panel4.add(MigrationRate_Cte);
		panel4.add(MigrationRate_Var);
		MigrationRate_Cte.setVisible(false);
		MigrationRate_Var.setVisible(false);
		
		TextMigrationRateProteinEvolverABC.setLocation(900, 330); // right, down
        TextMigrationRateProteinEvolverABC.setSize(80, 30); // long, high
        panel4.add(TextMigrationRateProteinEvolverABC);
		TextMigrationRateProteinEvolverABC.setVisible(false);

		/* Multiple user-specified trees */
		label4eeeSD.setText("");
		label4eeeSD.setFont(new Font("Arial", Font.PLAIN, 14));
		label4eeeSD.setForeground(Color.darkGray);
		label4eeeSD.setLocation(900, 330); // right, down
        label4eeeSD.setSize(200, 30); // long, high
      	panel4.add(label4eeeSD);
		label4eeeSD.setVisible(false);	

		MigrationRate_Cte.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			ProteinEvolverABC_MigrationRate = "#MigrationRate=1 0.002";
			TextMigrationRateProteinEvolverABC.setText("0.002");
			TextMigrationRateProteinEvolverABC.setEditable(true);
			TextMigrationRateProteinEvolverABC.setVisible(true);
			SavedMultMigrationRates = 0;
			label4eeeSD.setText("");
			label4eeeSD.setVisible(false); // MigrationRates not saved
			System.out.println("Migration rate is no saved ");
			System.out.println("SavedMultMigrationRates: " + SavedMultMigrationRates);
			System.out.println("ProteinEvolverABC_MigrationRate: " + ProteinEvolverABC_MigrationRate);
			}
		});
		MigrationRate_Var.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			TextMigrationRateProteinEvolverABC.setText("");
			TextMigrationRateProteinEvolverABC.setEditable(false);
			TextMigrationRateProteinEvolverABC.setVisible(false);
			SavedMultMigrationRates = 1;
			ProteinEvolverABC_MigrationRate = "#MigrationRate=1 0.005";
			
			FirstTimeMultMigrationRatesWindow = FirstTimeMultMigrationRatesWindow + 1;
			MultMigrationRatesWindow.setVisible( true );

			
			if (FirstTimeMultMigrationRatesWindow == 1)
				{
				MultMigrationRatesWindow.setTitle( "Variable Migration rates with time" );
				MultMigrationRatesWindow.setSize(1090, 700);
				MultMigrationRatesWindow.setLayout( new GridLayout( 10, 10 ) ); // 10 rows, 10 columns
				MultMigrationRatesWindow.setBackground(Color.white);
				MultMigrationRatesWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        		MultMigrationRatesWindow.setLocationRelativeTo(null);
				
				JLabel labelXX1 = new JLabel();
				labelXX1.setFont(new Font("Arial", Font.BOLD, 14));
       			labelXX1.setText("Migration rates");
      			MultMigrationRatesWindow.add(labelXX1);
				JLabel labelXX2 = new JLabel();
				labelXX2.setFont(new Font("Arial", Font.BOLD, 14));
       			labelXX2.setText("with time");
      			MultMigrationRatesWindow.add(labelXX2);
				JLabel labelXX3 = new JLabel();
       			labelXX3.setText(" ");
      			MultMigrationRatesWindow.add(labelXX3);
      			JLabel labelXX4 = new JLabel();
       			labelXX4.setText(" ");
      			MultMigrationRatesWindow.add(labelXX4);
				JLabel labelXX5 = new JLabel();
       			labelXX5.setText(" ");
      			MultMigrationRatesWindow.add(labelXX5);
				JLabel labelXX6 = new JLabel();
       			labelXX6.setText(" ");
      			MultMigrationRatesWindow.add(labelXX6);
				JLabel labelXX7 = new JLabel();
       			labelXX7.setText(" ");
      			MultMigrationRatesWindow.add(labelXX7);
				JLabel labelXX8 = new JLabel();
       			labelXX8.setText(" ");
      			MultMigrationRatesWindow.add(labelXX8);
				JLabel labelXX9 = new JLabel();
       			labelXX9.setText(" ");
      			MultMigrationRatesWindow.add(labelXX9);
				JLabel labelXX10 = new JLabel();
       			labelXX10.setText(" ");
      			MultMigrationRatesWindow.add(labelXX10);
				/*JLabel labelXX11 = new JLabel();
       			labelXX11.setText(" ");
      			MultMigrationRatesWindow.add(labelXX11);
				JLabel labelXX12 = new JLabel();
       			labelXX12.setText(" ");
      			MultMigrationRatesWindow.add(labelXX12);
				JLabel labelXX13 = new JLabel();
       			labelXX13.setText(" ");
      			MultMigrationRatesWindow.add(labelXX13);
				JLabel labelXX14 = new JLabel();
       			labelXX14.setText(" ");
      			MultMigrationRatesWindow.add(labelXX14);*/


				JLabel labelX2 = new JLabel();
       			labelX2.setText("Number of rates");
      			MultMigrationRatesWindow.add(labelX2);
				MultMigrationRatesWindow.add(NumberOfMultMigrationRatesProteinEvolverABC_);
				JLabel labelXXB3 = new JLabel();
       			labelXXB3.setText(" ");
      			MultMigrationRatesWindow.add(labelXXB3);
      			JLabel labelXXB4 = new JLabel();
       			labelXXB4.setText(" ");
      			MultMigrationRatesWindow.add(labelXXB4);
				JLabel labelXXB5 = new JLabel();
       			labelXXB5.setText(" ");
      			MultMigrationRatesWindow.add(labelXXB5);
				JLabel labelXXB6 = new JLabel();
       			labelXXB6.setText(" ");
      			MultMigrationRatesWindow.add(labelXXB6);
				JLabel labelXXB7 = new JLabel();
       			labelXXB7.setText(" ");
      			MultMigrationRatesWindow.add(labelXXB7);
				JLabel labelXXB8 = new JLabel();
       			labelXXB8.setText(" ");
      			MultMigrationRatesWindow.add(labelXXB8);
				JLabel labelXXB9 = new JLabel();
       			labelXXB9.setText(" ");
      			MultMigrationRatesWindow.add(labelXXB9);
				JLabel labelXXB10 = new JLabel();
       			labelXXB10.setText(" ");
      			MultMigrationRatesWindow.add(labelXXB10);
				/*JLabel labelXXB11 = new JLabel();
       			labelXXB11.setText(" ");
      			MultMigrationRatesWindow.add(labelXXB11);
				JLabel labelXXB12 = new JLabel();
       			labelXXB12.setText(" ");
      			MultMigrationRatesWindow.add(labelXXB12);
				JLabel labelXXB13 = new JLabel();
       			labelXXB13.setText(" ");
      			MultMigrationRatesWindow.add(labelXXB13);
				JLabel labelXXB14 = new JLabel();
       			labelXXB14.setText(" ");
      			MultMigrationRatesWindow.add(labelXXB14);*/
				

				JLabel labelXXC1 = new JLabel();
       			labelXXC1.setText("Rates #");
      			MultMigrationRatesWindow.add(labelXXC1);
      			JLabel labelXXC2 = new JLabel();
       			labelXXC2.setText("MigRate(T0-T1)");
      			MultMigrationRatesWindow.add(labelXXC2);
				JLabel labelXXC3 = new JLabel();
       			labelXXC3.setText(" Time 1 ");
      			MultMigrationRatesWindow.add(labelXXC3);
      			JLabel labelXXC4 = new JLabel();
       			labelXXC4.setText("MigRate(T1-T2)");
      			MultMigrationRatesWindow.add(labelXXC4);
				JLabel labelXXC5 = new JLabel();
       			labelXXC5.setText(" Time 2 ");
      			MultMigrationRatesWindow.add(labelXXC5);
				JLabel labelXXC6 = new JLabel();
       			labelXXC6.setText("MigRate(T2-T3)");
      			MultMigrationRatesWindow.add(labelXXC6);
				JLabel labelXXC7 = new JLabel();
       			labelXXC7.setText(" Time 3 ");
      			MultMigrationRatesWindow.add(labelXXC7);
				JLabel labelXXC8 = new JLabel();
       			labelXXC8.setText("MigRate(T3-T4)");
      			MultMigrationRatesWindow.add(labelXXC8);
				JLabel labelXXC9 = new JLabel();
       			labelXXC9.setText(" Time 4 ");
      			MultMigrationRatesWindow.add(labelXXC9);
				JLabel labelXXC10 = new JLabel();
       			labelXXC10.setText("MigRate(T4-T5)");
      			MultMigrationRatesWindow.add(labelXXC10);
				/*JLabel labelXXC11 = new JLabel();
       			labelXXC11.setText("  Time 5 ");
      			MultMigrationRatesWindow.add(labelXXC11);
				JLabel labelXXC12 = new JLabel();
       			labelXXC12.setText("MRateT5-T6");
      			MultMigrationRatesWindow.add(labelXXC12);
				JLabel labelXXC13 = new JLabel();
       			labelXXC13.setText("  Time 6 ");
      			MultMigrationRatesWindow.add(labelXXC13);
				JLabel labelXXC14 = new JLabel();
       			labelXXC14.setText("MRateT6-T7");
      			MultMigrationRatesWindow.add(labelXXC14);*/

				
       			labelSD1.setText(" 1");
      			MultMigrationRatesWindow.add(labelSD1);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg1_1);
       			TextMultMigrationRates_Reg1_1.setText("");
				JLabel labelXXD3 = new JLabel();
       			labelXXD3.setText(" ");
      			MultMigrationRatesWindow.add(labelXXD3);
      			JLabel labelXXD4 = new JLabel();
       			labelXXD4.setText(" ");
      			MultMigrationRatesWindow.add(labelXXD4);
				JLabel labelXXD5 = new JLabel();
       			labelXXD5.setText(" ");
      			MultMigrationRatesWindow.add(labelXXD5);
				JLabel labelXXD6 = new JLabel();
       			labelXXD6.setText(" ");
      			MultMigrationRatesWindow.add(labelXXD6);
				JLabel labelXXD7 = new JLabel();
       			labelXXD7.setText(" ");
      			MultMigrationRatesWindow.add(labelXXD7);
				JLabel labelXXD8 = new JLabel();
       			labelXXD8.setText(" ");
      			MultMigrationRatesWindow.add(labelXXD8);
				JLabel labelXXD9 = new JLabel();
       			labelXXD9.setText(" ");
      			MultMigrationRatesWindow.add(labelXXD9);
				JLabel labelXXD10 = new JLabel();
       			labelXXD10.setText(" ");
      			MultMigrationRatesWindow.add(labelXXD10);
				/*JLabel labelXXD11 = new JLabel();
       			labelXXD11.setText(" ");
      			MultMigrationRatesWindow.add(labelXXD11);
				JLabel labelXXD12 = new JLabel();
       			labelXXD12.setText(" ");
      			MultMigrationRatesWindow.add(labelXXD12);
				JLabel labelXXD13 = new JLabel();
       			labelXXD13.setText(" ");
      			MultMigrationRatesWindow.add(labelXXD13);
				JLabel labelXXD14 = new JLabel();
       			labelXXD14.setText(" ");
      			MultMigrationRatesWindow.add(labelXXD14);*/
				
				labelSD2.setText(" 2");
      			MultMigrationRatesWindow.add(labelSD2);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg1_2);
       			TextMultMigrationRates_Reg1_2.setText("0.002");
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg1_2);
       			TextMultMigrationRatesTime_Reg1_2.setText("100");
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg2_2);
       			TextMultMigrationRates_Reg2_2.setText("0.003");
				JLabel labelXXE5 = new JLabel();
       			labelXXE5.setText(" ");
      			MultMigrationRatesWindow.add(labelXXE5);
				JLabel labelXXE6 = new JLabel();
       			labelXXE6.setText(" ");
      			MultMigrationRatesWindow.add(labelXXE6);
				JLabel labelXXE7 = new JLabel();
       			labelXXE7.setText(" ");
      			MultMigrationRatesWindow.add(labelXXE7);
				JLabel labelXXE8 = new JLabel();
       			labelXXE8.setText(" ");
      			MultMigrationRatesWindow.add(labelXXE8);
				JLabel labelXXE9 = new JLabel();
       			labelXXE9.setText(" ");
      			MultMigrationRatesWindow.add(labelXXE9);
				JLabel labelXXE10 = new JLabel();
       			labelXXE10.setText(" ");
      			MultMigrationRatesWindow.add(labelXXE10);
				/*JLabel labelXXE11 = new JLabel();
       			labelXXE11.setText(" ");
      			MultMigrationRatesWindow.add(labelXXE11);
				JLabel labelXXE12 = new JLabel();
       			labelXXE12.setText(" ");
      			MultMigrationRatesWindow.add(labelXXE12);
				JLabel labelXXE13 = new JLabel();
       			labelXXE13.setText(" ");
      			MultMigrationRatesWindow.add(labelXXE13);
				JLabel labelXXE14 = new JLabel();
       			labelXXE14.setText(" ");
      			MultMigrationRatesWindow.add(labelXXE14);*/

				labelSD3.setText(" 3");
      			MultMigrationRatesWindow.add(labelSD3);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg1_3);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg1_3);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg2_3);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg2_3);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg3_3);
				JLabel labelXXF7 = new JLabel();
       			labelXXF7.setText(" ");
      			MultMigrationRatesWindow.add(labelXXF7);
				JLabel labelXXF8 = new JLabel();
       			labelXXF8.setText(" ");
      			MultMigrationRatesWindow.add(labelXXF8);
				JLabel labelXXF9 = new JLabel();
       			labelXXF9.setText(" ");
      			MultMigrationRatesWindow.add(labelXXF9);
				JLabel labelXXF10 = new JLabel();
       			labelXXF10.setText(" ");
      			MultMigrationRatesWindow.add(labelXXF10);
				/*JLabel labelXXF11 = new JLabel();
       			labelXXF11.setText(" ");
      			MultMigrationRatesWindow.add(labelXXF11);
				JLabel labelXXF12 = new JLabel();
       			labelXXF12.setText(" ");
      			MultMigrationRatesWindow.add(labelXXF12);
				JLabel labelXXF13 = new JLabel();
       			labelXXF13.setText(" ");
      			MultMigrationRatesWindow.add(labelXXF13);
				JLabel labelXXF14 = new JLabel();
       			labelXXF14.setText(" ");
      			MultMigrationRatesWindow.add(labelXXF14);*/

				labelSD4.setText(" 4");
      			MultMigrationRatesWindow.add(labelSD4);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg1_4);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg1_4);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg2_4);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg2_4);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg3_4);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg3_4);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg4_4);
				JLabel labelXXG9 = new JLabel();
       			labelXXG9.setText(" ");
      			MultMigrationRatesWindow.add(labelXXG9);
				JLabel labelXXG10 = new JLabel();
       			labelXXG10.setText(" ");
      			MultMigrationRatesWindow.add(labelXXG10);
				/*JLabel labelXXG11 = new JLabel();
       			labelXXG11.setText(" ");
      			MultMigrationRatesWindow.add(labelXXG11);
				JLabel labelXXG12 = new JLabel();
       			labelXXG12.setText(" ");
      			MultMigrationRatesWindow.add(labelXXG12);
				JLabel labelXXG13 = new JLabel();
       			labelXXG13.setText(" ");
      			MultMigrationRatesWindow.add(labelXXG13);
				JLabel labelXXG14 = new JLabel();
       			labelXXG14.setText(" ");
      			MultMigrationRatesWindow.add(labelXXG14);*/

				labelSD5.setText(" 5");
      			MultMigrationRatesWindow.add(labelSD5);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg1_5);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg1_5);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg2_5);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg2_5);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg3_5);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg3_5);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg4_5);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg4_5);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg5_5);
				/*JLabel labelXXF_11 = new JLabel();
       			labelXXF_11.setText(" ");
      			MultMigrationRatesWindow.add(labelXXF_11);
				JLabel labelXXF_12 = new JLabel();
       			labelXXF_12.setText(" ");
      			MultMigrationRatesWindow.add(labelXXF_12);
				JLabel labelXXF_13 = new JLabel();
       			labelXXF_13.setText(" ");
      			MultMigrationRatesWindow.add(labelXXF_13);
				JLabel labelXXF_14 = new JLabel();
       			labelXXF_14.setText(" ");
      			MultMigrationRatesWindow.add(labelXXF_14);*/

				/*labelSD6.setText("6");
      			MultMigrationRatesWindow.add(labelSD6);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg1_6);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg1_6);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg2_6);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg2_6);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg3_6);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg3_6);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg4_6);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg4_6);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg5_6);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg5_6);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg6_6);
				JLabel labelXXH13 = new JLabel();
       			labelXXH13.setText(" ");
      			MultMigrationRatesWindow.add(labelXXH13);
				JLabel labelXXH14 = new JLabel();
       			labelXXH14.setText(" ");
      			MultMigrationRatesWindow.add(labelXXH14);

				labelSD7.setText("7");
      			MultMigrationRatesWindow.add(labelSD7);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg1_7);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg1_7);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg2_7);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg2_7);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg3_7);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg3_7);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg4_7);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg4_7);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg5_7);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg5_7);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg6_7);
				MultMigrationRatesWindow.add(TextMultMigrationRatesTime_Reg6_7);
				MultMigrationRatesWindow.add(TextMultMigrationRates_Reg7_7);*/


       			JLabel labelXV1 = new JLabel();
       			labelXV1.setText(" ");
      			MultMigrationRatesWindow.add(labelXV1);
				JLabel labelXV2 = new JLabel();
       			labelXV2.setText(" ");
      			MultMigrationRatesWindow.add(labelXV2);
				JLabel labelXV3 = new JLabel();
       			labelXV3.setText(" ");
      			MultMigrationRatesWindow.add(labelXV3);
      			JLabel labelXV4 = new JLabel();
       			labelXV4.setText(" ");
      			MultMigrationRatesWindow.add(labelXV4);
				JLabel labelXV5 = new JLabel();
       			labelXV5.setText(" ");
      			MultMigrationRatesWindow.add(labelXV5);
				JLabel labelXV6 = new JLabel();
       			labelXV6.setText(" ");
      			MultMigrationRatesWindow.add(labelXV6);
				JLabel labelXV7 = new JLabel();
       			labelXV7.setText(" ");
      			MultMigrationRatesWindow.add(labelXV7);
				JLabel labelXV8 = new JLabel();
       			labelXV8.setText(" ");
      			MultMigrationRatesWindow.add(labelXV8);
				JLabel labelXV9 = new JLabel();
       			labelXV9.setText(" ");
      			MultMigrationRatesWindow.add(labelXV9);
				JLabel labelXV10 = new JLabel();
       			labelXV10.setText(" ");
      			MultMigrationRatesWindow.add(labelXV10);
				/*JLabel labelXV11 = new JLabel();
       			labelXV11.setText(" ");
      			MultMigrationRatesWindow.add(labelXV11);
				JLabel labelXV12 = new JLabel();
       			labelXV12.setText(" ");
      			MultMigrationRatesWindow.add(labelXV12);
				JLabel labelXV13 = new JLabel();
       			labelXV13.setText(" ");
      			MultMigrationRatesWindow.add(labelXV13);
				JLabel labelXV14 = new JLabel();
       			labelXV14.setText(" ");
      			MultMigrationRatesWindow.add(labelXV14);*/
						
				
				// default
       			labelSD1.setVisible(false);
       			labelSD3.setVisible(false);
				labelSD4.setVisible(false);
				labelSD5.setVisible(false);
				/*labelSD6.setVisible(false);
				labelSD7.setVisible(false);*/
				TextMultMigrationRates_Reg1_1.setVisible(false);
				TextMultMigrationRates_Reg1_3.setVisible(false);
				TextMultMigrationRatesTime_Reg1_3.setVisible(false);
				TextMultMigrationRates_Reg2_3.setVisible(false);
				TextMultMigrationRatesTime_Reg2_3.setVisible(false);
				TextMultMigrationRates_Reg3_3.setVisible(false);
				TextMultMigrationRates_Reg1_4.setVisible(false);
				TextMultMigrationRatesTime_Reg1_4.setVisible(false);
				TextMultMigrationRates_Reg2_4.setVisible(false);
				TextMultMigrationRatesTime_Reg2_4.setVisible(false);
				TextMultMigrationRates_Reg3_4.setVisible(false);
				TextMultMigrationRatesTime_Reg3_4.setVisible(false);
				TextMultMigrationRates_Reg4_4.setVisible(false);
				TextMultMigrationRates_Reg1_5.setVisible(false);
				TextMultMigrationRatesTime_Reg1_5.setVisible(false);
				TextMultMigrationRates_Reg2_5.setVisible(false);
				TextMultMigrationRatesTime_Reg2_5.setVisible(false);
				TextMultMigrationRates_Reg3_5.setVisible(false);
				TextMultMigrationRatesTime_Reg3_5.setVisible(false);
				TextMultMigrationRates_Reg4_5.setVisible(false);
				TextMultMigrationRatesTime_Reg4_5.setVisible(false);
				TextMultMigrationRates_Reg5_5.setVisible(false);
				/*TextMultMigrationRates_Reg1_6.setVisible(false);
				TextMultMigrationRatesTime_Reg1_6.setVisible(false);
				TextMultMigrationRates_Reg2_6.setVisible(false);
				TextMultMigrationRatesTime_Reg2_6.setVisible(false);
				TextMultMigrationRates_Reg3_6.setVisible(false);
				TextMultMigrationRatesTime_Reg3_6.setVisible(false);
				TextMultMigrationRates_Reg4_6.setVisible(false);
				TextMultMigrationRatesTime_Reg4_6.setVisible(false);
				TextMultMigrationRates_Reg5_6.setVisible(false);
				TextMultMigrationRatesTime_Reg5_6.setVisible(false);
				TextMultMigrationRates_Reg6_6.setVisible(false);
				TextMultMigrationRates_Reg1_7.setVisible(false);
				TextMultMigrationRatesTime_Reg1_7.setVisible(false);
				TextMultMigrationRates_Reg2_7.setVisible(false);
				TextMultMigrationRatesTime_Reg2_7.setVisible(false);
				TextMultMigrationRates_Reg3_7.setVisible(false);
				TextMultMigrationRatesTime_Reg3_7.setVisible(false);
				TextMultMigrationRates_Reg4_7.setVisible(false);
				TextMultMigrationRatesTime_Reg4_7.setVisible(false);
				TextMultMigrationRates_Reg5_7.setVisible(false);
				TextMultMigrationRatesTime_Reg5_7.setVisible(false);
				TextMultMigrationRates_Reg6_7.setVisible(false);
				TextMultMigrationRatesTime_Reg6_7.setVisible(false);
				TextMultMigrationRates_Reg7_7.setVisible(false);*/
				TextNumberOfMultMigrationRatesProteinEvolverABC.setText("2");
				NumberOfMultMigrationRatesProteinEvolverABC_.setSelectedItem("2");
								
				
				NumberOfMultMigrationRatesProteinEvolverABC_.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) 
					{
					JComboBox NumberOfMultMigrationRatesProteinEvolverABC_Here = (JComboBox) e.getSource();
					String seletedNumberOfMultMigrationRatesProteinEvolverABC_Here = (String) NumberOfMultMigrationRatesProteinEvolverABC_Here.getSelectedItem();
								
					TextNumberOfMultMigrationRatesProteinEvolverABC.setText(seletedNumberOfMultMigrationRatesProteinEvolverABC_Here); 

					int Here_the_value_MigrationRates = 0;
					Here_the_value_MigrationRates = Integer.parseInt(seletedNumberOfMultMigrationRatesProteinEvolverABC_Here);
					
					labelSD1.setVisible(false);
					labelSD2.setVisible(false);
   	    			labelSD3.setVisible(false);
					labelSD4.setVisible(false);
					labelSD5.setVisible(false);
					/*labelSD6.setVisible(false);
					labelSD7.setVisible(false);*/
					TextMultMigrationRates_Reg1_1.setVisible(false);
					TextMultMigrationRates_Reg1_2.setVisible(false);
					TextMultMigrationRatesTime_Reg1_2.setVisible(false);
					TextMultMigrationRates_Reg2_2.setVisible(false);
					TextMultMigrationRates_Reg1_3.setVisible(false);
					TextMultMigrationRatesTime_Reg1_3.setVisible(false);
					TextMultMigrationRates_Reg2_3.setVisible(false);
					TextMultMigrationRatesTime_Reg2_3.setVisible(false);
					TextMultMigrationRates_Reg3_3.setVisible(false);
					TextMultMigrationRates_Reg1_4.setVisible(false);
					TextMultMigrationRatesTime_Reg1_4.setVisible(false);
					TextMultMigrationRates_Reg2_4.setVisible(false);
					TextMultMigrationRatesTime_Reg2_4.setVisible(false);
					TextMultMigrationRates_Reg3_4.setVisible(false);
					TextMultMigrationRatesTime_Reg3_4.setVisible(false);
					TextMultMigrationRates_Reg4_4.setVisible(false);
					TextMultMigrationRates_Reg1_5.setVisible(false);
					TextMultMigrationRatesTime_Reg1_5.setVisible(false);
					TextMultMigrationRates_Reg2_5.setVisible(false);
					TextMultMigrationRatesTime_Reg2_5.setVisible(false);
					TextMultMigrationRates_Reg3_5.setVisible(false);
					TextMultMigrationRatesTime_Reg3_5.setVisible(false);
					TextMultMigrationRates_Reg4_5.setVisible(false);
					TextMultMigrationRatesTime_Reg4_5.setVisible(false);
					TextMultMigrationRates_Reg5_5.setVisible(false);
					/*TextMultMigrationRates_Reg1_6.setVisible(false);
					TextMultMigrationRatesTime_Reg1_6.setVisible(false);
					TextMultMigrationRates_Reg2_6.setVisible(false);
					TextMultMigrationRatesTime_Reg2_6.setVisible(false);
					TextMultMigrationRates_Reg3_6.setVisible(false);
					TextMultMigrationRatesTime_Reg3_6.setVisible(false);
					TextMultMigrationRates_Reg4_6.setVisible(false);
					TextMultMigrationRatesTime_Reg4_6.setVisible(false);
					TextMultMigrationRates_Reg5_6.setVisible(false);
					TextMultMigrationRatesTime_Reg5_6.setVisible(false);
					TextMultMigrationRates_Reg6_6.setVisible(false);
					TextMultMigrationRates_Reg1_7.setVisible(false);
					TextMultMigrationRatesTime_Reg1_7.setVisible(false);
					TextMultMigrationRates_Reg2_7.setVisible(false);
					TextMultMigrationRatesTime_Reg2_7.setVisible(false);
					TextMultMigrationRates_Reg3_7.setVisible(false);
					TextMultMigrationRatesTime_Reg3_7.setVisible(false);
					TextMultMigrationRates_Reg4_7.setVisible(false);
					TextMultMigrationRatesTime_Reg4_7.setVisible(false);
					TextMultMigrationRates_Reg5_7.setVisible(false);
					TextMultMigrationRatesTime_Reg5_7.setVisible(false);
					TextMultMigrationRates_Reg6_7.setVisible(false);
					TextMultMigrationRatesTime_Reg6_7.setVisible(false);
					TextMultMigrationRates_Reg7_7.setVisible(false);*/
					TextMultMigrationRates_Reg1_1.setText("");
					TextMultMigrationRates_Reg1_2.setText("");
					TextMultMigrationRatesTime_Reg1_2.setText("");
					TextMultMigrationRates_Reg2_2.setText("");
					TextMultMigrationRates_Reg1_3.setText("");
					TextMultMigrationRatesTime_Reg1_3.setText("");
					TextMultMigrationRates_Reg2_3.setText("");
					TextMultMigrationRatesTime_Reg2_3.setText("");
					TextMultMigrationRates_Reg3_3.setText("");
					TextMultMigrationRates_Reg1_4.setText("");
					TextMultMigrationRatesTime_Reg1_4.setText("");
					TextMultMigrationRates_Reg2_4.setText("");
					TextMultMigrationRatesTime_Reg2_4.setText("");
					TextMultMigrationRates_Reg3_4.setText("");
					TextMultMigrationRatesTime_Reg3_4.setText("");
					TextMultMigrationRates_Reg4_4.setText("");
					TextMultMigrationRates_Reg1_5.setText("");
					TextMultMigrationRatesTime_Reg1_5.setText("");
					TextMultMigrationRates_Reg2_5.setText("");
					TextMultMigrationRatesTime_Reg2_5.setText("");
					TextMultMigrationRates_Reg3_5.setText("");
					TextMultMigrationRatesTime_Reg3_5.setText("");
					TextMultMigrationRates_Reg4_5.setText("");
					TextMultMigrationRatesTime_Reg4_5.setText("");
					TextMultMigrationRates_Reg5_5.setText("");
					/*TextMultMigrationRatesTime_Reg1_6.setText(" ");
					TextMultMigrationRates_Reg2_6.setText(" ");
					TextMultMigrationRatesTime_Reg2_6.setText(" ");
					TextMultMigrationRates_Reg3_6.setText(" ");
					TextMultMigrationRatesTime_Reg3_6.setText(" ");
					TextMultMigrationRates_Reg4_6.setText(" ");
					TextMultMigrationRatesTime_Reg4_6.setText(" ");
					TextMultMigrationRates_Reg5_6.setText(" ");
					TextMultMigrationRatesTime_Reg5_6.setText(" ");
					TextMultMigrationRates_Reg6_6.setText(" ");
					TextMultMigrationRatesTime_Reg1_7.setText(" ");
					TextMultMigrationRates_Reg2_7.setText(" ");
					TextMultMigrationRatesTime_Reg2_7.setText(" ");
					TextMultMigrationRates_Reg3_7.setText(" ");
					TextMultMigrationRatesTime_Reg3_7.setText(" ");
					TextMultMigrationRates_Reg4_7.setText(" ");
					TextMultMigrationRatesTime_Reg4_7.setText(" ");
					TextMultMigrationRates_Reg5_7.setText(" ");
					TextMultMigrationRatesTime_Reg5_7.setText(" ");
					TextMultMigrationRates_Reg6_7.setText(" ");
					TextMultMigrationRatesTime_Reg6_7.setText(" ");
					TextMultMigrationRates_Reg7_7.setText(" ");*/
		
					if (Here_the_value_MigrationRates == 1) 
						{
						labelSD1.setVisible(true);
						TextMultMigrationRates_Reg1_1.setVisible(true);
						TextMultMigrationRates_Reg1_1.setText("0.002");
						}
					if (Here_the_value_MigrationRates == 2) 
						{
						labelSD2.setVisible(true);
						TextMultMigrationRates_Reg1_2.setVisible(true);
						TextMultMigrationRatesTime_Reg1_2.setVisible(true);
						TextMultMigrationRates_Reg2_2.setVisible(true);
						TextMultMigrationRates_Reg1_2.setText("0.002");
						TextMultMigrationRatesTime_Reg1_2.setText("100");
						TextMultMigrationRates_Reg2_2.setText("0.003");

						}
					if (Here_the_value_MigrationRates == 3) 
						{
						labelSD3.setVisible(true);
						TextMultMigrationRates_Reg1_3.setVisible(true);
						TextMultMigrationRatesTime_Reg1_3.setVisible(true);
						TextMultMigrationRates_Reg2_3.setVisible(true);
						TextMultMigrationRatesTime_Reg2_3.setVisible(true);
						TextMultMigrationRates_Reg3_3.setVisible(true);
						TextMultMigrationRates_Reg1_3.setText("0.002");
						TextMultMigrationRatesTime_Reg1_3.setText("100");
						TextMultMigrationRates_Reg2_3.setText("0.001");
						TextMultMigrationRatesTime_Reg2_3.setText("200");
						TextMultMigrationRates_Reg3_3.setText("0.003");
						}
					if (Here_the_value_MigrationRates == 4) 
						{
						labelSD4.setVisible(true);
						TextMultMigrationRates_Reg1_4.setText("0.002");
						TextMultMigrationRatesTime_Reg1_4.setText("100");
						TextMultMigrationRates_Reg2_4.setText("0.001");
						TextMultMigrationRatesTime_Reg2_4.setText("200");
						TextMultMigrationRates_Reg3_4.setText("0.003");
						TextMultMigrationRatesTime_Reg3_4.setText("450");
						TextMultMigrationRates_Reg4_4.setText("0.004");
						TextMultMigrationRates_Reg1_4.setVisible(true);
						TextMultMigrationRatesTime_Reg1_4.setVisible(true);
						TextMultMigrationRates_Reg2_4.setVisible(true);
						TextMultMigrationRatesTime_Reg2_4.setVisible(true);
						TextMultMigrationRates_Reg3_4.setVisible(true);
						TextMultMigrationRatesTime_Reg3_4.setVisible(true);
						TextMultMigrationRates_Reg4_4.setVisible(true);
						}
					if (Here_the_value_MigrationRates == 5) 
						{
						labelSD5.setVisible(true);
						TextMultMigrationRates_Reg1_5.setText("0.002");
						TextMultMigrationRatesTime_Reg1_5.setText("100");
						TextMultMigrationRates_Reg2_5.setText("0.001");
						TextMultMigrationRatesTime_Reg2_5.setText("200");
						TextMultMigrationRates_Reg3_5.setText("0.003");
						TextMultMigrationRatesTime_Reg3_5.setText("450");
						TextMultMigrationRates_Reg4_5.setText("0.004");
						TextMultMigrationRatesTime_Reg4_5.setText("600");
						TextMultMigrationRates_Reg5_5.setText("0.002");
						TextMultMigrationRates_Reg1_5.setVisible(true);
						TextMultMigrationRatesTime_Reg1_5.setVisible(true);
						TextMultMigrationRates_Reg2_5.setVisible(true);
						TextMultMigrationRatesTime_Reg2_5.setVisible(true);
						TextMultMigrationRates_Reg3_5.setVisible(true);
						TextMultMigrationRatesTime_Reg3_5.setVisible(true);
						TextMultMigrationRates_Reg4_5.setVisible(true);
						TextMultMigrationRatesTime_Reg4_5.setVisible(true);
						TextMultMigrationRates_Reg5_5.setVisible(true);
						}
					/*if (Here_the_value_MigrationRates == 6) 
						{
						labelSD6.setVisible(true);
						TextMultMigrationRates_Reg1_6.setVisible(true);
						TextMultMigrationRatesTime_Reg1_6.setVisible(true);
						TextMultMigrationRates_Reg2_6.setVisible(true);
						TextMultMigrationRatesTime_Reg2_6.setVisible(true);
						TextMultMigrationRates_Reg3_6.setVisible(true);
						TextMultMigrationRatesTime_Reg3_6.setVisible(true);
						TextMultMigrationRates_Reg4_6.setVisible(true);
						TextMultMigrationRatesTime_Reg4_6.setVisible(true);
						TextMultMigrationRates_Reg5_6.setVisible(true);
						TextMultMigrationRatesTime_Reg5_6.setVisible(true);
						TextMultMigrationRates_Reg6_6.setVisible(true);
						TextMultMigrationRates_Reg1_6.setText("0.002");
						TextMultMigrationRatesTime_Reg1_6.setText("100");
						TextMultMigrationRates_Reg2_6.setText("0.001");
						TextMultMigrationRatesTime_Reg2_6.setText("200");
						TextMultMigrationRates_Reg3_6.setText("0.003");
						TextMultMigrationRatesTime_Reg3_6.setText("450");
						TextMultMigrationRates_Reg4_6.setText("0.004");
						TextMultMigrationRatesTime_Reg4_6.setText("600");
						TextMultMigrationRates_Reg5_6.setText("0.002");
						TextMultMigrationRatesTime_Reg5_6.setText("800");
						TextMultMigrationRates_Reg6_6.setText("0.003");
						}
					if (Here_the_value_MigrationRates == 7) 
						{
						labelSD7.setVisible(true);
						TextMultMigrationRates_Reg1_7.setVisible(true);
						TextMultMigrationRatesTime_Reg1_7.setVisible(true);
						TextMultMigrationRates_Reg2_7.setVisible(true);
						TextMultMigrationRatesTime_Reg2_7.setVisible(true);
						TextMultMigrationRates_Reg3_7.setVisible(true);
						TextMultMigrationRatesTime_Reg3_7.setVisible(true);
						TextMultMigrationRates_Reg4_7.setVisible(true);
						TextMultMigrationRatesTime_Reg4_7.setVisible(true);
						TextMultMigrationRates_Reg5_7.setVisible(true);
						TextMultMigrationRatesTime_Reg5_7.setVisible(true);
						TextMultMigrationRates_Reg6_7.setVisible(true);
						TextMultMigrationRatesTime_Reg6_7.setVisible(true);
						TextMultMigrationRates_Reg7_7.setVisible(true);
						TextMultMigrationRates_Reg1_7.setText("0.002");
						TextMultMigrationRatesTime_Reg1_7.setText("100");
						TextMultMigrationRates_Reg2_7.setText("0.001");
						TextMultMigrationRatesTime_Reg2_7.setText("200");
						TextMultMigrationRates_Reg3_7.setText("0.003");
						TextMultMigrationRatesTime_Reg3_7.setText("450");
						TextMultMigrationRates_Reg4_7.setText("0.004");
						TextMultMigrationRatesTime_Reg4_7.setText("600");
						TextMultMigrationRates_Reg5_7.setText("0.002");
						TextMultMigrationRatesTime_Reg5_7.setText("800");
						TextMultMigrationRates_Reg6_7.setText("0.003");
						TextMultMigrationRatesTime_Reg6_7.setText("950");
						TextMultMigrationRates_Reg7_7.setText("0.003");
						}*/
					}
					});
			
			
				//This creates a new button 
       			ButtonNextFrameMultMigrationRates_SaveNext.setSize(70, 70); // long, high
				runMultMigrationRatesSaveNextHandler = new runButtonMultMigrationRatesSaveNextHandler();
				ButtonNextFrameMultMigrationRates_SaveNext.addActionListener(runMultMigrationRatesSaveNextHandler);
        		ButtonNextFrameMultMigrationRates_SaveNext.setVisible(true); 
       			MultMigrationRatesWindow.add(ButtonNextFrameMultMigrationRates_SaveNext);

				JLabel labelXZ2 = new JLabel();
       			labelXZ2.setText(" ");
      			MultMigrationRatesWindow.add(labelXZ2);
				JLabel labelXZ3 = new JLabel();
       			labelXZ3.setText(" ");
      			MultMigrationRatesWindow.add(labelXZ3);
      			JLabel labelXZ4 = new JLabel();
       			labelXZ4.setText(" ");
      			MultMigrationRatesWindow.add(labelXZ4);
				JLabel labelXZ5 = new JLabel();
       			labelXZ5.setText(" ");
      			MultMigrationRatesWindow.add(labelXZ5);
				JLabel labelXZ6 = new JLabel();
       			labelXZ6.setText(" ");
      			MultMigrationRatesWindow.add(labelXZ6);
				JLabel labelXZ7 = new JLabel();
       			labelXZ7.setText(" ");
      			MultMigrationRatesWindow.add(labelXZ7);
				JLabel labelXZ8 = new JLabel();
       			labelXZ8.setText(" ");
      			MultMigrationRatesWindow.add(labelXZ8);
				JLabel labelXZ9 = new JLabel();
       			labelXZ9.setText(" ");
      			MultMigrationRatesWindow.add(labelXZ9);
				/*JLabel labelXZ10 = new JLabel();
       			labelXZ10.setText(" ");
      			MultMigrationRatesWindow.add(labelXZ10);
				JLabel labelXZ11 = new JLabel();
       			labelXZ11.setText(" ");
      			MultMigrationRatesWindow.add(labelXZ11);
				JLabel labelXZ12 = new JLabel();
       			labelXZ12.setText(" ");
      			MultMigrationRatesWindow.add(labelXZ12);
				JLabel labelXZ13 = new JLabel();
       			labelXZ13.setText(" ");
      			MultMigrationRatesWindow.add(labelXZ13);*/

				//This creates a new button 
       			ButtonNextFrameMultMigrationRates_Back.setSize(70, 70); // long, high
				runMultMigrationRatesExitHandler = new runButtonMultMigrationRatesExitHandler();
				ButtonNextFrameMultMigrationRates_Back.addActionListener(runMultMigrationRatesExitHandler);
        		ButtonNextFrameMultMigrationRates_Back.setVisible(true); 
       			MultMigrationRatesWindow.add(ButtonNextFrameMultMigrationRates_Back);
				}								

			}
		});


       	label4line2.setText("________________________________ Demographics ________________________________");
		label4line2.setLocation(450, 370); // right, down
        label4line2.setSize(600, 30); // long, high
//      	panel4.add(label4line2);		

		VariablePopSize.setLocation(450, 400); // right, down
        VariablePopSize.setSize(380, 30); // long, high
//		panel4.add(VariablePopSize);
		

		GrowthRateProteinEvolverABC.setLocation(840, 400); // right, down
    	GrowthRateProteinEvolverABC.setSize(120, 30); // long, high
		panel4.add(GrowthRateProteinEvolverABC);
		GrowthRateProteinEvolverABC.setVisible(false);
		
		GrowthRateProteinEvolverABC.setSelectedItem("fix"); // default
		TextFix_GrowthRate.setText("0.00013"); // default
		Fix_Window_GrowthRate.setVisible(false); // default
		Fix_Window_GrowthRate.dispose(); // default
		TextGrowthRateProteinEvolverABC.setText("fix 0.00013"); // default
		TextUnif1_GrowthRate.setText("0"); // default
		TextUnif2_GrowthRate.setText("0.00013"); // default
		TextExp1_GrowthRate.setText("1.2e7"); // default
		TextNorm1_GrowthRate.setText("1.5e-7"); // default
		TextNorm2_GrowthRate.setText("1.5e-4"); // default
		TextGamma1_GrowthRate.setText("1.5e-7"); // default
		TextGamma2_GrowthRate.setText("1.5e-5"); // default
		TextBeta1_GrowthRate.setText("1.5e-7"); // default
		TextBeta2_GrowthRate.setText("1.5e-3"); // default



		/* Multiple user-specified Demographics */
		label4eee.setText("");
		label4eee.setFont(new Font("Arial", Font.PLAIN, 14));
		label4eee.setForeground(Color.darkGray);
		label4eee.setLocation(450, 430); // right, down
        label4eee.setSize(280, 30); // long, high
      	panel4.add(label4eee);
		label4eee.setVisible(false);

		//String[] VariablePopSizeOptions = {"No","growth rate", "demographic periods","demographics along branches (constant N branch)","demographics along branches (variable N branch)"};
		VariablePopSize.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JComboBox VariablePopSizeSelected = (JComboBox) e.getSource();
				String seletedVariablePopSize = (String) VariablePopSizeSelected.getSelectedItem();
				if (seletedVariablePopSize == "No") 
					{
					TextGrowthRateProteinEvolverABC.setVisible(false);
					GrowthRateProteinEvolverABC.setVisible(false);
					TextGrowthRateProteinEvolverABC.setText("");
					label4eee.setText("");
					label4eee.setVisible(false); // Demog not saved
					ProteinEvolverABC_DemogPeriods = "#DemographicPeriods=1 1 10 100 500";
					ProteinEvolverABC_DemogPeriodsStructPop_CTE = "#DemographicsSpeciesTree_ConstantPops=2 7 1000 500 900 800 1300 1000 700";
					ProteinEvolverABC_DemogPeriodsStructPop_VARY = "#DemographicsSpeciesTree_VariablePops=3 7 1000 1200 500 600 900 1000 100 200 800 900 2000 1900 900";
        			}
				if (seletedVariablePopSize == "growth rate") 
					{
					TextGrowthRateProteinEvolverABC.setVisible(true);
					GrowthRateProteinEvolverABC.setVisible(true);
					TextGrowthRateProteinEvolverABC.setText("fix 0.00013");
					label4eee.setText("");
					label4eee.setVisible(false); // Demog not saved
					ProteinEvolverABC_DemogPeriods = "#DemographicPeriods=1 1 10 100 500";
					ProteinEvolverABC_DemogPeriodsStructPop_CTE = "#DemographicsSpeciesTree_ConstantPops=2 7 1000 500 900 800 1300 1000 700";
					ProteinEvolverABC_DemogPeriodsStructPop_VARY = "#DemographicsSpeciesTree_VariablePops=3 7 1000 1200 500 600 900 1000 100 200 800 900 2000 1900 900";
        			} 
				if (seletedVariablePopSize == "demographic periods")
					{
					//TextGrowthRateProteinEvolverABC.setText("1 10 1000 500");
					TextGrowthRateProteinEvolverABC.setVisible(false);
					GrowthRateProteinEvolverABC.setVisible(false);
					TextGrowthRateProteinEvolverABC.setText("");
					label4eee.setText("");
					label4eee.setVisible(false); // Demog not saved
					
					FirstTimeMultDemogPeriodsWindow = FirstTimeMultDemogPeriodsWindow + 1;
					MultDemogPeriodsWindow.setVisible( true );

			
					if (FirstTimeMultDemogPeriodsWindow == 1)
						{
						MultDemogPeriodsWindow.setTitle( "User-specified demographic periods" );
						MultDemogPeriodsWindow.setSize(1000, 800);
						MultDemogPeriodsWindow.setLayout( new GridLayout( 15, 4 ) ); // 16 rows, 4 columns
						MultDemogPeriodsWindow.setBackground(Color.white);
						MultDemogPeriodsWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      			  		MultDemogPeriodsWindow.setLocationRelativeTo(null);
				
						JLabel labelX1 = new JLabel();
						labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1.setText("User-specified periods");
   			   			MultDemogPeriodsWindow.add(labelX1);

						JLabel labelX1b = new JLabel();
						labelX1b.setFont(new Font("Arial", Font.BOLD, 14));
      		 			labelX1b.setText(" ");
     		 			MultDemogPeriodsWindow.add(labelX1b);

						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					MultDemogPeriodsWindow.add(labelX1c);
      			
      					JLabel labelX1d = new JLabel();
       					labelX1d.setText(" ");
      					MultDemogPeriodsWindow.add(labelX1d);
				
				
						JLabel labelX2 = new JLabel();
      		 			labelX2.setText("Number of periods ");
      					MultDemogPeriodsWindow.add(labelX2);

						MultDemogPeriodsWindow.add(NumberOfMultDemogPeriodsProteinEvolverABC_);
				
						JLabel labelX2m = new JLabel();
		       			labelX2m.setText(" "); 
      					MultDemogPeriodsWindow.add(labelX2m);
				
						JLabel labelX2n = new JLabel();
       					labelX2n.setText(" "); 
      					MultDemogPeriodsWindow.add(labelX2n);
				
				
						JLabel labelX3a = new JLabel();
       					labelX3a.setText("Time period number ");
      					MultDemogPeriodsWindow.add(labelX3a);
				
						JLabel labelX3 = new JLabel();
       					labelX3.setText("Initial population size");
      					MultDemogPeriodsWindow.add(labelX3);

						JLabel labelX3bc = new JLabel();
       					labelX3bc.setText("Final population size");
      					MultDemogPeriodsWindow.add(labelX3bc);

						JLabel labelX1e = new JLabel();
       					labelX1e.setText("Number of generations");
      					MultDemogPeriodsWindow.add(labelX1e);

  		     			labelXZd1.setText("1");
     		 			MultDemogPeriodsWindow.add(labelXZd1);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg1_1);
       					TextMultDemogPeriods_Reg1_1.setText("1000");
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg2_1);
       					TextMultDemogPeriods_Reg2_1.setText("500");
						MultDemogPeriodsWindow.add(TextMultDemogPeriodsProteinEvolverABC_1);
       					TextMultDemogPeriodsProteinEvolverABC_1.setText("50");

		       			labelXZd2.setText("2");
     		 			MultDemogPeriodsWindow.add(labelXZd2);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg1_2);
      		 			TextMultDemogPeriods_Reg1_2.setText("500");
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg2_2);
      		 			TextMultDemogPeriods_Reg2_2.setText("600");
						MultDemogPeriodsWindow.add(TextMultDemogPeriodsProteinEvolverABC_2);
       					TextMultDemogPeriodsProteinEvolverABC_2.setText("100");

		       			labelXZd3.setText("3");
     		 			MultDemogPeriodsWindow.add(labelXZd3);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg1_3);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg2_3);
						MultDemogPeriodsWindow.add(TextMultDemogPeriodsProteinEvolverABC_3);

       					labelXZd4.setText("4");
      					MultDemogPeriodsWindow.add(labelXZd4);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg1_4);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg2_4);
						MultDemogPeriodsWindow.add(TextMultDemogPeriodsProteinEvolverABC_4);

       					labelXZd5.setText("5");
     		 			MultDemogPeriodsWindow.add(labelXZd5);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg1_5);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg2_5);
						MultDemogPeriodsWindow.add(TextMultDemogPeriodsProteinEvolverABC_5);

       					labelXZd6.setText("6");
     		 			MultDemogPeriodsWindow.add(labelXZd6);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg1_6);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg2_6);
						MultDemogPeriodsWindow.add(TextMultDemogPeriodsProteinEvolverABC_6);
				
       					labelXZd7.setText("7");
     		 			MultDemogPeriodsWindow.add(labelXZd7);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg1_7);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg2_7);
						MultDemogPeriodsWindow.add(TextMultDemogPeriodsProteinEvolverABC_7);
				
   		    			labelXZd8.setText("8");
     		 			MultDemogPeriodsWindow.add(labelXZd8);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg1_8);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg2_8);
						MultDemogPeriodsWindow.add(TextMultDemogPeriodsProteinEvolverABC_8);
				
       					labelXZd9.setText("9");
      					MultDemogPeriodsWindow.add(labelXZd9);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg1_9);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg2_9);
						MultDemogPeriodsWindow.add(TextMultDemogPeriodsProteinEvolverABC_9);
				
      		 			labelXZd10.setText("10");
     		 			MultDemogPeriodsWindow.add(labelXZd10);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg1_10);
						MultDemogPeriodsWindow.add(TextMultDemogPeriods_Reg2_10);
						MultDemogPeriodsWindow.add(TextMultDemogPeriodsProteinEvolverABC_10);
				
				
						JLabel labelXA = new JLabel();
       					labelXA.setText(" ");
      					MultDemogPeriodsWindow.add(labelXA);
				
						JLabel labelXB = new JLabel();
       					labelXB.setText(" ");
      					MultDemogPeriodsWindow.add(labelXB);
						
						JLabel labelXC = new JLabel();
       					labelXC.setText(" ");
      					MultDemogPeriodsWindow.add(labelXC);
						
						JLabel labelXZd = new JLabel();
       					labelXZd.setText(" ");
      					MultDemogPeriodsWindow.add(labelXZd);
						
				
						// default
      		 			labelXZd3.setVisible(false);
						TextMultDemogPeriods_Reg1_3.setVisible(false);
						TextMultDemogPeriods_Reg2_3.setVisible(false);
						TextMultDemogPeriodsProteinEvolverABC_3.setVisible(false);

      		 			labelXZd4.setVisible(false);
						TextMultDemogPeriods_Reg1_4.setVisible(false);
						TextMultDemogPeriods_Reg2_4.setVisible(false);
						TextMultDemogPeriodsProteinEvolverABC_4.setVisible(false);

       					labelXZd5.setVisible(false);
						TextMultDemogPeriods_Reg1_5.setVisible(false);
						TextMultDemogPeriods_Reg2_5.setVisible(false);
						TextMultDemogPeriodsProteinEvolverABC_5.setVisible(false);

       					labelXZd6.setVisible(false);
						TextMultDemogPeriods_Reg1_6.setVisible(false);
						TextMultDemogPeriods_Reg2_6.setVisible(false);
						TextMultDemogPeriodsProteinEvolverABC_6.setVisible(false);

       					labelXZd7.setVisible(false);
						TextMultDemogPeriods_Reg1_7.setVisible(false);
						TextMultDemogPeriods_Reg2_7.setVisible(false);
						TextMultDemogPeriodsProteinEvolverABC_7.setVisible(false);

       					labelXZd8.setVisible(false);
						TextMultDemogPeriods_Reg1_8.setVisible(false);
						TextMultDemogPeriods_Reg2_8.setVisible(false);
						TextMultDemogPeriodsProteinEvolverABC_8.setVisible(false);

       					labelXZd9.setVisible(false);
						TextMultDemogPeriods_Reg1_9.setVisible(false);
						TextMultDemogPeriods_Reg2_9.setVisible(false);
						TextMultDemogPeriodsProteinEvolverABC_9.setVisible(false);

       					labelXZd10.setVisible(false);
						TextMultDemogPeriods_Reg1_10.setVisible(false);
						TextMultDemogPeriods_Reg2_10.setVisible(false);
						TextMultDemogPeriodsProteinEvolverABC_10.setVisible(false);
						
						TextNumberOfMultDemogPeriodsProteinEvolverABC.setText("2");
				
				
						NumberOfMultDemogPeriodsProteinEvolverABC_.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox NumberOfMultDemogPeriodsProteinEvolverABC_Here = (JComboBox) e.getSource();
							String seletedNumberOfMultDemogPeriodsProteinEvolverABC_Here = (String) NumberOfMultDemogPeriodsProteinEvolverABC_Here.getSelectedItem();
								
							TextNumberOfMultDemogPeriodsProteinEvolverABC.setText(seletedNumberOfMultDemogPeriodsProteinEvolverABC_Here); 

							int Here_the_value_DemogPeriods = 0;
							Here_the_value_DemogPeriods = Integer.parseInt(seletedNumberOfMultDemogPeriodsProteinEvolverABC_Here);
					
							labelXZd3.setVisible(false);
							TextMultDemogPeriods_Reg1_3.setVisible(false);
							TextMultDemogPeriods_Reg2_3.setVisible(false);
							TextMultDemogPeriodsProteinEvolverABC_3.setVisible(false);
					
	 		      			labelXZd4.setVisible(false);
							TextMultDemogPeriods_Reg1_4.setVisible(false);
							TextMultDemogPeriods_Reg2_4.setVisible(false);
							TextMultDemogPeriodsProteinEvolverABC_4.setVisible(false);
	
	    		   			labelXZd5.setVisible(false);
							TextMultDemogPeriods_Reg1_5.setVisible(false);
							TextMultDemogPeriods_Reg2_5.setVisible(false);
							TextMultDemogPeriodsProteinEvolverABC_5.setVisible(false);
	
	       					labelXZd6.setVisible(false);
							TextMultDemogPeriods_Reg1_6.setVisible(false);
							TextMultDemogPeriods_Reg2_6.setVisible(false);
							TextMultDemogPeriodsProteinEvolverABC_6.setVisible(false);
	
	       					labelXZd7.setVisible(false);
							TextMultDemogPeriods_Reg1_7.setVisible(false);
							TextMultDemogPeriods_Reg2_7.setVisible(false);
							TextMultDemogPeriodsProteinEvolverABC_7.setVisible(false);
	
	       					labelXZd8.setVisible(false);
							TextMultDemogPeriods_Reg1_8.setVisible(false);
							TextMultDemogPeriods_Reg2_8.setVisible(false);
							TextMultDemogPeriodsProteinEvolverABC_8.setVisible(false);
	
	       					labelXZd9.setVisible(false);
							TextMultDemogPeriods_Reg1_9.setVisible(false);
							TextMultDemogPeriods_Reg2_9.setVisible(false);
							TextMultDemogPeriodsProteinEvolverABC_9.setVisible(false);
	
	       					labelXZd10.setVisible(false);
							TextMultDemogPeriods_Reg1_10.setVisible(false);
							TextMultDemogPeriods_Reg2_10.setVisible(false);
							TextMultDemogPeriodsProteinEvolverABC_10.setVisible(false);
				
							TextMultDemogPeriods_Reg1_3.setText("");
							TextMultDemogPeriods_Reg2_3.setText("");
							TextMultDemogPeriodsProteinEvolverABC_3.setText("");
							TextMultDemogPeriods_Reg1_4.setText("");
							TextMultDemogPeriods_Reg2_4.setText("");
							TextMultDemogPeriodsProteinEvolverABC_4.setText("");
							TextMultDemogPeriods_Reg1_5.setText("");
							TextMultDemogPeriods_Reg2_5.setText("");
							TextMultDemogPeriodsProteinEvolverABC_5.setText("");
							TextMultDemogPeriods_Reg1_6.setText("");
							TextMultDemogPeriods_Reg2_6.setText("");
							TextMultDemogPeriodsProteinEvolverABC_6.setText("");
							TextMultDemogPeriods_Reg1_7.setText("");
							TextMultDemogPeriods_Reg2_7.setText("");
							TextMultDemogPeriodsProteinEvolverABC_7.setText("");
							TextMultDemogPeriods_Reg1_8.setText("");
							TextMultDemogPeriods_Reg2_8.setText("");
							TextMultDemogPeriodsProteinEvolverABC_8.setText("");
							TextMultDemogPeriods_Reg1_9.setText("");
							TextMultDemogPeriods_Reg2_9.setText("");
							TextMultDemogPeriodsProteinEvolverABC_9.setText("");
							TextMultDemogPeriods_Reg1_10.setText("");
							TextMultDemogPeriods_Reg2_10.setText("");
							TextMultDemogPeriodsProteinEvolverABC_10.setText("");
					
				
							if (Here_the_value_DemogPeriods >= 3) 
								{
								labelXZd3.setVisible(true);
								TextMultDemogPeriods_Reg1_3.setVisible(true);
								TextMultDemogPeriods_Reg1_3.setText("600");
								TextMultDemogPeriods_Reg2_3.setVisible(true);
								TextMultDemogPeriods_Reg2_3.setText("300");
								TextMultDemogPeriodsProteinEvolverABC_3.setVisible(true);
								TextMultDemogPeriodsProteinEvolverABC_3.setText("30");
								}
							if (Here_the_value_DemogPeriods >= 4) 
								{
								labelXZd4.setVisible(true);
								TextMultDemogPeriods_Reg1_4.setVisible(true);
								TextMultDemogPeriods_Reg1_4.setText("300");
								TextMultDemogPeriods_Reg2_4.setVisible(true);
								TextMultDemogPeriods_Reg2_4.setText("320");
								TextMultDemogPeriodsProteinEvolverABC_4.setVisible(true);
								TextMultDemogPeriodsProteinEvolverABC_4.setText("200");
								}
							if (Here_the_value_DemogPeriods >= 5) 
								{
								labelXZd5.setVisible(true);
								TextMultDemogPeriods_Reg1_5.setVisible(true);
								TextMultDemogPeriods_Reg1_5.setText("320");
								TextMultDemogPeriods_Reg2_5.setVisible(true);
								TextMultDemogPeriods_Reg2_5.setText("320");
								TextMultDemogPeriodsProteinEvolverABC_5.setVisible(true);
								TextMultDemogPeriodsProteinEvolverABC_5.setText("300");
								}
							if (Here_the_value_DemogPeriods >= 6) 
								{
								labelXZd6.setVisible(true);
								TextMultDemogPeriods_Reg1_6.setVisible(true);
								TextMultDemogPeriods_Reg1_6.setText("320");
								TextMultDemogPeriods_Reg2_6.setVisible(true);
								TextMultDemogPeriods_Reg2_6.setText("300");
								TextMultDemogPeriodsProteinEvolverABC_6.setVisible(true);
								TextMultDemogPeriodsProteinEvolverABC_6.setText("30");
								}
							if (Here_the_value_DemogPeriods >= 7) 
								{
								labelXZd7.setVisible(true);
								TextMultDemogPeriods_Reg1_7.setVisible(true);
								TextMultDemogPeriods_Reg1_7.setText("300");
								TextMultDemogPeriods_Reg2_7.setVisible(true);
								TextMultDemogPeriods_Reg2_7.setText("290");
								TextMultDemogPeriodsProteinEvolverABC_7.setVisible(true);
								TextMultDemogPeriodsProteinEvolverABC_7.setText("50");
								}
							if (Here_the_value_DemogPeriods >= 8) 
								{
								labelXZd8.setVisible(true);
								TextMultDemogPeriods_Reg1_8.setVisible(true);
								TextMultDemogPeriods_Reg1_8.setText("290");
								TextMultDemogPeriods_Reg2_8.setVisible(true);
								TextMultDemogPeriods_Reg2_8.setText("260");
								TextMultDemogPeriodsProteinEvolverABC_8.setVisible(true);
								TextMultDemogPeriodsProteinEvolverABC_8.setText("200");
								}
							if (Here_the_value_DemogPeriods >= 9) 
								{
								labelXZd9.setVisible(true);
								TextMultDemogPeriods_Reg1_9.setVisible(true);
								TextMultDemogPeriods_Reg1_9.setText("260");
								TextMultDemogPeriods_Reg2_9.setVisible(true);
								TextMultDemogPeriods_Reg2_9.setText("280");
								TextMultDemogPeriodsProteinEvolverABC_9.setVisible(true);
								TextMultDemogPeriodsProteinEvolverABC_9.setText("300");
								}
							if (Here_the_value_DemogPeriods >= 10) 
								{
								labelXZd10.setVisible(true);
								TextMultDemogPeriods_Reg1_10.setVisible(true);
								TextMultDemogPeriods_Reg1_10.setText("280");
								TextMultDemogPeriods_Reg2_10.setVisible(true);
								TextMultDemogPeriods_Reg2_10.setText("250");
								TextMultDemogPeriodsProteinEvolverABC_10.setVisible(true);
								TextMultDemogPeriodsProteinEvolverABC_10.setText("80");
								}							
							}
						});
			
			
						//This creates a new button 
      		 			ButtonNextFrameMultDemogPeriods_SaveNext.setSize(70, 70); // long, high
						runMultDemogPeriodsSaveNextHandler = new runButtonMultDemogPeriodsSaveNextHandler();
						ButtonNextFrameMultDemogPeriods_SaveNext.addActionListener(runMultDemogPeriodsSaveNextHandler);
       			 		ButtonNextFrameMultDemogPeriods_SaveNext.setVisible(true); 
       					MultDemogPeriodsWindow.add(ButtonNextFrameMultDemogPeriods_SaveNext);

						JLabel labelXE = new JLabel();
       					labelXE.setText(" ");
      					MultDemogPeriodsWindow.add(labelXE);
						JLabel labelXq = new JLabel();
       					labelXq.setText(" ");
      					MultDemogPeriodsWindow.add(labelXq);

						//This creates a new button 
      	 				ButtonNextFrameMultDemogPeriods_Back.setSize(70, 70); // long, high
						runMultDemogPeriodsExitHandler = new runButtonMultDemogPeriodsExitHandler();
						ButtonNextFrameMultDemogPeriods_Back.addActionListener(runMultDemogPeriodsExitHandler);
       			 		ButtonNextFrameMultDemogPeriods_Back.setVisible(true); 
       					MultDemogPeriodsWindow.add(ButtonNextFrameMultDemogPeriods_Back);
						}
        			}

				if (seletedVariablePopSize == "demographics along branches (constant N branch)")
					{
					if (SavedMultPopStruct == 0)
						{
						System.out.println("This option requires a population/species tree ");
						JOptionPane.showMessageDialog(null, "This option requires a population/species tree ", " ", JOptionPane. INFORMATION_MESSAGE);

						TextGrowthRateProteinEvolverABC.setVisible(false);
						GrowthRateProteinEvolverABC.setVisible(false);
						TextGrowthRateProteinEvolverABC.setText("");
						label4eee.setText("");
						label4eee.setVisible(false); // Demog not saved
						ProteinEvolverABC_DemogPeriods = "#DemographicPeriods=1 1 10 100 500";
						ProteinEvolverABC_DemogPeriodsStructPop_CTE = "#DemographicsSpeciesTree_ConstantPops=2 7 1000 500 900 800 1300 1000 700";
						ProteinEvolverABC_DemogPeriodsStructPop_VARY = "#DemographicsSpeciesTree_VariablePops=3 7 1000 1200 500 600 900 1000 100 200 800 900 2000 1900 900";
						VariablePopSize.setSelectedItem("No");
						}
					else
						{
						//TextGrowthRateProteinEvolverABC.setText("1 10 1000 500");
					TextGrowthRateProteinEvolverABC.setVisible(false);
					GrowthRateProteinEvolverABC.setVisible(false);
					TextGrowthRateProteinEvolverABC.setText("");
					label4eee.setText("");
					label4eee.setVisible(false); // Demog not saved
					
					FirstTimeMultDemogPeriodsStructPop_CTEWindow = FirstTimeMultDemogPeriodsStructPop_CTEWindow + 1;
					MultDemogPeriodsStructPop_CTEWindow.setVisible( true );
			
					if (FirstTimeMultDemogPeriodsStructPop_CTEWindow == 1)
						{
						MultDemogPeriodsStructPop_CTEWindow.setTitle( "User-specified constant population size per branch along a population/species tree" );
						MultDemogPeriodsStructPop_CTEWindow.setSize(900, 500);
						MultDemogPeriodsStructPop_CTEWindow.setLayout( new GridLayout( 15, 2) ); // 15 rows, 2 columns
						MultDemogPeriodsStructPop_CTEWindow.setBackground(Color.white);
						MultDemogPeriodsStructPop_CTEWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      			  		MultDemogPeriodsStructPop_CTEWindow.setLocationRelativeTo(null);
				
						JLabel labelX1 = new JLabel();
						labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1.setText("Constant demographics per branch");
   			   			MultDemogPeriodsStructPop_CTEWindow.add(labelX1);

						JLabel labelX1b = new JLabel();
      		 			labelX1b.setText(" ");
     		 			MultDemogPeriodsStructPop_CTEWindow.add(labelX1b);
				
				
						JLabel labelX2 = new JLabel();
      		 			labelX2.setText("Number of branches ");
      					MultDemogPeriodsStructPop_CTEWindow.add(labelX2);

						MultDemogPeriodsStructPop_CTEWindow.add(NumberOfMultDemogPeriodsStructPop_CTEProteinEvolverABC_);
								
				
						JLabel labelX3a = new JLabel();
       					labelX3a.setText("Branch number");
      					MultDemogPeriodsStructPop_CTEWindow.add(labelX3a);
				
						JLabel labelX3 = new JLabel();
       					labelX3.setText("Population size");
      					MultDemogPeriodsStructPop_CTEWindow.add(labelX3);


  		     			labelAZd1.setText("1");
     		 			MultDemogPeriodsStructPop_CTEWindow.add(labelAZd1);
						MultDemogPeriodsStructPop_CTEWindow.add(TextMultDemogPeriodsStructPop_CTE_Reg1_1);
       					TextMultDemogPeriodsStructPop_CTE_Reg1_1.setText("1000");

		       			labelAZd2.setText("2");
     		 			MultDemogPeriodsStructPop_CTEWindow.add(labelAZd2);
						MultDemogPeriodsStructPop_CTEWindow.add(TextMultDemogPeriodsStructPop_CTE_Reg1_2);
      		 			TextMultDemogPeriodsStructPop_CTE_Reg1_2.setText("500");

		       			labelAZd3.setText("3");
     		 			MultDemogPeriodsStructPop_CTEWindow.add(labelAZd3);
						MultDemogPeriodsStructPop_CTEWindow.add(TextMultDemogPeriodsStructPop_CTE_Reg1_3);
      		 			TextMultDemogPeriodsStructPop_CTE_Reg1_3.setText("900");

       					labelAZd4.setText("4");
      					MultDemogPeriodsStructPop_CTEWindow.add(labelAZd4);
						MultDemogPeriodsStructPop_CTEWindow.add(TextMultDemogPeriodsStructPop_CTE_Reg1_4);
      		 			TextMultDemogPeriodsStructPop_CTE_Reg1_4.setText("100");

       					labelAZd5.setText("5");
     		 			MultDemogPeriodsStructPop_CTEWindow.add(labelAZd5);
						MultDemogPeriodsStructPop_CTEWindow.add(TextMultDemogPeriodsStructPop_CTE_Reg1_5);
      		 			TextMultDemogPeriodsStructPop_CTE_Reg1_5.setText("800");

       					labelAZd6.setText("6");
     		 			MultDemogPeriodsStructPop_CTEWindow.add(labelAZd6);
						MultDemogPeriodsStructPop_CTEWindow.add(TextMultDemogPeriodsStructPop_CTE_Reg1_6);
      		 			TextMultDemogPeriodsStructPop_CTE_Reg1_6.setText("200");
				
       					labelAZd7.setText("7");
     		 			MultDemogPeriodsStructPop_CTEWindow.add(labelAZd7);
						MultDemogPeriodsStructPop_CTEWindow.add(TextMultDemogPeriodsStructPop_CTE_Reg1_7);
      		 			TextMultDemogPeriodsStructPop_CTE_Reg1_7.setText("900");
				
   		    			labelAZd8.setText("8");
     		 			MultDemogPeriodsStructPop_CTEWindow.add(labelAZd8);
						MultDemogPeriodsStructPop_CTEWindow.add(TextMultDemogPeriodsStructPop_CTE_Reg1_8);
				
       					labelAZd9.setText("9");
      					MultDemogPeriodsStructPop_CTEWindow.add(labelAZd9);
						MultDemogPeriodsStructPop_CTEWindow.add(TextMultDemogPeriodsStructPop_CTE_Reg1_9);
				
      		 			labelAZd10.setText("10");
     		 			MultDemogPeriodsStructPop_CTEWindow.add(labelAZd10);
						MultDemogPeriodsStructPop_CTEWindow.add(TextMultDemogPeriodsStructPop_CTE_Reg1_10);
				
				
						JLabel labelXA = new JLabel();
       					labelXA.setText(" ");
      					MultDemogPeriodsStructPop_CTEWindow.add(labelXA);
				
						JLabel labelXB = new JLabel();
       					labelXB.setText(" ");
      					MultDemogPeriodsStructPop_CTEWindow.add(labelXB);
						
				
						// default
       					labelAZd8.setVisible(false);
						TextMultDemogPeriodsStructPop_CTE_Reg1_8.setVisible(false);

       					labelAZd9.setVisible(false);
						TextMultDemogPeriodsStructPop_CTE_Reg1_9.setVisible(false);

       					labelAZd10.setVisible(false);
						TextMultDemogPeriodsStructPop_CTE_Reg1_10.setVisible(false);
						
						TextNumberOfMultDemogPeriodsStructPop_CTEProteinEvolverABC.setText("7");
						NumberOfMultDemogPeriodsStructPop_CTEProteinEvolverABC_.setSelectedItem("7");
				
				
						NumberOfMultDemogPeriodsStructPop_CTEProteinEvolverABC_.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox NumberOfMultDemogPeriodsStructPop_CTEProteinEvolverABC_Here = (JComboBox) e.getSource();
							String seletedNumberOfMultDemogPeriodsStructPop_CTEProteinEvolverABC_Here = (String) NumberOfMultDemogPeriodsStructPop_CTEProteinEvolverABC_Here.getSelectedItem();
								
							TextNumberOfMultDemogPeriodsStructPop_CTEProteinEvolverABC.setText(seletedNumberOfMultDemogPeriodsStructPop_CTEProteinEvolverABC_Here); 

							int Here_the_value_DemogPeriodsStructPop_CTE = 0;
							Here_the_value_DemogPeriodsStructPop_CTE = Integer.parseInt(seletedNumberOfMultDemogPeriodsStructPop_CTEProteinEvolverABC_Here);
					
							labelAZd1.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_1.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_1.setText("");

							labelAZd2.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_2.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_2.setText("");

							labelAZd3.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_3.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_3.setText("");

							labelAZd4.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_4.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_4.setText("");

							labelAZd5.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_5.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_5.setText("");
							
							labelAZd6.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_6.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_6.setText("");
			
							labelAZd7.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_7.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_7.setText("");
	
	       					labelAZd8.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_8.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_8.setText("");
	
	       					labelAZd9.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_9.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_9.setText("");
	
	       					labelAZd10.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_10.setVisible(false);
							TextMultDemogPeriodsStructPop_CTE_Reg1_10.setText("");
					

							if (Here_the_value_DemogPeriodsStructPop_CTE == 2) 
								{
								labelAZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setText("1000");

								labelAZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setText("500");

								labelAZd3.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setText("");

								labelAZd4.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setText("");

								labelAZd5.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setText("");
							
								labelAZd6.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setText("");
			
								labelAZd7.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setText("");
	
	       						labelAZd8.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setText("");
	
	       						labelAZd9.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setText("");
	
	       						labelAZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_CTE == 3) 
								{
								labelAZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setText("1000");

								labelAZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setText("500");

								labelAZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setText("900");

								labelAZd4.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setText("");

								labelAZd5.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setText("");
							
								labelAZd6.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setText("");
			
								labelAZd7.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setText("");
	
	       						labelAZd8.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setText("");
	
	       						labelAZd9.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setText("");
	
	       						labelAZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_CTE == 4) 
								{
								labelAZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setText("1000");

								labelAZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setText("500");

								labelAZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setText("900");

								labelAZd4.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setText("100");

								labelAZd5.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setText("");
							
								labelAZd6.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setText("");
			
								labelAZd7.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setText("");
	
	       						labelAZd8.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setText("");
	
	       						labelAZd9.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setText("");
	
	       						labelAZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_CTE == 5) 
								{
								labelAZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setText("1000");

								labelAZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setText("500");

								labelAZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setText("900");

								labelAZd4.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setText("100");

								labelAZd5.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setText("800");
							
								labelAZd6.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setText("");
			
								labelAZd7.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setText("");
	
	       						labelAZd8.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setText("");
	
	       						labelAZd9.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setText("");
	
	       						labelAZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_CTE == 6) 
								{
								labelAZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setText("1000");

								labelAZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setText("500");

								labelAZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setText("900");

								labelAZd4.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setText("100");

								labelAZd5.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setText("800");
							
								labelAZd6.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setText("200");
			
								labelAZd7.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setText("");
	
	       						labelAZd8.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setText("");
	
	       						labelAZd9.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setText("");
	
	       						labelAZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_CTE == 7) 
								{
								labelAZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setText("1000");

								labelAZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setText("500");

								labelAZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setText("900");

								labelAZd4.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setText("100");

								labelAZd5.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setText("800");
							
								labelAZd6.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setText("200");
			
								labelAZd7.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setText("900");
	
	       						labelAZd8.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setText("");
	
	       						labelAZd9.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setText("");
	
	       						labelAZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_CTE == 8) 
								{
								labelAZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setText("1000");

								labelAZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setText("500");

								labelAZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setText("900");

								labelAZd4.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setText("100");

								labelAZd5.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setText("800");
							
								labelAZd6.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setText("200");
			
								labelAZd7.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setText("900");
	
	       						labelAZd8.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setText("1000");
	
	       						labelAZd9.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setText("");
	
	       						labelAZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_CTE == 9) 
								{
								labelAZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setText("1000");

								labelAZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setText("500");

								labelAZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setText("900");

								labelAZd4.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setText("100");

								labelAZd5.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setText("800");
							
								labelAZd6.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setText("200");
			
								labelAZd7.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setText("900");
	
	       						labelAZd8.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setText("1000");
	
	       						labelAZd9.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setText("850");
	
	       						labelAZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_CTE == 10) 
								{
								labelAZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_1.setText("1000");

								labelAZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_2.setText("500");

								labelAZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_3.setText("900");

								labelAZd4.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_4.setText("100");

								labelAZd5.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_5.setText("800");
							
								labelAZd6.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_6.setText("200");
			
								labelAZd7.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_7.setText("900");
	
	       						labelAZd8.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_8.setText("1000");
	
	       						labelAZd9.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_9.setText("850");
	
	       						labelAZd10.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setVisible(true);
								TextMultDemogPeriodsStructPop_CTE_Reg1_10.setText("900");
								}							
							}
						});
			
			
						//This creates a new button 
      		 			ButtonNextFrameMultDemogPeriodsStructPop_CTE_SaveNext.setSize(70, 70); // long, high
						runMultDemogPeriodsStructPop_CTESaveNextHandler = new runButtonMultDemogPeriodsStructPop_CTESaveNextHandler();
						ButtonNextFrameMultDemogPeriodsStructPop_CTE_SaveNext.addActionListener(runMultDemogPeriodsStructPop_CTESaveNextHandler);
       			 		ButtonNextFrameMultDemogPeriodsStructPop_CTE_SaveNext.setVisible(true); 
       					MultDemogPeriodsStructPop_CTEWindow.add(ButtonNextFrameMultDemogPeriodsStructPop_CTE_SaveNext);

						//This creates a new button 
      	 				ButtonNextFrameMultDemogPeriodsStructPop_CTE_Back.setSize(70, 70); // long, high
						runMultDemogPeriodsStructPop_CTEExitHandler = new runButtonMultDemogPeriodsStructPop_CTEExitHandler();
						ButtonNextFrameMultDemogPeriodsStructPop_CTE_Back.addActionListener(runMultDemogPeriodsStructPop_CTEExitHandler);
       			 		ButtonNextFrameMultDemogPeriodsStructPop_CTE_Back.setVisible(true); 
       					MultDemogPeriodsStructPop_CTEWindow.add(ButtonNextFrameMultDemogPeriodsStructPop_CTE_Back);
						}

						}
					} // end demographics along branches (constant N branch)

				if (seletedVariablePopSize == "demographics along branches (variable N branch)")
					{
					if (SavedMultPopStruct == 0)
						{
						System.out.println("This option requires a population/species tree ");
						JOptionPane.showMessageDialog(null, "This option requires a population/species tree ", " ", JOptionPane. INFORMATION_MESSAGE);

						TextGrowthRateProteinEvolverABC.setVisible(false);
						GrowthRateProteinEvolverABC.setVisible(false);
						TextGrowthRateProteinEvolverABC.setText("");
						label4eee.setText("");
						label4eee.setVisible(false); // Demog not saved
						ProteinEvolverABC_DemogPeriods = "#DemographicPeriods=1 1 10 100 500";
						ProteinEvolverABC_DemogPeriodsStructPop_CTE = "#DemographicsSpeciesTree_ConstantPops=2 7 1000 500 900 800 1300 1000 700";
						ProteinEvolverABC_DemogPeriodsStructPop_VARY = "#DemographicsSpeciesTree_VariablePops=3 7 1000 1200 500 600 900 1000 100 200 800 900 2000 1900 900";
						VariablePopSize.setSelectedItem("No");
						}
					else
						{
						//TextGrowthRateProteinEvolverABC.setText("1 10 1000 500");
					TextGrowthRateProteinEvolverABC.setVisible(false);
					GrowthRateProteinEvolverABC.setVisible(false);
					TextGrowthRateProteinEvolverABC.setText("");
					label4eee.setText("");
					label4eee.setVisible(false); // Demog not saved
					
					FirstTimeMultDemogPeriodsStructPop_VARYWindow = FirstTimeMultDemogPeriodsStructPop_VARYWindow + 1;
					MultDemogPeriodsStructPop_VARYWindow.setVisible( true );
			
					if (FirstTimeMultDemogPeriodsStructPop_VARYWindow == 1)
						{
						MultDemogPeriodsStructPop_VARYWindow.setTitle( "User-specified variable population size per branch along a population/species tree" );
						MultDemogPeriodsStructPop_VARYWindow.setSize(1000, 800);
						MultDemogPeriodsStructPop_VARYWindow.setLayout( new GridLayout( 15, 3 ) ); // 16 rows, 4 columns
						MultDemogPeriodsStructPop_VARYWindow.setBackground(Color.white);
						MultDemogPeriodsStructPop_VARYWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      			  		MultDemogPeriodsStructPop_VARYWindow.setLocationRelativeTo(null);
				
						JLabel labelX1 = new JLabel();
						labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1.setText("Variable demographic periods per branch");
   			   			MultDemogPeriodsStructPop_VARYWindow.add(labelX1);

						JLabel labelX1b = new JLabel();
						labelX1b.setFont(new Font("Arial", Font.BOLD, 14));
      		 			labelX1b.setText(" ");
     		 			MultDemogPeriodsStructPop_VARYWindow.add(labelX1b);

						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					MultDemogPeriodsStructPop_VARYWindow.add(labelX1c);
				
				
						JLabel labelX2 = new JLabel();
      		 			labelX2.setText("Number of branches ");
      					MultDemogPeriodsStructPop_VARYWindow.add(labelX2);

						MultDemogPeriodsStructPop_VARYWindow.add(NumberOfMultDemogPeriodsStructPop_VARYProteinEvolverABC_);
				
						JLabel labelX2m = new JLabel();
		       			labelX2m.setText(" "); 
      					MultDemogPeriodsStructPop_VARYWindow.add(labelX2m);
				
				
						JLabel labelX3a = new JLabel();
       					labelX3a.setText("Branch number ");
      					MultDemogPeriodsStructPop_VARYWindow.add(labelX3a);
				
						JLabel labelX3 = new JLabel();
       					labelX3.setText("Initial population size");
      					MultDemogPeriodsStructPop_VARYWindow.add(labelX3);

						JLabel labelX3bc = new JLabel();
       					labelX3bc.setText("Final population size");
      					MultDemogPeriodsStructPop_VARYWindow.add(labelX3bc);
						

  		     			labelRZd1.setText("1");
     		 			MultDemogPeriodsStructPop_VARYWindow.add(labelRZd1);
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg1_1);
       					TextMultDemogPeriodsStructPop_VARY_Reg1_1.setText("1000");
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg2_1);
       					TextMultDemogPeriodsStructPop_VARY_Reg2_1.setText("1200");

		       			labelRZd2.setText("2");
     		 			MultDemogPeriodsStructPop_VARYWindow.add(labelRZd2);
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg1_2);
      		 			TextMultDemogPeriodsStructPop_VARY_Reg1_2.setText("500");
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg2_2);
      		 			TextMultDemogPeriodsStructPop_VARY_Reg2_2.setText("600");

		       			labelRZd3.setText("3");
     		 			MultDemogPeriodsStructPop_VARYWindow.add(labelRZd3);
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg1_3);
      		 			TextMultDemogPeriodsStructPop_VARY_Reg1_3.setText("900");
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg2_3);
      		 			TextMultDemogPeriodsStructPop_VARY_Reg2_3.setText("1000");

       					labelRZd4.setText("4");
      					MultDemogPeriodsStructPop_VARYWindow.add(labelRZd4);
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg1_4);
      		 			TextMultDemogPeriodsStructPop_VARY_Reg1_4.setText("100");
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg2_4);
      		 			TextMultDemogPeriodsStructPop_VARY_Reg2_4.setText("200");

       					labelRZd5.setText("5");
     		 			MultDemogPeriodsStructPop_VARYWindow.add(labelRZd5);
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg1_5);
      		 			TextMultDemogPeriodsStructPop_VARY_Reg1_5.setText("800");
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg2_5);
      		 			TextMultDemogPeriodsStructPop_VARY_Reg2_5.setText("900");

       					labelRZd6.setText("6");
     		 			MultDemogPeriodsStructPop_VARYWindow.add(labelRZd6);
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg1_6);
      		 			TextMultDemogPeriodsStructPop_VARY_Reg1_6.setText("2000");
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg2_6);
      		 			TextMultDemogPeriodsStructPop_VARY_Reg2_6.setText("1900");
				
       					labelRZd7.setText("7");
     		 			MultDemogPeriodsStructPop_VARYWindow.add(labelRZd7);
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg1_7);
      		 			TextMultDemogPeriodsStructPop_VARY_Reg1_7.setText("900");
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg2_7);
      		 			TextMultDemogPeriodsStructPop_VARY_Reg2_7.setVisible(false);
				
   		    			labelRZd8.setText("8");
     		 			MultDemogPeriodsStructPop_VARYWindow.add(labelRZd8);
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg1_8);
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg2_8);
				
       					labelRZd9.setText("9");
      					MultDemogPeriodsStructPop_VARYWindow.add(labelRZd9);
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg1_9);
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg2_9);
				
      		 			labelRZd10.setText("10");
     		 			MultDemogPeriodsStructPop_VARYWindow.add(labelRZd10);
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg1_10);
						MultDemogPeriodsStructPop_VARYWindow.add(TextMultDemogPeriodsStructPop_VARY_Reg2_10);
				
				
						JLabel labelXA = new JLabel();
       					labelXA.setText(" ");
      					MultDemogPeriodsStructPop_VARYWindow.add(labelXA);
				
						JLabel labelXB = new JLabel();
       					labelXB.setText(" ");
      					MultDemogPeriodsStructPop_VARYWindow.add(labelXB);
						
						JLabel labelXC = new JLabel();
       					labelXC.setText(" ");
      					MultDemogPeriodsStructPop_VARYWindow.add(labelXC);
						
				
						// default
      		 			TextMultDemogPeriodsStructPop_VARY_Reg2_7.setVisible(false);

       					labelRZd8.setVisible(false);
						TextMultDemogPeriodsStructPop_VARY_Reg1_8.setVisible(false);
						TextMultDemogPeriodsStructPop_VARY_Reg2_8.setVisible(false);

       					labelRZd9.setVisible(false);
						TextMultDemogPeriodsStructPop_VARY_Reg1_9.setVisible(false);
						TextMultDemogPeriodsStructPop_VARY_Reg2_9.setVisible(false);

       					labelRZd10.setVisible(false);
						TextMultDemogPeriodsStructPop_VARY_Reg1_10.setVisible(false);
						TextMultDemogPeriodsStructPop_VARY_Reg2_10.setVisible(false);
						
						TextNumberOfMultDemogPeriodsStructPop_VARYProteinEvolverABC.setText("7");
						NumberOfMultDemogPeriodsStructPop_VARYProteinEvolverABC_.setSelectedItem("7");
				
				
						NumberOfMultDemogPeriodsStructPop_VARYProteinEvolverABC_.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox NumberOfMultDemogPeriodsStructPop_VARYProteinEvolverABC_Here = (JComboBox) e.getSource();
							String seletedNumberOfMultDemogPeriodsStructPop_VARYProteinEvolverABC_Here = (String) NumberOfMultDemogPeriodsStructPop_VARYProteinEvolverABC_Here.getSelectedItem();
								
							TextNumberOfMultDemogPeriodsStructPop_VARYProteinEvolverABC.setText(seletedNumberOfMultDemogPeriodsStructPop_VARYProteinEvolverABC_Here); 

							int Here_the_value_DemogPeriodsStructPop_VARY = 0;
							Here_the_value_DemogPeriodsStructPop_VARY = Integer.parseInt(seletedNumberOfMultDemogPeriodsStructPop_VARYProteinEvolverABC_Here);
					
							labelRZd1.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_1.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg2_1.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_1.setText("");
							TextMultDemogPeriodsStructPop_VARY_Reg2_1.setText("");

							labelRZd2.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_2.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg2_2.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_2.setText("");
							TextMultDemogPeriodsStructPop_VARY_Reg2_2.setText("");

							labelRZd3.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_3.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg2_3.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_3.setText("");
							TextMultDemogPeriodsStructPop_VARY_Reg2_3.setText("");

							labelRZd4.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_4.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg2_4.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_4.setText("");
							TextMultDemogPeriodsStructPop_VARY_Reg2_4.setText("");

							labelRZd5.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_5.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg2_5.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_5.setText("");
							TextMultDemogPeriodsStructPop_VARY_Reg2_5.setText("");
							
							labelRZd6.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_6.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg2_6.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_6.setText("");
							TextMultDemogPeriodsStructPop_VARY_Reg2_6.setText("");
			
							labelRZd7.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_7.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg2_7.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_7.setText("");
							TextMultDemogPeriodsStructPop_VARY_Reg2_7.setText("");
	
	       					labelRZd8.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_8.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg2_8.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_8.setText("");
							TextMultDemogPeriodsStructPop_VARY_Reg2_8.setText("");
	
	       					labelRZd9.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_9.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg2_9.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_9.setText("");
							TextMultDemogPeriodsStructPop_VARY_Reg2_9.setText("");
	
	       					labelRZd10.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_10.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg2_10.setVisible(false);
							TextMultDemogPeriodsStructPop_VARY_Reg1_10.setText("");
							TextMultDemogPeriodsStructPop_VARY_Reg2_10.setText("");
					

							if (Here_the_value_DemogPeriodsStructPop_VARY == 2) 
								{
								labelRZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setText("1000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setText("1200");

								labelRZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setText("500");
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setText("");

								labelRZd3.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setText("");

								labelRZd4.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setText("");

								labelRZd5.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setText("");
							
								labelRZd6.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setText("");
			
								labelRZd7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setText("");
	
	       						labelRZd8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setText("");
	
	       						labelRZd9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setText("");
	
	       						labelRZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_VARY == 3) 
								{
								labelRZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setText("1000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setText("1200");

								labelRZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setText("500");
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setText("600");

								labelRZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setText("900");
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setText("");

								labelRZd4.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setText("");

								labelRZd5.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setText("");
							
								labelRZd6.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setText("");
			
								labelRZd7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setText("");
	
	       						labelRZd8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setText("");
	
	       						labelRZd9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setText("");
	
	       						labelRZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_VARY == 4) 
								{
								labelRZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setText("1000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setText("1200");

								labelRZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setText("500");
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setText("600");

								labelRZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setText("900");
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setText("1000");

								labelRZd4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setText("100");
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setText("");

								labelRZd5.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setText("");
							
								labelRZd6.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setText("");
			
								labelRZd7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setText("");
	
	       						labelRZd8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setText("");
	
	       						labelRZd9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setText("");
	
	       						labelRZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_VARY == 5) 
								{
								labelRZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setText("1000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setText("1200");

								labelRZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setText("500");
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setText("600");

								labelRZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setText("900");
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setText("1000");

								labelRZd4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setText("100");
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setText("200");

								labelRZd5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setText("800");
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setText("");
							
								labelRZd6.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setText("");
			
								labelRZd7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setText("");
	
	       						labelRZd8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setText("");
	
	       						labelRZd9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setText("");
	
	       						labelRZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_VARY == 6) 
								{
								labelRZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setText("1000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setText("1200");

								labelRZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setText("500");
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setText("600");

								labelRZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setText("900");
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setText("1000");

								labelRZd4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setText("100");
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setText("200");

								labelRZd5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setText("800");
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setText("900");
							
								labelRZd6.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setText("2000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setText("");
			
								labelRZd7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setText("");
	
	       						labelRZd8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setText("");
	
	       						labelRZd9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setText("");
	
	       						labelRZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_VARY == 7) 
								{
								labelRZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setText("1000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setText("1200");

								labelRZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setText("500");
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setText("600");

								labelRZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setText("900");
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setText("1000");

								labelRZd4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setText("100");
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setText("200");

								labelRZd5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setText("800");
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setText("900");
							
								labelRZd6.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setText("2000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setText("1900");
			
								labelRZd7.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setText("900");
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setText("");
	
	       						labelRZd8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setText("");
	
	       						labelRZd9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setText("");
	
	       						labelRZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_VARY == 8) 
								{
								labelRZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setText("1000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setText("1200");

								labelRZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setText("500");
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setText("600");

								labelRZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setText("900");
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setText("1000");

								labelRZd4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setText("100");
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setText("200");

								labelRZd5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setText("800");
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setText("900");
							
								labelRZd6.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setText("2000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setText("1900");
			
								labelRZd7.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setText("900");
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setText("900");
	
	       						labelRZd8.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setText("1000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setText("");
	
	       						labelRZd9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setText("");
	
	       						labelRZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_VARY == 9) 
								{
								labelRZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setText("1000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setText("1200");

								labelRZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setText("500");
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setText("600");

								labelRZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setText("900");
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setText("1000");

								labelRZd4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setText("100");
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setText("200");

								labelRZd5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setText("800");
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setText("900");
							
								labelRZd6.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setText("2000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setText("1900");
			
								labelRZd7.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setText("900");
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setText("900");
	
	       						labelRZd8.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setText("1000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setText("1100");
	
	       						labelRZd9.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setText("850");
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setText("");
	
	       						labelRZd10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setText("");
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setText("");
								}
							if (Here_the_value_DemogPeriodsStructPop_VARY == 10) 
								{
								labelRZd1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_1.setText("1000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_1.setText("1200");

								labelRZd2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_2.setText("500");
								TextMultDemogPeriodsStructPop_VARY_Reg2_2.setText("600");

								labelRZd3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_3.setText("900");
								TextMultDemogPeriodsStructPop_VARY_Reg2_3.setText("1000");

								labelRZd4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_4.setText("100");
								TextMultDemogPeriodsStructPop_VARY_Reg2_4.setText("200");

								labelRZd5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_5.setText("800");
								TextMultDemogPeriodsStructPop_VARY_Reg2_5.setText("900");
							
								labelRZd6.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_6.setText("2000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_6.setText("1900");
			
								labelRZd7.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_7.setText("900");
								TextMultDemogPeriodsStructPop_VARY_Reg2_7.setText("900");
	
	       						labelRZd8.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_8.setText("1000");
								TextMultDemogPeriodsStructPop_VARY_Reg2_8.setText("1100");
	
	       						labelRZd9.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_9.setText("850");
								TextMultDemogPeriodsStructPop_VARY_Reg2_9.setText("900");
	
	       						labelRZd10.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setVisible(true);
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setVisible(false);
								TextMultDemogPeriodsStructPop_VARY_Reg1_10.setText("900");
								TextMultDemogPeriodsStructPop_VARY_Reg2_10.setText("");
								}							
							}
						});
			
			
						//This creates a new button 
      		 			ButtonNextFrameMultDemogPeriodsStructPop_VARY_SaveNext.setSize(70, 70); // long, high
						runMultDemogPeriodsStructPop_VARYSaveNextHandler = new runButtonMultDemogPeriodsStructPop_VARYSaveNextHandler();
						ButtonNextFrameMultDemogPeriodsStructPop_VARY_SaveNext.addActionListener(runMultDemogPeriodsStructPop_VARYSaveNextHandler);
       			 		ButtonNextFrameMultDemogPeriodsStructPop_VARY_SaveNext.setVisible(true); 
       					MultDemogPeriodsStructPop_VARYWindow.add(ButtonNextFrameMultDemogPeriodsStructPop_VARY_SaveNext);

						JLabel labelXE = new JLabel();
       					labelXE.setText(" ");
      					MultDemogPeriodsStructPop_VARYWindow.add(labelXE);

						//This creates a new button 
      	 				ButtonNextFrameMultDemogPeriodsStructPop_VARY_Back.setSize(70, 70); // long, high
						runMultDemogPeriodsStructPop_VARYExitHandler = new runButtonMultDemogPeriodsStructPop_VARYExitHandler();
						ButtonNextFrameMultDemogPeriodsStructPop_VARY_Back.addActionListener(runMultDemogPeriodsStructPop_VARYExitHandler);
       			 		ButtonNextFrameMultDemogPeriodsStructPop_VARY_Back.setVisible(true); 
       					MultDemogPeriodsStructPop_VARYWindow.add(ButtonNextFrameMultDemogPeriodsStructPop_VARY_Back);
						}

						}
					} // end demographics along branches (variable N branch)

				}
			});
		

		///////		

		GrowthRateProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				JComboBox KindOf = (JComboBox) e.getSource();
				String seletedKindOf = (String) KindOf.getSelectedItem(); 	//String[] GrowthRateProteinEvolverABCOptions = {"no", "fix", "uniform", "exponential", "normal", "gamma", "beta"}; // fix, unif, norm(t), exp(t), gamma(t), beta(t)

				if (seletedKindOf == "fix")
					{
					
					FirstTimeFix_Window_GrowthRate++;
					Fix_Window_GrowthRate.setVisible( true );
									
					if (FirstTimeFix_Window_GrowthRate == 1)
						{
						Fix_Window_GrowthRate.setTitle( "Fix" );
						Fix_Window_GrowthRate.setSize(400, 300);
						Fix_Window_GrowthRate.setLayout( new GridLayout( 3, 2 ) ); // 15 rows, 2 columns
						Fix_Window_GrowthRate.setBackground(Color.white);
						Fix_Window_GrowthRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Fix_Window_GrowthRate.setLocationRelativeTo(null);

						JLabel labelX1 = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1.setText("Value e.g., 1.0e-7");
						//labelX1.setLocation(30, 130); // right, down
        				//labelX1.setSize(300, 30); // long, high
      					Fix_Window_GrowthRate.add(labelX1);
	
						Fix_Window_GrowthRate.add(TextFix_GrowthRate);	
					
						JLabel labelXB = new JLabel();
       					labelXB.setText(" ");
      					Fix_Window_GrowthRate.add(labelXB);
						JLabel labelXC = new JLabel();
       					labelXC.setText(" ");
      					Fix_Window_GrowthRate.add(labelXC);
				

						//This creates a new button 
       					ButtonNext_Fix_Window_Next_GrowthRate.setSize(70, 70); // long, high
       	 				ButtonNext_Fix_Window_Next_GrowthRate.setVisible(true); 
       					Fix_Window_GrowthRate.add(ButtonNext_Fix_Window_Next_GrowthRate);

						//This creates a new button 
    	   				ButtonNext_Fix_Window_Handler_Back_GrowthRate.setSize(70, 70); // long, high
       	 				ButtonNext_Fix_Window_Handler_Back_GrowthRate.setVisible(true); 
       					Fix_Window_GrowthRate.add(ButtonNext_Fix_Window_Handler_Back_GrowthRate);
						}
        			} // end fix

				if (seletedKindOf == "uniform")
					{
					
					FirstTimeUnif_Window_GrowthRate++;
					Unif_Window_GrowthRate.setVisible( true );
									
					if (FirstTimeUnif_Window_GrowthRate == 1)
						{
						Unif_Window_GrowthRate.setTitle( "Uniform distribution" );
						Unif_Window_GrowthRate.setSize(500, 300);
						Unif_Window_GrowthRate.setLayout( new GridLayout( 4, 2 ) ); // 15 rows, 2 columns
						Unif_Window_GrowthRate.setBackground(Color.white);
						Unif_Window_GrowthRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Unif_Window_GrowthRate.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1b.setText("Minimum value e.g., 0");
      					Unif_Window_GrowthRate.add(labelX1b);
	
						Unif_Window_GrowthRate.add(TextUnif1_GrowthRate);	
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText("Maximum value e.g., 1.5e-7");
      					Unif_Window_GrowthRate.add(labelX1c);
	
						Unif_Window_GrowthRate.add(TextUnif2_GrowthRate);	
						
						JLabel labelXBc = new JLabel();
       					labelXBc.setText(" ");
      					Unif_Window_GrowthRate.add(labelXBc);
						JLabel labelXCc = new JLabel();
    	   				labelXCc.setText(" ");
      					Unif_Window_GrowthRate.add(labelXCc);
					
	
						//This creates a new button 
    	   				ButtonNext_Unif_Window_Next_GrowthRate.setSize(70, 70); // long, high
        				ButtonNext_Unif_Window_Next_GrowthRate.setVisible(true); 
       					Unif_Window_GrowthRate.add(ButtonNext_Unif_Window_Next_GrowthRate);
	
						//This creates a new button 
       					ButtonNext_Unif_Window_Handler_Back_GrowthRate.setSize(70, 70); // long, high
        				ButtonNext_Unif_Window_Handler_Back_GrowthRate.setVisible(true); 
       					Unif_Window_GrowthRate.add(ButtonNext_Unif_Window_Handler_Back_GrowthRate);
						}
        			} // end unif

				if (seletedKindOf == "exponential")
					{
					
					FirstTimeExp_Window_GrowthRate++;
					Exp_Window_GrowthRate.setVisible( true );
									
					if (FirstTimeExp_Window_GrowthRate == 1)
						{
						Exp_Window_GrowthRate.setTitle( "Exponential distribution" );
						Exp_Window_GrowthRate.setSize(500, 300);
						Exp_Window_GrowthRate.setLayout( new GridLayout( 6, 2 ) ); // 15 rows, 2 columns
						Exp_Window_GrowthRate.setBackground(Color.white);
						Exp_Window_GrowthRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Exp_Window_GrowthRate.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1b.setText("Rate e.g., 1.2e7");
      					Exp_Window_GrowthRate.add(labelX1b);
	
						Exp_Window_GrowthRate.add(TextExp1_GrowthRate);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Exp_Window_GrowthRate.add(labelXgb);	
					
						String[] GrowthRate_Exp_truncatedOptions = {"no", "yes"};
    					JComboBox GrowthRate_Exp_truncated = new JComboBox(GrowthRate_Exp_truncatedOptions);
        				Exp_Window_GrowthRate.add(GrowthRate_Exp_truncated);

       					GrowthRate_labelt1_Exp.setText("Minimum value e.g., 1.5e-8");
      					Exp_Window_GrowthRate.add(GrowthRate_labelt1_Exp);
	
						Exp_Window_GrowthRate.add(TextExp3_GrowthRate);

       					GrowthRate_labelt2_Exp.setText("Maximum value e.g., 1.5e-7");
      					Exp_Window_GrowthRate.add(GrowthRate_labelt2_Exp);
	
						Exp_Window_GrowthRate.add(TextExp4_GrowthRate);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Exp_Window_GrowthRate.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Exp_Window_GrowthRate.add(labelX1h);
						

						GrowthRate_labelt1_Exp.setVisible(false);
						TextExp3_GrowthRate.setVisible(false);
						GrowthRate_labelt2_Exp.setVisible(false);
						TextExp4_GrowthRate.setVisible(false);
						
						GrowthRate_Exp_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								GrowthRate_labelt1_Exp.setVisible(true);
								TextExp3_GrowthRate.setVisible(true);
								GrowthRate_labelt2_Exp.setVisible(true);
								TextExp4_GrowthRate.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								GrowthRate_labelt1_Exp.setVisible(false);
								TextExp3_GrowthRate.setVisible(false);
								GrowthRate_labelt2_Exp.setVisible(false);
								TextExp4_GrowthRate.setVisible(false);
								
								TextExp3_GrowthRate.setText("");
								TextExp4_GrowthRate.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Exp_Window_Next_GrowthRate.setSize(70, 70); // long, high
        				ButtonNext_Exp_Window_Next_GrowthRate.setVisible(true); 
       					Exp_Window_GrowthRate.add(ButtonNext_Exp_Window_Next_GrowthRate);
	
						//This creates a new button 
       					ButtonNext_Exp_Window_Handler_Back_GrowthRate.setSize(70, 70); // long, high
        				ButtonNext_Exp_Window_Handler_Back_GrowthRate.setVisible(true); 
       					Exp_Window_GrowthRate.add(ButtonNext_Exp_Window_Handler_Back_GrowthRate);
						}
        			} // end Exp

				if (seletedKindOf == "normal")
					{
					
					FirstTimeNorm_Window_GrowthRate++;
					Norm_Window_GrowthRate.setVisible( true );
									
					if (FirstTimeNorm_Window_GrowthRate == 1)
						{
						Norm_Window_GrowthRate.setTitle( "Normal distribution" );
						Norm_Window_GrowthRate.setSize(500, 300);
						Norm_Window_GrowthRate.setLayout( new GridLayout( 7, 2 ) ); // 15 rows, 2 columns
						Norm_Window_GrowthRate.setBackground(Color.white);
						Norm_Window_GrowthRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Norm_Window_GrowthRate.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
       					labelX1b.setText("Mean (location) e.g., 0.5");
      					Norm_Window_GrowthRate.add(labelX1b);
	
						Norm_Window_GrowthRate.add(TextNorm1_GrowthRate);

						JLabel labelX2b = new JLabel();
       					labelX2b.setText("Variance (squared scale) e.g., 0.001");
      					Norm_Window_GrowthRate.add(labelX2b);
	
						Norm_Window_GrowthRate.add(TextNorm2_GrowthRate);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Norm_Window_GrowthRate.add(labelXgb);	
					
						String[] GrowthRate_Norm_truncatedOptions = {"no", "yes"};
  						JComboBox GrowthRate_Norm_truncated = new JComboBox(GrowthRate_Norm_truncatedOptions);
        				Norm_Window_GrowthRate.add(GrowthRate_Norm_truncated);

       					GrowthRate_labelt1_Norm.setText("Minimum value e.g., 1.5e-8");
      					Norm_Window_GrowthRate.add(GrowthRate_labelt1_Norm);
	
						Norm_Window_GrowthRate.add(TextNorm3_GrowthRate);

       					GrowthRate_labelt2_Norm.setText("Maximum value e.g., 1.5e-7");
      					Norm_Window_GrowthRate.add(GrowthRate_labelt2_Norm);
	
						Norm_Window_GrowthRate.add(TextNorm4_GrowthRate);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Norm_Window_GrowthRate.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Norm_Window_GrowthRate.add(labelX1h);
						

						GrowthRate_labelt1_Norm.setVisible(false);
						TextNorm3_GrowthRate.setVisible(false);
						GrowthRate_labelt2_Norm.setVisible(false);
						TextNorm4_GrowthRate.setVisible(false);
						
						GrowthRate_Norm_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								GrowthRate_labelt1_Norm.setVisible(true);
								TextNorm3_GrowthRate.setVisible(true);
								GrowthRate_labelt2_Norm.setVisible(true);
								TextNorm4_GrowthRate.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								GrowthRate_labelt1_Norm.setVisible(false);
								TextNorm3_GrowthRate.setVisible(false);
								GrowthRate_labelt2_Norm.setVisible(false);
								TextNorm4_GrowthRate.setVisible(false);
								
								TextNorm3_GrowthRate.setText("");
								TextNorm4_GrowthRate.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Norm_Window_Next_GrowthRate.setSize(70, 70); // long, high
        				ButtonNext_Norm_Window_Next_GrowthRate.setVisible(true); 
       					Norm_Window_GrowthRate.add(ButtonNext_Norm_Window_Next_GrowthRate);
	
						//This creates a new button 
       					ButtonNext_Norm_Window_Handler_Back_GrowthRate.setSize(70, 70); // long, high
        				ButtonNext_Norm_Window_Handler_Back_GrowthRate.setVisible(true); 
       					Norm_Window_GrowthRate.add(ButtonNext_Norm_Window_Handler_Back_GrowthRate);
						}
        			} // end Norm

				if (seletedKindOf == "gamma")
					{
					
					FirstTimeGamma_Window_GrowthRate++;
					Gamma_Window_GrowthRate.setVisible( true );
									
					if (FirstTimeGamma_Window_GrowthRate == 1)
						{
						Gamma_Window_GrowthRate.setTitle( "Gamma distribution" );
						Gamma_Window_GrowthRate.setSize(500, 300);
						Gamma_Window_GrowthRate.setLayout( new GridLayout( 7, 2 ) ); // 15 rows, 2 columns
						Gamma_Window_GrowthRate.setBackground(Color.white);
						Gamma_Window_GrowthRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Gamma_Window_GrowthRate.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
       					labelX1b.setText("Shape e.g., 0.5");
      					Gamma_Window_GrowthRate.add(labelX1b);
	
						Gamma_Window_GrowthRate.add(TextGamma1_GrowthRate);

						JLabel labelX2b = new JLabel();
       					labelX2b.setText("Scale e.g., 0.001");
      					Gamma_Window_GrowthRate.add(labelX2b);
	
						Gamma_Window_GrowthRate.add(TextGamma2_GrowthRate);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Gamma_Window_GrowthRate.add(labelXgb);	
					
						String[] GrowthRate_Gamma_truncatedOptions = {"no", "yes"};
  						JComboBox GrowthRate_Gamma_truncated = new JComboBox(GrowthRate_Gamma_truncatedOptions);
        				Gamma_Window_GrowthRate.add(GrowthRate_Gamma_truncated);

       					GrowthRate_labelt1_Gamma.setText("Minimum value e.g., 1.5e-8");
      					Gamma_Window_GrowthRate.add(GrowthRate_labelt1_Gamma);
	
						Gamma_Window_GrowthRate.add(TextGamma3_GrowthRate);

       					GrowthRate_labelt2_Gamma.setText("Maximum value e.g., 1.5e-7");
      					Gamma_Window_GrowthRate.add(GrowthRate_labelt2_Gamma);
	
						Gamma_Window_GrowthRate.add(TextGamma4_GrowthRate);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Gamma_Window_GrowthRate.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Gamma_Window_GrowthRate.add(labelX1h);
						

						GrowthRate_labelt1_Gamma.setVisible(false);
						TextGamma3_GrowthRate.setVisible(false);
						GrowthRate_labelt2_Gamma.setVisible(false);
						TextGamma4_GrowthRate.setVisible(false);
						
						GrowthRate_Gamma_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								GrowthRate_labelt1_Gamma.setVisible(true);
								TextGamma3_GrowthRate.setVisible(true);
								GrowthRate_labelt2_Gamma.setVisible(true);
								TextGamma4_GrowthRate.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								GrowthRate_labelt1_Gamma.setVisible(false);
								TextGamma3_GrowthRate.setVisible(false);
								GrowthRate_labelt2_Gamma.setVisible(false);
								TextGamma4_GrowthRate.setVisible(false);
								
								TextGamma3_GrowthRate.setText("");
								TextGamma4_GrowthRate.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Gamma_Window_Next_GrowthRate.setSize(70, 70); // long, high
        				ButtonNext_Gamma_Window_Next_GrowthRate.setVisible(true); 
       					Gamma_Window_GrowthRate.add(ButtonNext_Gamma_Window_Next_GrowthRate);
	
						//This creates a new button 
       					ButtonNext_Gamma_Window_Handler_Back_GrowthRate.setSize(70, 70); // long, high
        				ButtonNext_Gamma_Window_Handler_Back_GrowthRate.setVisible(true); 
       					Gamma_Window_GrowthRate.add(ButtonNext_Gamma_Window_Handler_Back_GrowthRate);
						}
        			} // end Gamma

				if (seletedKindOf == "beta")
					{
					
					FirstTimeBeta_Window_GrowthRate++;
					Beta_Window_GrowthRate.setVisible( true );
									
					if (FirstTimeBeta_Window_GrowthRate == 1)
						{
						Beta_Window_GrowthRate.setTitle( "Beta distribution" );
						Beta_Window_GrowthRate.setSize(500, 300);
						Beta_Window_GrowthRate.setLayout( new GridLayout( 7, 2 ) ); // 15 rows, 2 columns
						Beta_Window_GrowthRate.setBackground(Color.white);
						Beta_Window_GrowthRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Beta_Window_GrowthRate.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
       					labelX1b.setText("Shape (alpha) e.g., 0.5");
      					Beta_Window_GrowthRate.add(labelX1b);
	
						Beta_Window_GrowthRate.add(TextBeta1_GrowthRate);

						JLabel labelX2b = new JLabel();
       					labelX2b.setText("Shape (beta) e.g., 0.001");
      					Beta_Window_GrowthRate.add(labelX2b);
	
						Beta_Window_GrowthRate.add(TextBeta2_GrowthRate);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Beta_Window_GrowthRate.add(labelXgb);
      					
						String[] GrowthRate_Beta_truncatedOptions = {"no", "yes"};
  						JComboBox GrowthRate_Beta_truncated = new JComboBox(GrowthRate_Beta_truncatedOptions);
        				Beta_Window_GrowthRate.add(GrowthRate_Beta_truncated);

       					GrowthRate_labelt1_Beta.setText("Minimum value e.g., 1.5e-8");
      					Beta_Window_GrowthRate.add(GrowthRate_labelt1_Beta);
	
						Beta_Window_GrowthRate.add(TextBeta3_GrowthRate);

       					GrowthRate_labelt2_Beta.setText("Maximum value e.g., 1.5e-7");
      					Beta_Window_GrowthRate.add(GrowthRate_labelt2_Beta);
	
						Beta_Window_GrowthRate.add(TextBeta4_GrowthRate);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Beta_Window_GrowthRate.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Beta_Window_GrowthRate.add(labelX1h);
						

						GrowthRate_labelt1_Beta.setVisible(false);
						TextBeta3_GrowthRate.setVisible(false);
						GrowthRate_labelt2_Beta.setVisible(false);
						TextBeta4_GrowthRate.setVisible(false);
						
						GrowthRate_Beta_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								GrowthRate_labelt1_Beta.setVisible(true);
								TextBeta3_GrowthRate.setVisible(true);
								GrowthRate_labelt2_Beta.setVisible(true);
								TextBeta4_GrowthRate.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								GrowthRate_labelt1_Beta.setVisible(false);
								TextBeta3_GrowthRate.setVisible(false);
								GrowthRate_labelt2_Beta.setVisible(false);
								TextBeta4_GrowthRate.setVisible(false);
								
								TextBeta3_GrowthRate.setText("");
								TextBeta4_GrowthRate.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Beta_Window_Next_GrowthRate.setSize(70, 70); // long, high
        				ButtonNext_Beta_Window_Next_GrowthRate.setVisible(true); 
       					Beta_Window_GrowthRate.add(ButtonNext_Beta_Window_Next_GrowthRate);
	
						//This creates a new button 
       					ButtonNext_Beta_Window_Handler_Back_GrowthRate.setSize(70, 70); // long, high
        				ButtonNext_Beta_Window_Handler_Back_GrowthRate.setVisible(true); 
       					Beta_Window_GrowthRate.add(ButtonNext_Beta_Window_Handler_Back_GrowthRate);
						}
        			} // end Beta



				TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
				}
			});

			// Fix (double) - exit NOT saving
			ButtonNext_Fix_Window_Handler_Back_GrowthRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_GrowthRate = "";
				System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
			
				Fix_Window_GrowthRate.setVisible(false);
				Fix_Window_GrowthRate.dispose();

				TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
				}
			});

			// Fix (double) - exit saving
			ButtonNext_Fix_Window_Next_GrowthRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_GrowthRate = "";
				par1 = -1;
				Spar1 = "";

				Spar1 = TextFix_GrowthRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number should be specified");
					JOptionPane.showMessageDialog(null, "A number should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}
				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							Error = Error + 1;
							}
						}
					}
				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					else // Ok
						{
						OutputDistribution_GrowthRate = "fix " + Spar1;
						System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
						Fix_Window_GrowthRate.setVisible(false);
						Fix_Window_GrowthRate.dispose();
	
						TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
						}
					}
					}
				});		

			// Uniform (double) - exit NOT saving
			ButtonNext_Unif_Window_Handler_Back_GrowthRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_GrowthRate = "";
				System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
				Unif_Window_GrowthRate.setVisible(false);
				Unif_Window_GrowthRate.dispose();
				TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
				}
			});

			// Uniform (double) - exit saving
			ButtonNext_Unif_Window_Next_GrowthRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_GrowthRate = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";

				Spar1 = TextUnif1_GrowthRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (minimum) should be specified");
					JOptionPane.showMessageDialog(null, "A number (minimum) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}
				Spar2 = TextUnif2_GrowthRate.getText(); //String Spar1 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (maximum) should be specified");
					JOptionPane.showMessageDialog(null, "A number (maximum) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (minimum) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (minimum) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}
				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (maximum) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (maximum) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}


				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (minimum) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (minimum) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (maximum) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (maximum) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				if (Error == 0)
					{
					if (par1 > par2)
						{
						System.out.println("The minimum value should be smaller than the maximum value");
						JOptionPane.showMessageDialog(null, "The minimum value should be smaller than the maximum value", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					}
					
				if (Error == 0) // Ok
					{
					OutputDistribution_GrowthRate = "uniform " + Spar1 + " " + Spar2;
					System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
					Unif_Window_GrowthRate.setVisible(false);
					Unif_Window_GrowthRate.dispose();
	
					TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
					}

					}
				});	

			// Exponential (double) - exit NOT saving
			ButtonNext_Exp_Window_Handler_Back_GrowthRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_GrowthRate = "";
				System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
			
				Exp_Window_GrowthRate.setVisible(false);
				Exp_Window_GrowthRate.dispose();

				TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
				}
			});

			// Exponential (double) - exit saving
			ButtonNext_Exp_Window_Next_GrowthRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_GrowthRate = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextExp1_GrowthRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (rate) should be specified");
					JOptionPane.showMessageDialog(null, "A number (rate) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (rate) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (rate) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (rate) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (rate) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextExp3_GrowthRate.getText(); //String Spar1 = "23";
				Spar4 = TextExp4_GrowthRate.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_GrowthRate = "exp " + Spar1;
						System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
						Exp_Window_GrowthRate.setVisible(false);
						Exp_Window_GrowthRate.dispose();
	
						TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{

						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							}


						if (Error == 0)
							{
							OutputDistribution_GrowthRate = "exp " + Spar1 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
							Exp_Window_GrowthRate.setVisible(false);
							Exp_Window_GrowthRate.dispose();
		
							TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
							}
						}
					}
					}
				});	

			// Normal (double) - exit NOT saving
			ButtonNext_Norm_Window_Handler_Back_GrowthRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_GrowthRate = "";
				System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
			
				Norm_Window_GrowthRate.setVisible(false);
				Norm_Window_GrowthRate.dispose();

				TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
				}
			});

			// Normal (double) - exit saving
			ButtonNext_Norm_Window_Next_GrowthRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_GrowthRate = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextNorm1_GrowthRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (mean) should be specified");
					JOptionPane.showMessageDialog(null, "A number (mean) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (mean) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (mean) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (mean) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (mean) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				Spar2 = TextNorm2_GrowthRate.getText(); //String Spar2 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (variance) should be specified");
					JOptionPane.showMessageDialog(null, "A number (variance) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (variance) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (variance) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (variance) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (variance) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextNorm3_GrowthRate.getText(); //String Spar1 = "23";
				Spar4 = TextNorm4_GrowthRate.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_GrowthRate = "norm " + Spar1 + " " + Spar2;
						System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
						Norm_Window_GrowthRate.setVisible(false);
						Norm_Window_GrowthRate.dispose();
	
						TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{
						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							}

						if (Error == 0)
							{
							OutputDistribution_GrowthRate = "norm " + Spar1 + " " + Spar2 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
							Norm_Window_GrowthRate.setVisible(false);
							Norm_Window_GrowthRate.dispose();
		
							TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
							}
						}
					}
				}
				});	

			
			// Gamma (double) - exit NOT saving
			ButtonNext_Gamma_Window_Handler_Back_GrowthRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_GrowthRate = "";
				System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
			
				Gamma_Window_GrowthRate.setVisible(false);
				Gamma_Window_GrowthRate.dispose();

				TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
				}
			});

			// Gamma (double) - exit saving
			ButtonNext_Gamma_Window_Next_GrowthRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_GrowthRate = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextGamma1_GrowthRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (shape) should be specified");
					JOptionPane.showMessageDialog(null, "A number (shape) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (shape) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (shape) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (shape) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (shape) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				Spar2 = TextGamma2_GrowthRate.getText(); //String Spar2 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (scale) should be specified");
					JOptionPane.showMessageDialog(null, "A number (scale) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (scale) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (scale) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (scale) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (scale) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextGamma3_GrowthRate.getText(); //String Spar1 = "23";
				Spar4 = TextGamma4_GrowthRate.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_GrowthRate = "gamma " + Spar1 + " " + Spar2;
						System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
						Gamma_Window_GrowthRate.setVisible(false);
						Gamma_Window_GrowthRate.dispose();
	
						TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{

						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							}

						if (Error == 0)
							{
							OutputDistribution_GrowthRate = "gamma " + Spar1 + " " + Spar2 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
							Gamma_Window_GrowthRate.setVisible(false);
							Gamma_Window_GrowthRate.dispose();
		
							TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
							}
						}
					}
				}
				});	

			// Beta (double) - exit NOT saving
			ButtonNext_Beta_Window_Handler_Back_GrowthRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_GrowthRate = "";
				System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
			
				Beta_Window_GrowthRate.setVisible(false);
				Beta_Window_GrowthRate.dispose();

				TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
				}
			});

			// Beta (double) - exit saving
			ButtonNext_Beta_Window_Next_GrowthRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_GrowthRate = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextBeta1_GrowthRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (shape alpha) should be specified");
					JOptionPane.showMessageDialog(null, "A number (shape alpha) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (shape alpha) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (shape alpha) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (shape alpha) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (shape alpha) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				Spar2 = TextBeta2_GrowthRate.getText(); //String Spar2 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (shape beta) should be specified");
					JOptionPane.showMessageDialog(null, "A number (shape beta) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (shape beta) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (shape beta) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (shape beta) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (shape beta) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextBeta3_GrowthRate.getText(); //String Spar1 = "23";
				Spar4 = TextBeta4_GrowthRate.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_GrowthRate = "beta " + Spar1 + " " + Spar2;
						System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
						Beta_Window_GrowthRate.setVisible(false);
						Beta_Window_GrowthRate.dispose();
	
						TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{

						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							}

						if (Error == 0)
							{
							OutputDistribution_GrowthRate = "beta " + Spar1 + " " + Spar2 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_GrowthRate: " + OutputDistribution_GrowthRate);
							Beta_Window_GrowthRate.setVisible(false);
							Beta_Window_GrowthRate.dispose();
		
							TextGrowthRateProteinEvolverABC.setText(OutputDistribution_GrowthRate); 
							}
						}
					}
				}
				});	

		TextGrowthRateProteinEvolverABC.setLocation(450, 430); // right, down
        TextGrowthRateProteinEvolverABC.setSize(140, 30); // long, high
		TextGrowthRateProteinEvolverABC.setForeground(Color.darkGray);
		TextGrowthRateProteinEvolverABC.setFont(PLAINAtt);
        panel4.add(TextGrowthRateProteinEvolverABC);
		TextGrowthRateProteinEvolverABC.setVisible(false);
			

/*
       	label4line4.setText("___________________________ Recombination Hotspots ___________________________");
		label4line4.setLocation(450, 420); // right, down
        label4line4.setSize(600, 30); // long, high
      	panel4.add(label4line4);

		RecHotspotsProteinEvolverABC_group.add(RecHotspotsProteinEvolverABC_No);
		RecHotspotsProteinEvolverABC_group.add(RecHotspotsProteinEvolverABC_Yes);
		RecHotspotsProteinEvolverABC_No.setSelected(true);
		RecHotspotsProteinEvolverABC_No.setLocation(450, 450); // right, down
		RecHotspotsProteinEvolverABC_No.setSize(60, 30); // long, high
		RecHotspotsProteinEvolverABC_Yes.setLocation(520, 450); // right, down
		RecHotspotsProteinEvolverABC_Yes.setSize(60, 30); // long, high
		panel4.add(RecHotspotsProteinEvolverABC_No);
		panel4.add(RecHotspotsProteinEvolverABC_Yes);
		RecHotspotsProteinEvolverABC_No.setVisible(false);
		RecHotspotsProteinEvolverABC_Yes.setVisible(false);

       	label4m.setText("Name of the recombination hotspots file: ");
		label4m.setLocation(450, 480); // right, down
        label4m.setSize(450, 30); // long, high
      	panel4.add(label4m);
		
		TextRecHotspotsProteinEvolverABC.setLocation(750, 480); // right, down
        TextRecHotspotsProteinEvolverABC.setSize(180, 30); // long, high
        panel4.add(TextRecHotspotsProteinEvolverABC);
        TextRecHotspotsProteinEvolverABC.setVisible(true);
		TextRecHotspotsProteinEvolverABC.setText("UserHetRec");
		TextRecHotspotsProteinEvolverABC.setEditable(false);
		TextRecHotspotsProteinEvolverABC.setForeground(Color.darkGray);
        
		RecHotspotsProteinEvolverABC_No.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			TextRecHotspotsProteinEvolverABC.setEditable(false);
			TextRecHotspotsProteinEvolverABC_int = 0;
			TextRecHotspotsProteinEvolverABC.setForeground(Color.darkGray);
			label4m.setVisible(true);
			}
		});
		RecHotspotsProteinEvolverABC_Yes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			label4m.setVisible(true);
			TextRecHotspotsProteinEvolverABC.setEditable(true);
			TextRecHotspotsProteinEvolverABC_int = 1;
			TextRecHotspotsProteinEvolverABC.setForeground(Color.black);
			}
		});

       	label4line5.setText("__________________________________ Outgroup __________________________________");
		label4line5.setLocation(450, 530); // right, down
        label4line5.setSize(600, 30); // long, high
      	panel4.add(label4line5);
		
		OutgroupProteinEvolverABC_group.add(OutgroupProteinEvolverABC_No);
		OutgroupProteinEvolverABC_group.add(OutgroupProteinEvolverABC_Yes);
		OutgroupProteinEvolverABC_No.setSelected(true);
		OutgroupProteinEvolverABC_No.setLocation(450, 560); // right, down
		OutgroupProteinEvolverABC_No.setSize(60, 30); // long, high
		OutgroupProteinEvolverABC_Yes.setLocation(520, 560); // right, down
		OutgroupProteinEvolverABC_Yes.setSize(60, 30); // long, high
		panel4.add(OutgroupProteinEvolverABC_No);
		panel4.add(OutgroupProteinEvolverABC_Yes);
		OutgroupProteinEvolverABC_No.setVisible(false);
		OutgroupProteinEvolverABC_Yes.setVisible(false);
		
		label4n.setText("Outgroup length: ");
		label4n.setLocation(450, 590); // right, down
        label4n.setSize(250, 30); // long, high
      	panel4.add(label4n);

		TextOutgroupProteinEvolverABC.setLocation(600, 590); // right, down
        TextOutgroupProteinEvolverABC.setSize(180, 30); // long, high
        panel4.add(TextOutgroupProteinEvolverABC);
        TextOutgroupProteinEvolverABC.setVisible(true);
		TextOutgroupProteinEvolverABC.setText("0.1");
		TextOutgroupProteinEvolverABC.setEditable(false);
		TextOutgroupProteinEvolverABC.setForeground(Color.darkGray);

		OutgroupProteinEvolverABC_No.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			TextOutgroupProteinEvolverABC.setEditable(false);
			TextOutgroupProteinEvolverABC_int = 0;
			TextOutgroupProteinEvolverABC.setForeground(Color.darkGray);
			label4n.setVisible(true);
			}
		});
		OutgroupProteinEvolverABC_Yes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			label4n.setVisible(true);
			TextOutgroupProteinEvolverABC.setEditable(true);
			TextOutgroupProteinEvolverABC_int = 1;
			TextOutgroupProteinEvolverABC.setForeground(Color.black);
			}
		});
*/

		//This creates a new button
    	JButton ButtonNext4 = new JButton("Save and next");
		ButtonNext4.setLocation(800, 620); // right, down
        ButtonNext4.setSize(170, 70); // long, high
       	ButtonNext4.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run4Handler = new runButton4Handler();
		ButtonNext4.addActionListener(run4Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel4.add(ButtonNext4);

		
		/* end, default coalescent */
		TextPopSizeProteinEvolverABC.setText("fix 1000");
		TextGenTimeProteinEvolverABC.setVisible(false);
		GenTimeProteinEvolverABC_No.setVisible(true);
		GenTimeProteinEvolverABC_Yes.setVisible(true);
		TextGenTimeProteinEvolverABC.setText("");
		TextGenTimeProteinEvolverABC_int = 0;
		VariablePopSize.setEnabled(true);
		VariablePopSize.setVisible(true);
		TextGrowthRateProteinEvolverABC.setVisible(false);
		GrowthRateProteinEvolverABC.setVisible(false);
		MigrationModels.setEnabled(true);
		MigrationModels.setVisible(true);
		MigrationRate_Cte.setVisible(false);
		MigrationRate_Var.setVisible(false);
		TextMigrationRateProteinEvolverABC.setVisible(false);
		/*TextRecHotspotsProteinEvolverABC.setVisible(true);
		TextRecHotspotsProteinEvolverABC_int = 0;
		RecHotspotsProteinEvolverABC_No.setVisible(true);
		RecHotspotsProteinEvolverABC_Yes.setVisible(true);
		TextOutgroupProteinEvolverABC.setVisible(true);
		TextOutgroupProteinEvolverABC_int = 0;
		OutgroupProteinEvolverABC_No.setVisible(true);
		OutgroupProteinEvolverABC_Yes.setVisible(true);*/					
		}




	/* TAB 5: Substitution Models */
	public void createPage5()
		{
		panel5.setLayout( null );
		panel5.setPreferredSize(new Dimension(1100,800));

		JLabel label5a = new JLabel();
       	label5a.setText("Substitution Models");
		label5a.setFont(new Font("Arial", Font.BOLD, 14));
		label5a.setLocation(30, 15); // right, down
        label5a.setSize(400, 30); // long, high
      	panel5.add(label5a);


		//This creates a new button 
    	JButton ButtonNext5 = new JButton("Save and next");
		ButtonNext5.setLocation(800, 620); // right, down
        ButtonNext5.setSize(170, 70); // long, high
       	ButtonNext5.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run5Handler = new runButton5Handler();
		ButtonNext5.addActionListener(run5Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel5.add(ButtonNext5);
		}




	/* TAB 6: Nucleotide Regions - ProteinEvolverABC */
	public void createPage6()
		{
		panel6.setLayout( null );
		panel6.setPreferredSize(new Dimension(1100,800));

		JLabel label6a = new JLabel();
       	label6a.setText("Settings to simulate the Non-sequence (nucleotide) regions ");
		label6a.setFont(new Font("Arial", Font.BOLD, 14));
		label6a.setLocation(30, 15); // right, down
        label6a.setSize(400, 30); // long, high
      	panel6.add(label6a);

		
		//This creates a new button 
		JButton ButtonNext6 = new JButton("Save and next");
		ButtonNext6.setLocation(800, 620); // right, down
        ButtonNext6.setSize(170, 70); // long, high
       	ButtonNext6.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run6Handler = new runButton6Handler();
		ButtonNext6.addActionListener(run6Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel6.add(ButtonNext6);
		}





	/*** TAB 7: sequence regions I (ProteinEvolverABC) ***/
	public void createPage7()
		{
		panel7.setLayout( null );
		panel7.setPreferredSize(new Dimension(1100,800));

		JLabel label7a = new JLabel();
       	label7a.setText("Settings to simulate sequence data evolution");
		label7a.setFont(new Font("Arial", Font.BOLD, 14));
		label7a.setLocation(30, 15); // right, down
        label7a.setSize(500, 30); // long, high
      	panel7.add(label7a);

		JLabel label7ca = new JLabel();
		label7ca.setText("Required settings");
		label7ca.setFont(new Font("Arial", Font.PLAIN | Font.BOLD, 14));
		label7ca.setLocation(30, 50); // right, down
        label7ca.setSize(200, 30); // long, high
      	panel7.add(label7ca);


		
		JLabel label7af = new JLabel();
		label7af.setText("Substitution rate: ");
		label7af.setLocation(30, 90); // right, down
	    label7af.setSize(1000, 30); // long, high
    	panel7.add(label7af);

		SubstitutionRateProteinEvolverABC.setLocation(200, 90); // right, down
    	SubstitutionRateProteinEvolverABC.setSize(120, 30); // long, high
		panel7.add(SubstitutionRateProteinEvolverABC);

		SubstitutionRateProteinEvolverABC.setSelectedItem("uniform"); // default
		TextFix_SubstitutionRate.setText("4.0e-4"); // default
		TextSubstitutionRateProteinEvolverABC.setText("uniform 9.1e-5 4.0e-4"); // default
		TextUnif1_SubstitutionRate.setText("9.1e-5"); // default
		TextUnif2_SubstitutionRate.setText("4.0e-4"); // default

		Theta.setText(AVtheta); // default
//		Theta.setText("Theta: 76.8 268.8"); // default
		Unif_Window_SubstitutionRate.setVisible(false); // default
		Unif_Window_SubstitutionRate.dispose(); // default
		TextExp1_SubstitutionRate.setText("1.2e7"); // default
		TextNorm1_SubstitutionRate.setText("0.5"); // default
		TextNorm2_SubstitutionRate.setText("0.001"); // default
		TextGamma1_SubstitutionRate.setText("0.5"); // default
		TextGamma2_SubstitutionRate.setText("0.001"); // default
		TextBeta1_SubstitutionRate.setText("0.5"); // default
		TextBeta2_SubstitutionRate.setText("0.001"); // default
		
		SubstitutionRateProteinEvolverABC.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) 
				{
				JComboBox KindOf = (JComboBox) e.getSource();
				String seletedKindOf = (String) KindOf.getSelectedItem(); 	//String[] SubstitutionRateProteinEvolverABCOptions = {"no", "fix", "uniform", "exponential", "normal", "gamma", "beta"}; // fix, unif, norm(t), exp(t), gamma(t), beta(t)


				/*if (seletedKindOf == "no") 
					{
					Fix_Window_SubstitutionRate.setVisible(false);

					OutputDistribution_SubstitutionRate = "";
					TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
        			} */ // end no

				if (seletedKindOf == "fix")
					{
					Theta.setText(" ");
					FirstTimeFix_Window_SubstitutionRate++;
					Fix_Window_SubstitutionRate.setVisible( true );
									
					if (FirstTimeFix_Window_SubstitutionRate == 1)
						{
						Fix_Window_SubstitutionRate.setTitle( "Fix" );
						Fix_Window_SubstitutionRate.setSize(400, 300);
						Fix_Window_SubstitutionRate.setLayout( new GridLayout( 3, 2 ) ); // 15 rows, 2 columns
						Fix_Window_SubstitutionRate.setBackground(Color.white);
						Fix_Window_SubstitutionRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Fix_Window_SubstitutionRate.setLocationRelativeTo(null);

						JLabel labelX1 = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1.setText("Value e.g., 9.1e-5");
						//labelX1.setLocation(30, 130); // right, down
        				//labelX1.setSize(300, 30); // long, high
      					Fix_Window_SubstitutionRate.add(labelX1);
	
						Fix_Window_SubstitutionRate.add(TextFix_SubstitutionRate);	
					
						JLabel labelXB = new JLabel();
       					labelXB.setText(" ");
      					Fix_Window_SubstitutionRate.add(labelXB);
						JLabel labelXC = new JLabel();
       					labelXC.setText(" ");
      					Fix_Window_SubstitutionRate.add(labelXC);
				

						//This creates a new button 
       					ButtonNext_Fix_Window_Next_SubstitutionRate.setSize(70, 70); // long, high
       	 				ButtonNext_Fix_Window_Next_SubstitutionRate.setVisible(true); 
       					Fix_Window_SubstitutionRate.add(ButtonNext_Fix_Window_Next_SubstitutionRate);

						//This creates a new button 
    	   				ButtonNext_Fix_Window_Handler_Back_SubstitutionRate.setSize(70, 70); // long, high
       	 				ButtonNext_Fix_Window_Handler_Back_SubstitutionRate.setVisible(true); 
       					Fix_Window_SubstitutionRate.add(ButtonNext_Fix_Window_Handler_Back_SubstitutionRate);
						}
        			} // end fix

				if (seletedKindOf == "uniform")
					{
					Theta.setText(" ");
					FirstTimeUnif_Window_SubstitutionRate++;
					Unif_Window_SubstitutionRate.setVisible( true );
									
					if (FirstTimeUnif_Window_SubstitutionRate == 1)
						{
						Unif_Window_SubstitutionRate.setTitle( "Uniform distribution" );
						Unif_Window_SubstitutionRate.setSize(500, 300);
						Unif_Window_SubstitutionRate.setLayout( new GridLayout( 4, 2 ) ); // 15 rows, 2 columns
						Unif_Window_SubstitutionRate.setBackground(Color.white);
						Unif_Window_SubstitutionRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Unif_Window_SubstitutionRate.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1b.setText("Minimum value e.g., 9.1e-5");
      					Unif_Window_SubstitutionRate.add(labelX1b);
	
						Unif_Window_SubstitutionRate.add(TextUnif1_SubstitutionRate);	
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText("Maximum value e.g., 5.0e-4");
      					Unif_Window_SubstitutionRate.add(labelX1c);
	
						Unif_Window_SubstitutionRate.add(TextUnif2_SubstitutionRate);	
						
						JLabel labelXBc = new JLabel();
       					labelXBc.setText(" ");
      					Unif_Window_SubstitutionRate.add(labelXBc);
						JLabel labelXCc = new JLabel();
    	   				labelXCc.setText(" ");
      					Unif_Window_SubstitutionRate.add(labelXCc);
					
	
						//This creates a new button 
    	   				ButtonNext_Unif_Window_Next_SubstitutionRate.setSize(70, 70); // long, high
        				ButtonNext_Unif_Window_Next_SubstitutionRate.setVisible(true); 
       					Unif_Window_SubstitutionRate.add(ButtonNext_Unif_Window_Next_SubstitutionRate);
	
						//This creates a new button 
       					ButtonNext_Unif_Window_Handler_Back_SubstitutionRate.setSize(70, 70); // long, high
        				ButtonNext_Unif_Window_Handler_Back_SubstitutionRate.setVisible(true); 
       					Unif_Window_SubstitutionRate.add(ButtonNext_Unif_Window_Handler_Back_SubstitutionRate);
						}
        			} // end unif

				if (seletedKindOf == "exponential")
					{
					Theta.setText(" ");
					FirstTimeExp_Window_SubstitutionRate++;
					Exp_Window_SubstitutionRate.setVisible( true );
									
					if (FirstTimeExp_Window_SubstitutionRate == 1)
						{
						Exp_Window_SubstitutionRate.setTitle( "Exponential distribution" );
						Exp_Window_SubstitutionRate.setSize(500, 300);
						Exp_Window_SubstitutionRate.setLayout( new GridLayout( 6, 2 ) ); // 15 rows, 2 columns
						Exp_Window_SubstitutionRate.setBackground(Color.white);
						Exp_Window_SubstitutionRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Exp_Window_SubstitutionRate.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1b.setText("Rate e.g., 1.2e7");
      					Exp_Window_SubstitutionRate.add(labelX1b);
	
						Exp_Window_SubstitutionRate.add(TextExp1_SubstitutionRate);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Exp_Window_SubstitutionRate.add(labelXgb);	
					
						String[] SubstitutionRate_Exp_truncatedOptions = {"no", "yes"};
    					JComboBox SubstitutionRate_Exp_truncated = new JComboBox(SubstitutionRate_Exp_truncatedOptions);
        				Exp_Window_SubstitutionRate.add(SubstitutionRate_Exp_truncated);

       					SubstitutionRate_labelt1_Exp.setText("Minimum value e.g., 9.1e-5");
      					Exp_Window_SubstitutionRate.add(SubstitutionRate_labelt1_Exp);
	
						Exp_Window_SubstitutionRate.add(TextExp3_SubstitutionRate);

       					SubstitutionRate_labelt2_Exp.setText("Maximum value e.g., 4.0e-4");
      					Exp_Window_SubstitutionRate.add(SubstitutionRate_labelt2_Exp);
	
						Exp_Window_SubstitutionRate.add(TextExp4_SubstitutionRate);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Exp_Window_SubstitutionRate.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Exp_Window_SubstitutionRate.add(labelX1h);
						

						SubstitutionRate_labelt1_Exp.setVisible(false);
						TextExp3_SubstitutionRate.setVisible(false);
						SubstitutionRate_labelt2_Exp.setVisible(false);
						TextExp4_SubstitutionRate.setVisible(false);
						
						SubstitutionRate_Exp_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								SubstitutionRate_labelt1_Exp.setVisible(true);
								TextExp3_SubstitutionRate.setVisible(true);
								SubstitutionRate_labelt2_Exp.setVisible(true);
								TextExp4_SubstitutionRate.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								SubstitutionRate_labelt1_Exp.setVisible(false);
								TextExp3_SubstitutionRate.setVisible(false);
								SubstitutionRate_labelt2_Exp.setVisible(false);
								TextExp4_SubstitutionRate.setVisible(false);
								
								TextExp3_SubstitutionRate.setText("");
								TextExp4_SubstitutionRate.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Exp_Window_Next_SubstitutionRate.setSize(70, 70); // long, high
        				ButtonNext_Exp_Window_Next_SubstitutionRate.setVisible(true); 
       					Exp_Window_SubstitutionRate.add(ButtonNext_Exp_Window_Next_SubstitutionRate);
	
						//This creates a new button 
       					ButtonNext_Exp_Window_Handler_Back_SubstitutionRate.setSize(70, 70); // long, high
        				ButtonNext_Exp_Window_Handler_Back_SubstitutionRate.setVisible(true); 
       					Exp_Window_SubstitutionRate.add(ButtonNext_Exp_Window_Handler_Back_SubstitutionRate);
						}
        			} // end Exp

				if (seletedKindOf == "normal")
					{
					Theta.setText(" ");
					FirstTimeNorm_Window_SubstitutionRate++;
					Norm_Window_SubstitutionRate.setVisible( true );
									
					if (FirstTimeNorm_Window_SubstitutionRate == 1)
						{
						Norm_Window_SubstitutionRate.setTitle( "Normal distribution" );
						Norm_Window_SubstitutionRate.setSize(500, 300);
						Norm_Window_SubstitutionRate.setLayout( new GridLayout( 7, 2 ) ); // 15 rows, 2 columns
						Norm_Window_SubstitutionRate.setBackground(Color.white);
						Norm_Window_SubstitutionRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Norm_Window_SubstitutionRate.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
       					labelX1b.setText("Mean (location) e.g., 0.5");
      					Norm_Window_SubstitutionRate.add(labelX1b);
	
						Norm_Window_SubstitutionRate.add(TextNorm1_SubstitutionRate);

						JLabel labelX2b = new JLabel();
       					labelX2b.setText("Variance (squared scale) e.g., 0.001");
      					Norm_Window_SubstitutionRate.add(labelX2b);
	
						Norm_Window_SubstitutionRate.add(TextNorm2_SubstitutionRate);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Norm_Window_SubstitutionRate.add(labelXgb);	
					
						String[] SubstitutionRate_Norm_truncatedOptions = {"no", "yes"};
  						JComboBox SubstitutionRate_Norm_truncated = new JComboBox(SubstitutionRate_Norm_truncatedOptions);
        				Norm_Window_SubstitutionRate.add(SubstitutionRate_Norm_truncated);

       					SubstitutionRate_labelt1_Norm.setText("Minimum value e.g., 9.1e-5");
      					Norm_Window_SubstitutionRate.add(SubstitutionRate_labelt1_Norm);
	
						Norm_Window_SubstitutionRate.add(TextNorm3_SubstitutionRate);

       					SubstitutionRate_labelt2_Norm.setText("Maximum value e.g., 4.0e-4");
      					Norm_Window_SubstitutionRate.add(SubstitutionRate_labelt2_Norm);
	
						Norm_Window_SubstitutionRate.add(TextNorm4_SubstitutionRate);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Norm_Window_SubstitutionRate.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Norm_Window_SubstitutionRate.add(labelX1h);
						

						SubstitutionRate_labelt1_Norm.setVisible(false);
						TextNorm3_SubstitutionRate.setVisible(false);
						SubstitutionRate_labelt2_Norm.setVisible(false);
						TextNorm4_SubstitutionRate.setVisible(false);
						
						SubstitutionRate_Norm_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								SubstitutionRate_labelt1_Norm.setVisible(true);
								TextNorm3_SubstitutionRate.setVisible(true);
								SubstitutionRate_labelt2_Norm.setVisible(true);
								TextNorm4_SubstitutionRate.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								SubstitutionRate_labelt1_Norm.setVisible(false);
								TextNorm3_SubstitutionRate.setVisible(false);
								SubstitutionRate_labelt2_Norm.setVisible(false);
								TextNorm4_SubstitutionRate.setVisible(false);
								
								TextNorm3_SubstitutionRate.setText("");
								TextNorm4_SubstitutionRate.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Norm_Window_Next_SubstitutionRate.setSize(70, 70); // long, high
        				ButtonNext_Norm_Window_Next_SubstitutionRate.setVisible(true); 
       					Norm_Window_SubstitutionRate.add(ButtonNext_Norm_Window_Next_SubstitutionRate);
	
						//This creates a new button 
       					ButtonNext_Norm_Window_Handler_Back_SubstitutionRate.setSize(70, 70); // long, high
        				ButtonNext_Norm_Window_Handler_Back_SubstitutionRate.setVisible(true); 
       					Norm_Window_SubstitutionRate.add(ButtonNext_Norm_Window_Handler_Back_SubstitutionRate);
						}
        			} // end Norm

				if (seletedKindOf == "gamma")
					{
					Theta.setText(" ");
					FirstTimeGamma_Window_SubstitutionRate++;
					Gamma_Window_SubstitutionRate.setVisible( true );
									
					if (FirstTimeGamma_Window_SubstitutionRate == 1)
						{
						Gamma_Window_SubstitutionRate.setTitle( "Gamma distribution" );
						Gamma_Window_SubstitutionRate.setSize(500, 300);
						Gamma_Window_SubstitutionRate.setLayout( new GridLayout( 7, 2 ) ); // 15 rows, 2 columns
						Gamma_Window_SubstitutionRate.setBackground(Color.white);
						Gamma_Window_SubstitutionRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Gamma_Window_SubstitutionRate.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
       					labelX1b.setText("Shape e.g., 0.5");
      					Gamma_Window_SubstitutionRate.add(labelX1b);
	
						Gamma_Window_SubstitutionRate.add(TextGamma1_SubstitutionRate);

						JLabel labelX2b = new JLabel();
       					labelX2b.setText("Scale e.g., 0.001");
      					Gamma_Window_SubstitutionRate.add(labelX2b);
	
						Gamma_Window_SubstitutionRate.add(TextGamma2_SubstitutionRate);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Gamma_Window_SubstitutionRate.add(labelXgb);	
					
						String[] SubstitutionRate_Gamma_truncatedOptions = {"no", "yes"};
  						JComboBox SubstitutionRate_Gamma_truncated = new JComboBox(SubstitutionRate_Gamma_truncatedOptions);
        				Gamma_Window_SubstitutionRate.add(SubstitutionRate_Gamma_truncated);

       					SubstitutionRate_labelt1_Gamma.setText("Minimum value e.g., 9.1e-5");
      					Gamma_Window_SubstitutionRate.add(SubstitutionRate_labelt1_Gamma);
	
						Gamma_Window_SubstitutionRate.add(TextGamma3_SubstitutionRate);

       					SubstitutionRate_labelt2_Gamma.setText("Maximum value e.g., 4.0e-4");
      					Gamma_Window_SubstitutionRate.add(SubstitutionRate_labelt2_Gamma);
	
						Gamma_Window_SubstitutionRate.add(TextGamma4_SubstitutionRate);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Gamma_Window_SubstitutionRate.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Gamma_Window_SubstitutionRate.add(labelX1h);
						

						SubstitutionRate_labelt1_Gamma.setVisible(false);
						TextGamma3_SubstitutionRate.setVisible(false);
						SubstitutionRate_labelt2_Gamma.setVisible(false);
						TextGamma4_SubstitutionRate.setVisible(false);
						
						SubstitutionRate_Gamma_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								SubstitutionRate_labelt1_Gamma.setVisible(true);
								TextGamma3_SubstitutionRate.setVisible(true);
								SubstitutionRate_labelt2_Gamma.setVisible(true);
								TextGamma4_SubstitutionRate.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								SubstitutionRate_labelt1_Gamma.setVisible(false);
								TextGamma3_SubstitutionRate.setVisible(false);
								SubstitutionRate_labelt2_Gamma.setVisible(false);
								TextGamma4_SubstitutionRate.setVisible(false);
								
								TextGamma3_SubstitutionRate.setText("");
								TextGamma4_SubstitutionRate.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Gamma_Window_Next_SubstitutionRate.setSize(70, 70); // long, high
        				ButtonNext_Gamma_Window_Next_SubstitutionRate.setVisible(true); 
       					Gamma_Window_SubstitutionRate.add(ButtonNext_Gamma_Window_Next_SubstitutionRate);
	
						//This creates a new button 
       					ButtonNext_Gamma_Window_Handler_Back_SubstitutionRate.setSize(70, 70); // long, high
        				ButtonNext_Gamma_Window_Handler_Back_SubstitutionRate.setVisible(true); 
       					Gamma_Window_SubstitutionRate.add(ButtonNext_Gamma_Window_Handler_Back_SubstitutionRate);
						}
        			} // end Gamma

				if (seletedKindOf == "beta")
					{
					Theta.setText(" ");
					FirstTimeBeta_Window_SubstitutionRate++;
					Beta_Window_SubstitutionRate.setVisible( true );
									
					if (FirstTimeBeta_Window_SubstitutionRate == 1)
						{
						Beta_Window_SubstitutionRate.setTitle( "Beta distribution" );
						Beta_Window_SubstitutionRate.setSize(500, 300);
						Beta_Window_SubstitutionRate.setLayout( new GridLayout( 7, 2 ) ); // 15 rows, 2 columns
						Beta_Window_SubstitutionRate.setBackground(Color.white);
						Beta_Window_SubstitutionRate.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Beta_Window_SubstitutionRate.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
       					labelX1b.setText("Shape (alpha) e.g., 0.5");
      					Beta_Window_SubstitutionRate.add(labelX1b);
	
						Beta_Window_SubstitutionRate.add(TextBeta1_SubstitutionRate);

						JLabel labelX2b = new JLabel();
       					labelX2b.setText("Shape (beta) e.g., 0.001");
      					Beta_Window_SubstitutionRate.add(labelX2b);
	
						Beta_Window_SubstitutionRate.add(TextBeta2_SubstitutionRate);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Beta_Window_SubstitutionRate.add(labelXgb);	
						
						String[] SubstitutionRate_Beta_truncatedOptions = {"no", "yes"};
  						JComboBox SubstitutionRate_Beta_truncated = new JComboBox(SubstitutionRate_Beta_truncatedOptions);
        				Beta_Window_SubstitutionRate.add(SubstitutionRate_Beta_truncated);

       					SubstitutionRate_labelt1_Beta.setText("Minimum value e.g., 9.1e-5");
      					Beta_Window_SubstitutionRate.add(SubstitutionRate_labelt1_Beta);
	
						Beta_Window_SubstitutionRate.add(TextBeta3_SubstitutionRate);

       					SubstitutionRate_labelt2_Beta.setText("Maximum value e.g., 4.0e-4");
      					Beta_Window_SubstitutionRate.add(SubstitutionRate_labelt2_Beta);
	
						Beta_Window_SubstitutionRate.add(TextBeta4_SubstitutionRate);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Beta_Window_SubstitutionRate.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Beta_Window_SubstitutionRate.add(labelX1h);
						

						SubstitutionRate_labelt1_Beta.setVisible(false);
						TextBeta3_SubstitutionRate.setVisible(false);
						SubstitutionRate_labelt2_Beta.setVisible(false);
						TextBeta4_SubstitutionRate.setVisible(false);
						
						SubstitutionRate_Beta_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								SubstitutionRate_labelt1_Beta.setVisible(true);
								TextBeta3_SubstitutionRate.setVisible(true);
								SubstitutionRate_labelt2_Beta.setVisible(true);
								TextBeta4_SubstitutionRate.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								SubstitutionRate_labelt1_Beta.setVisible(false);
								TextBeta3_SubstitutionRate.setVisible(false);
								SubstitutionRate_labelt2_Beta.setVisible(false);
								TextBeta4_SubstitutionRate.setVisible(false);
								
								TextBeta3_SubstitutionRate.setText("");
								TextBeta4_SubstitutionRate.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Beta_Window_Next_SubstitutionRate.setSize(70, 70); // long, high
        				ButtonNext_Beta_Window_Next_SubstitutionRate.setVisible(true); 
       					Beta_Window_SubstitutionRate.add(ButtonNext_Beta_Window_Next_SubstitutionRate);
	
						//This creates a new button 
       					ButtonNext_Beta_Window_Handler_Back_SubstitutionRate.setSize(70, 70); // long, high
        				ButtonNext_Beta_Window_Handler_Back_SubstitutionRate.setVisible(true); 
       					Beta_Window_SubstitutionRate.add(ButtonNext_Beta_Window_Handler_Back_SubstitutionRate);
						}
        			} // end Beta


				TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
				}

			});

			// Fix (double) - exit NOT saving
			ButtonNext_Fix_Window_Handler_Back_SubstitutionRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_SubstitutionRate = "";
				System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
			
				Fix_Window_SubstitutionRate.setVisible(false);
				Fix_Window_SubstitutionRate.dispose();

				TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
				Theta.setText(" ");
				}
			});

			// Fix (double) - exit saving
			ButtonNext_Fix_Window_Next_SubstitutionRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_SubstitutionRate = "";
				par1 = -1;
				Spar1 = "";

				Spar1 = TextFix_SubstitutionRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number should be specified");
					JOptionPane.showMessageDialog(null, "A number should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}
				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}
				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
						
					// checking Theta_MAX
					if (NoDemographics == 0)
						{
						if (KindDataProteinEvolverABC == "haploid") 
							{
							Theta_MAX = 2 * 1 * PopSize_MAX * par1 * SequenceLengthNt / 3;
							Theta_MAX = Theta_MAX*100;
							Theta_MAX = (double)((int) Theta_MAX);
							Theta_MAX = Theta_MAX /100;									
							AVtheta = "Theta: " + String.valueOf(Theta_MAX);
							Theta.setText(AVtheta);
    	    				} 
						if (KindDataProteinEvolverABC == "diploid")
							{
							Theta_MAX = 2 * 2 * PopSize_MAX * par1 * SequenceLengthNt / 3;
							Theta_MAX = Theta_MAX*100;
							Theta_MAX = (double)((int) Theta_MAX);
							Theta_MAX = Theta_MAX /100;
							AVtheta = "Theta: " + String.valueOf(Theta_MAX);
							Theta.setText(AVtheta);
	        				}

						System.out.println("Population substitution rate (Theta max): " + Theta_MAX);
						}
						
					if (Error == 0) // Ok
						{
						OutputDistribution_SubstitutionRate = "fix " + Spar1;
						System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
						Fix_Window_SubstitutionRate.setVisible(false);
						Fix_Window_SubstitutionRate.dispose();
	
						TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
						}
					}
					}
				});		

			// Uniform (double) - exit NOT saving
			ButtonNext_Unif_Window_Handler_Back_SubstitutionRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_SubstitutionRate = "";
				System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
			
				Unif_Window_SubstitutionRate.setVisible(false);
				Unif_Window_SubstitutionRate.dispose();

				TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
				Theta.setText(" ");
				}
			});

			// Uniform (double) - exit saving
			ButtonNext_Unif_Window_Next_SubstitutionRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_SubstitutionRate = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";

				Spar1 = TextUnif1_SubstitutionRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (minimum) should be specified");
					JOptionPane.showMessageDialog(null, "A number (minimum) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}
				Spar2 = TextUnif2_SubstitutionRate.getText(); //String Spar1 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (maximum) should be specified");
					JOptionPane.showMessageDialog(null, "A number (maximum) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (minimum) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (minimum) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}
				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (maximum) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (maximum) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}


				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (minimum) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (minimum) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (maximum) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (maximum) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					
					// checking Theta_MAX
					if (NoDemographics == 0)
						{
						if (KindDataProteinEvolverABC == "haploid") 
							{
							Theta_MAX = 2 * 1 * PopSize_MAX * par2 * SequenceLengthNt / 3;
							Theta_MIN = 2 * 1 * PopSize_MAX * par1 * SequenceLengthNt / 3;
							Theta_MAX = Theta_MAX*100;
							Theta_MAX = (double)((int) Theta_MAX);
							Theta_MAX = Theta_MAX /100;
							Theta_MIN = Theta_MIN*100;
							Theta_MIN = (double)((int) Theta_MIN);
							Theta_MIN = Theta_MIN /100;
							String A1 = "Theta: " + String.valueOf(Theta_MIN) + " ";
							String A2 = String.valueOf(Theta_MAX);
							String A3 = A1 + A2;
							Theta.setText(A3);
    	    				} 
						if (KindDataProteinEvolverABC == "diploid")
							{
							Theta_MAX = 2 * 2 * PopSize_MAX * par2 * SequenceLengthNt / 3;
							Theta_MIN = 2 * 2 * PopSize_MAX * par1 * SequenceLengthNt / 3;
							Theta_MAX = Theta_MAX*100;
							Theta_MAX = (double)((int) Theta_MAX);
							Theta_MAX = Theta_MAX /100;
							Theta_MIN = Theta_MIN*100;
							Theta_MIN = (double)((int) Theta_MIN);
							Theta_MIN = Theta_MIN /100;
							String A1 = "Theta: " + String.valueOf(Theta_MIN) + " ";
							String A2 = String.valueOf(Theta_MAX);
							String A3 = A1 + A2;
							Theta.setText(A3);
	        				}
						
						
						System.out.println("Population substitution rate (Theta max): " + Theta_MAX);
						}
						
					}


				if (par1 > par2 && Error == 0)
					{
					System.out.println("The minimum value should be smaller than the maximum value");
					JOptionPane.showMessageDialog(null, "The minimum value should be smaller than the maximum value", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
					
				if (Error == 0) // Ok
					{
					OutputDistribution_SubstitutionRate = "uniform " + Spar1 + " " + Spar2;
					System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
					Unif_Window_SubstitutionRate.setVisible(false);
					Unif_Window_SubstitutionRate.dispose();
	
					TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
					}

					}
				});	

			// Exponential (double) - exit NOT saving
			ButtonNext_Exp_Window_Handler_Back_SubstitutionRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_SubstitutionRate = "";
				System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
			
				Exp_Window_SubstitutionRate.setVisible(false);
				Exp_Window_SubstitutionRate.dispose();

				TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
				Theta.setText(" ");
				}
			});

			// Exponential (double) - exit saving
			ButtonNext_Exp_Window_Next_SubstitutionRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_SubstitutionRate = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextExp1_SubstitutionRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (rate) should be specified");
					JOptionPane.showMessageDialog(null, "A number (rate) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (rate) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (rate) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (rate) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (rate) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextExp3_SubstitutionRate.getText(); //String Spar1 = "23";
				Spar4 = TextExp4_SubstitutionRate.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_SubstitutionRate = "exp " + Spar1;
						System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
						Exp_Window_SubstitutionRate.setVisible(false);
						Exp_Window_SubstitutionRate.dispose();
	
						TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{
						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
						
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							// checking Theta_MAX
							if (NoDemographics == 0)
								{
								if (KindDataProteinEvolverABC == "haploid") 
									{
									Theta_MAX = 2 * 1 * PopSize_MAX * par4 * SequenceLengthNt / 3;
									Theta_MIN = 2 * 1 * PopSize_MAX * par3 * SequenceLengthNt / 3;
									Theta_MAX = Theta_MAX*100;
									Theta_MAX = (double)((int) Theta_MAX);
									Theta_MAX = Theta_MAX /100;
									Theta_MIN = Theta_MIN*100;
									Theta_MIN = (double)((int) Theta_MIN);
									Theta_MIN = Theta_MIN /100;
									String A1 = "Theta: " + String.valueOf(Theta_MIN) + " ";
									String A2 = String.valueOf(Theta_MAX);
									String A3 = A1 + A2;
									Theta.setText(A3);
    	    						} 
								if (KindDataProteinEvolverABC == "diploid")
									{
									Theta_MAX = 2 * 2 * PopSize_MAX * par4 * SequenceLengthNt / 3;
									Theta_MIN = 2 * 2 * PopSize_MAX * par3 * SequenceLengthNt / 3;
									Theta_MAX = Theta_MAX*100;
									Theta_MAX = (double)((int) Theta_MAX);
									Theta_MAX = Theta_MAX /100;
									Theta_MIN = Theta_MIN*100;
									Theta_MIN = (double)((int) Theta_MIN);
									Theta_MIN = Theta_MIN /100;
									String A1 = "Theta: " + String.valueOf(Theta_MIN) + " ";
									String A2 = String.valueOf(Theta_MAX);
									String A3 = A1 + A2;
									Theta.setText(A3);
	        						}
								System.out.println("Population substitution rate (Theta max): " + Theta_MAX);
								}
							
							}


						if (Error == 0)
							{
							OutputDistribution_SubstitutionRate = "exp " + Spar1 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
							Exp_Window_SubstitutionRate.setVisible(false);
							Exp_Window_SubstitutionRate.dispose();
		
							TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
							}
						}
					}
					}
				});	

			// Normal (double) - exit NOT saving
			ButtonNext_Norm_Window_Handler_Back_SubstitutionRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_SubstitutionRate = "";
				System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
			
				Norm_Window_SubstitutionRate.setVisible(false);
				Norm_Window_SubstitutionRate.dispose();

				TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
				Theta.setText(" ");
				}
			});

			// Normal (double) - exit saving
			ButtonNext_Norm_Window_Next_SubstitutionRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_SubstitutionRate = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextNorm1_SubstitutionRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (mean) should be specified");
					JOptionPane.showMessageDialog(null, "A number (mean) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (mean) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (mean) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (mean) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (mean) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				Spar2 = TextNorm2_SubstitutionRate.getText(); //String Spar2 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (variance) should be specified");
					JOptionPane.showMessageDialog(null, "A number (variance) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (variance) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (variance) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (variance) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (variance) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextNorm3_SubstitutionRate.getText(); //String Spar1 = "23";
				Spar4 = TextNorm4_SubstitutionRate.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_SubstitutionRate = "norm " + Spar1 + " " + Spar2;
						System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
						Norm_Window_SubstitutionRate.setVisible(false);
						Norm_Window_SubstitutionRate.dispose();
	
						TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{
						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							// checking Theta_MAX
							if (NoDemographics == 0)
								{
								if (KindDataProteinEvolverABC == "haploid") 
									{
									Theta_MAX = 2 * 1 * PopSize_MAX * par4 * SequenceLengthNt / 3;
									Theta_MIN = 2 * 1 * PopSize_MAX * par3 * SequenceLengthNt / 3;
									Theta_MAX = Theta_MAX*100;
									Theta_MAX = (double)((int) Theta_MAX);
									Theta_MAX = Theta_MAX /100;
									Theta_MIN = Theta_MIN*100;
									Theta_MIN = (double)((int) Theta_MIN);
									Theta_MIN = Theta_MIN /100;
									String A1 = "Theta: " + String.valueOf(Theta_MIN) + " ";
									String A2 = String.valueOf(Theta_MAX);
									String A3 = A1 + A2;
									Theta.setText(A3);
    	    						} 
								if (KindDataProteinEvolverABC == "diploid")
									{
									Theta_MAX = 2 * 2 * PopSize_MAX * par4 * SequenceLengthNt / 3;
									Theta_MIN = 2 * 2 * PopSize_MAX * par3 * SequenceLengthNt / 3;
									Theta_MAX = Theta_MAX*100;
									Theta_MAX = (double)((int) Theta_MAX);
									Theta_MAX = Theta_MAX /100;
									Theta_MIN = Theta_MIN*100;
									Theta_MIN = (double)((int) Theta_MIN);
									Theta_MIN = Theta_MIN /100;
									String A1 = "Theta: " + String.valueOf(Theta_MIN) + " ";
									String A2 = String.valueOf(Theta_MAX);
									String A3 = A1 + A2;
									Theta.setText(A3);
	        						}
								System.out.println("Population substitution rate (Theta max): " + Theta_MAX);
								}
								
							}

						if (Error == 0)
							{
							OutputDistribution_SubstitutionRate = "norm " + Spar1 + " " + Spar2 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
							Norm_Window_SubstitutionRate.setVisible(false);
							Norm_Window_SubstitutionRate.dispose();
		
							TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
							}
						}
					}
				}
				});	

			
			// Gamma (double) - exit NOT saving
			ButtonNext_Gamma_Window_Handler_Back_SubstitutionRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_SubstitutionRate = "";
				System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
			
				Gamma_Window_SubstitutionRate.setVisible(false);
				Gamma_Window_SubstitutionRate.dispose();

				TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
				Theta.setText(" ");
				}
			});

			// Gamma (double) - exit saving
			ButtonNext_Gamma_Window_Next_SubstitutionRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_SubstitutionRate = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextGamma1_SubstitutionRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (shape) should be specified");
					JOptionPane.showMessageDialog(null, "A number (shape) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (shape) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (shape) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (shape) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (shape) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				Spar2 = TextGamma2_SubstitutionRate.getText(); //String Spar2 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (scale) should be specified");
					JOptionPane.showMessageDialog(null, "A number (scale) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (scale) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (scale) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (scale) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (scale) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextGamma3_SubstitutionRate.getText(); //String Spar1 = "23";
				Spar4 = TextGamma4_SubstitutionRate.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_SubstitutionRate = "gamma " + Spar1 + " " + Spar2;
						System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
						Gamma_Window_SubstitutionRate.setVisible(false);
						Gamma_Window_SubstitutionRate.dispose();
	
						TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{

						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							// checking Theta_MAX
							if (NoDemographics == 0)
								{
								if (KindDataProteinEvolverABC == "haploid") 
									{
									Theta_MAX = 2 * 1 * PopSize_MAX * par4 * SequenceLengthNt / 3;
									Theta_MIN = 2 * 1 * PopSize_MAX * par3 * SequenceLengthNt / 3;
									Theta_MAX = Theta_MAX*100;
									Theta_MAX = (double)((int) Theta_MAX);
									Theta_MAX = Theta_MAX /100;
									Theta_MIN = Theta_MIN*100;
									Theta_MIN = (double)((int) Theta_MIN);
									Theta_MIN = Theta_MIN /100;
									String A1 = "Theta: " + String.valueOf(Theta_MIN) + " ";
									String A2 = String.valueOf(Theta_MAX);
									String A3 = A1 + A2;
									Theta.setText(A3);
    	    						} 
								if (KindDataProteinEvolverABC == "diploid")
									{
									Theta_MAX = 2 * 2 * PopSize_MAX * par4 * SequenceLengthNt / 3;
									Theta_MIN = 2 * 2 * PopSize_MAX * par3 * SequenceLengthNt / 3;
									Theta_MAX = Theta_MAX*100;
									Theta_MAX = (double)((int) Theta_MAX);
									Theta_MAX = Theta_MAX /100;
									Theta_MIN = Theta_MIN*100;
									Theta_MIN = (double)((int) Theta_MIN);
									Theta_MIN = Theta_MIN /100;
									String A1 = "Theta: " + String.valueOf(Theta_MIN) + " ";
									String A2 = String.valueOf(Theta_MAX);
									String A3 = A1 + A2;
									Theta.setText(A3);
	        						}
								System.out.println("Population substitution rate (Theta max): " + Theta_MAX);
								}
								
							}

						if (Error == 0)
							{
							OutputDistribution_SubstitutionRate = "gamma " + Spar1 + " " + Spar2 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
							Gamma_Window_SubstitutionRate.setVisible(false);
							Gamma_Window_SubstitutionRate.dispose();
		
							TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
							}
						}
					}
				}
				});	

			// Beta (double) - exit NOT saving
			ButtonNext_Beta_Window_Handler_Back_SubstitutionRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_SubstitutionRate = "";
				System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
			
				Beta_Window_SubstitutionRate.setVisible(false);
				Beta_Window_SubstitutionRate.dispose();

				TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
				Theta.setText(" ");
				}
			});

			// Beta (double) - exit saving
			ButtonNext_Beta_Window_Next_SubstitutionRate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_SubstitutionRate = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextBeta1_SubstitutionRate.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (shape alpha) should be specified");
					JOptionPane.showMessageDialog(null, "A number (shape alpha) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (shape alpha) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (shape alpha) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (shape alpha) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (shape alpha) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				Spar2 = TextBeta2_SubstitutionRate.getText(); //String Spar2 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (shape beta) should be specified");
					JOptionPane.showMessageDialog(null, "A number (shape beta) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (shape beta) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (shape beta) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (shape beta) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (shape beta) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextBeta3_SubstitutionRate.getText(); //String Spar1 = "23";
				Spar4 = TextBeta4_SubstitutionRate.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_SubstitutionRate = "beta " + Spar1 + " " + Spar2;
						System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
						Beta_Window_SubstitutionRate.setVisible(false);
						Beta_Window_SubstitutionRate.dispose();
	
						TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{

						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
								
							// checking Theta_MAX
							if (NoDemographics == 0)
								{
								if (KindDataProteinEvolverABC == "haploid") 
									{
									Theta_MAX = 2 * 1 * PopSize_MAX * par4 * SequenceLengthNt / 3;
									Theta_MIN = 2 * 1 * PopSize_MAX * par3 * SequenceLengthNt / 3;
									Theta_MAX = Theta_MAX*100;
									Theta_MAX = (double)((int) Theta_MAX);
									Theta_MAX = Theta_MAX /100;
									Theta_MIN = Theta_MIN*100;
									Theta_MIN = (double)((int) Theta_MIN);
									Theta_MIN = Theta_MIN /100;
									String A1 = "Theta: " + String.valueOf(Theta_MIN) + " ";
									String A2 = String.valueOf(Theta_MAX);
									String A3 = A1 + A2;
									Theta.setText(A3);
    	    						} 
								if (KindDataProteinEvolverABC == "diploid")
									{
									Theta_MAX = 2 * 2 * PopSize_MAX * par4 * SequenceLengthNt / 3;
									Theta_MIN = 2 * 2 * PopSize_MAX * par3 * SequenceLengthNt / 3;
									Theta_MAX = Theta_MAX*100;
									Theta_MAX = (double)((int) Theta_MAX);
									Theta_MAX = Theta_MAX /100;
									Theta_MIN = Theta_MIN*100;
									Theta_MIN = (double)((int) Theta_MIN);
									Theta_MIN = Theta_MIN /100;
									String A1 = "Theta: " + String.valueOf(Theta_MIN) + " ";
									String A2 = String.valueOf(Theta_MAX);
									String A3 = A1 + A2;
									Theta.setText(A3);
	        						}
								System.out.println("Population substitution rate (Theta max): " + Theta_MAX);
								}
							}

						if (Error == 0)
							{
							OutputDistribution_SubstitutionRate = "beta " + Spar1 + " " + Spar2 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_SubstitutionRate: " + OutputDistribution_SubstitutionRate);
							Beta_Window_SubstitutionRate.setVisible(false);
							Beta_Window_SubstitutionRate.dispose();
		
							TextSubstitutionRateProteinEvolverABC.setText(OutputDistribution_SubstitutionRate); 
							}
						}
					}
				}
				});	

		TextSubstitutionRateProteinEvolverABC.setLocation(390, 90); // right, down
		TextSubstitutionRateProteinEvolverABC.setForeground(Color.darkGray);
		TextSubstitutionRateProteinEvolverABC.setFont(PLAINAtt);
    	TextSubstitutionRateProteinEvolverABC.setSize(250, 30); // long, high
		panel7.add(TextSubstitutionRateProteinEvolverABC);
		
		Theta.setLocation(580, 90); // right, down
		Theta.setForeground(Color.darkGray);
		Theta.setFont(PLAINAtt);
        Theta.setSize(250, 30); // long, high
		panel7.add(Theta);
            
        JLabel label7efm = new JLabel();
        label7efm.setText("THIS PARAMETER WILL BE ESTIMATED!");
        label7efm.setLocation(770, 90); // right, down
        label7efm.setSize(1000, 30); // long, high
        panel7.add(label7efm);
            

            
        // Blosum62, CpRev, Dayhoff, DayhoffDCMUT, HIVb, HIVw, JTT, JonesDCMUT, LG, Mtart, Mtmam, Mtrev24, RtRev, VT, WAG, UserEAAM
        label7cz.setText("Substitution model of protein evolution: ");
		label7cz.setLocation(30, 130); // right, down
        label7cz.setSize(800, 30); // long, high
      	panel7.add(label7cz);
		
		ProteinSubstitutionModel.setLocation(340, 130); // right, down
        ProteinSubstitutionModel.setSize(120, 30); // long, high
      	panel7.add(ProteinSubstitutionModel);

		ProteinSubstitutionModel.setSelectedItem("JTT"); // default
		TextFix_ProteinSubstitutionModel.setText("JTT"); // default
		TextProteinSubstitutionModel.setText("JTT"); // default
        TextProteinSubstitutionModel_W.setText(""); // default

		ProteinSubstitutionModel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				JComboBox KindOf = (JComboBox) e.getSource();
				String seletedKindOf = (String) KindOf.getSelectedItem();

				if (seletedKindOf == "Blosum62")
					{
					TextFix_ProteinSubstitutionModel.setText("Blosum62");
                    TextProteinSubstitutionModel.setText("Blosum62");
                    TextProteinSubstitutionModel_W.setText("");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
        			}

				if (seletedKindOf == "CpRev")
					{
                    TextFix_ProteinSubstitutionModel.setText("CpRev");
                    TextProteinSubstitutionModel.setText("CpRev");
                    TextProteinSubstitutionModel_W.setText("");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
        			}

				if (seletedKindOf == "Dayhoff")
					{
                    TextFix_ProteinSubstitutionModel.setText("Dayhoff");
                    TextProteinSubstitutionModel.setText("Dayhoff");
                    TextProteinSubstitutionModel_W.setText("");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
        			}
                    
                if (seletedKindOf == "DayhoffDCMUT")
                    {
                    TextFix_ProteinSubstitutionModel.setText("DayhoffDCMUT");
                    TextProteinSubstitutionModel.setText("DayhoffDCMUT");
                    TextProteinSubstitutionModel_W.setText("");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
                    }
                
                if (seletedKindOf == "HIVb")
                    {
                    TextFix_ProteinSubstitutionModel.setText("HIVb");
                    TextProteinSubstitutionModel.setText("HIVb");
                    TextProteinSubstitutionModel_W.setText("");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
                    }
                    
                if (seletedKindOf == "HIVw")
                    {
                    TextFix_ProteinSubstitutionModel.setText("HIVw");
                    TextProteinSubstitutionModel.setText("HIVw");
                    TextProteinSubstitutionModel_W.setText("");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
                    }
                    
                if (seletedKindOf == "JTT")
                    {
                    TextFix_ProteinSubstitutionModel.setText("JTT");
                    TextProteinSubstitutionModel.setText("JTT");
                    TextProteinSubstitutionModel_W.setText("");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
                    }
                    
                if (seletedKindOf == "JonesDCMUT")
                    {
                    TextFix_ProteinSubstitutionModel.setText("JonesDCMUT");
                    TextProteinSubstitutionModel.setText("JonesDCMUT");
                    TextProteinSubstitutionModel_W.setText("");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
                    }
                    
                if (seletedKindOf == "LG")
                    {
                    TextFix_ProteinSubstitutionModel.setText("LG");
                    TextProteinSubstitutionModel.setText("LG");
                    TextProteinSubstitutionModel_W.setText("");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
                    }
                    
                if (seletedKindOf == "Mtart")
                    {
                    TextFix_ProteinSubstitutionModel.setText("Mtart");
                    TextProteinSubstitutionModel.setText("Mtart");
                    TextProteinSubstitutionModel_W.setText("");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
                    }
                    
                if (seletedKindOf == "Mtmam")
                    {
                    TextFix_ProteinSubstitutionModel.setText("Mtmam");
                    TextProteinSubstitutionModel.setText("Mtmam");
                    TextProteinSubstitutionModel_W.setText("");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
                    }
                    
                if (seletedKindOf == "Mtrev24")
                    {
                    TextFix_ProteinSubstitutionModel.setText("Mtrev24");
                    TextProteinSubstitutionModel.setText("Mtrev24");
                    TextProteinSubstitutionModel_W.setText("");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
                    }
                    
                if (seletedKindOf == "RtRev")
                    {
                    TextFix_ProteinSubstitutionModel.setText("RtRev");
                    TextProteinSubstitutionModel.setText("RtRev");
                    TextProteinSubstitutionModel_W.setText("");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
                    }
                    
                if (seletedKindOf == "VT")
                    {
                    TextFix_ProteinSubstitutionModel.setText("VT");
                    TextProteinSubstitutionModel.setText("VT");
                    TextProteinSubstitutionModel_W.setText("");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
                    }
                    
                if (seletedKindOf == "WAG")
                    {
                    TextFix_ProteinSubstitutionModel.setText("WAG");
                    TextProteinSubstitutionModel.setText("WAG");
                    TextProteinSubstitutionModel_W.setText("");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
                    }
                    
                if (seletedKindOf == "UserEAAM")
                    {
                    TextFix_ProteinSubstitutionModel.setText("UserEAAM");
                    TextProteinSubstitutionModel.setText("UserEAAM");
                    TextProteinSubstitutionModel_W.setText("It requires a user-provided file (see documentation)!");
                    System.out.println("TextFix_ProteinSubstitutionModel: " + TextFix_ProteinSubstitutionModel);
                    }

				}

			});

		TextProteinSubstitutionModel_W.setLocation(520, 130); // right, down
		TextProteinSubstitutionModel_W.setForeground(Color.darkGray);
		TextProteinSubstitutionModel_W.setFont(PLAINAtt);
        TextProteinSubstitutionModel_W.setSize(450, 30); // long, high
		panel7.add(TextProteinSubstitutionModel_W);
		////


		
		JLabel label7ca2 = new JLabel();
		label7ca2.setText("Optional settings");
		label7ca2.setFont(new Font("Arial", Font.PLAIN | Font.BOLD, 14));
		label7ca2.setLocation(30, 190); // right, down
        label7ca2.setSize(200, 30); // long, high
      	panel7.add(label7ca2);


		JLabel label7c = new JLabel();
       	label7c.setText("Amino acid frequencies: ");
		label7c.setLocation(30, 220); // right, down
        label7c.setSize(800, 30); // long, high
      	panel7.add(label7c);

		AA_normal_Freqs_ProteinEvolverABCWindow.setVisible(false);
		//AA_FreqsWindow.setVisible( false );	

		ProteinEvolverABCTypeOfAAFreqs_group.add(ProteinEvolverABCTypeOfAAFreqs_NO);
		ProteinEvolverABCTypeOfAAFreqs_group.add(ProteinEvolverABCTypeOfAAFreqs_YES);
		ProteinEvolverABCTypeOfAAFreqs_NO.setSelected(true);
		ProteinEvolverABCTypeOfAAFreqs_NO.setLocation(210, 220); // right, down
		ProteinEvolverABCTypeOfAAFreqs_NO.setSize(80, 30); // long, high
		ProteinEvolverABCTypeOfAAFreqs_YES.setLocation(290, 220); // right, down
		ProteinEvolverABCTypeOfAAFreqs_YES.setSize(80, 30); // long, high
		panel7.add(ProteinEvolverABCTypeOfAAFreqs_NO);
		panel7.add(ProteinEvolverABCTypeOfAAFreqs_YES);

		/* normal Amino acid frequencies */
		TextAAFreqsNormalProteinEvolverABC.setLocation(360, 220); // right, down
        TextAAFreqsNormalProteinEvolverABC.setSize(600, 30); // long, high
		TextAAFreqsNormalProteinEvolverABC.setForeground(Color.darkGray);
		TextAAFreqsNormalProteinEvolverABC.setFont(PLAINAtt);
		panel7.add(TextAAFreqsNormalProteinEvolverABC);
		TextAAFreqsNormalProteinEvolverABC.setVisible(false);
		
		// A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V
		ProteinEvolverABCTypeOfAAFreqs = "No"; // default
		ProteinEvolverABCTypeOfAAFreqs_NO.setSelected(true); // default
		ProteinEvolverABCTypeOfAAFreqs_FixDir1_.setSelectedItem("fix"); // default
		TextAAFreqsProteinEvolverABC_1A.setText("0.05"); // default
		TextAAFreqsProteinEvolverABC_1R.setText("0.05"); // default
		TextAAFreqsProteinEvolverABC_1N.setText("0.05"); // default
		TextAAFreqsProteinEvolverABC_1D.setText("0.05"); // default
		TextAAFreqsProteinEvolverABC_1C.setText("0.05"); // default
		TextAAFreqsProteinEvolverABC_1Q.setText("0.05"); // default
		TextAAFreqsProteinEvolverABC_1E.setText("0.05"); // default
		TextAAFreqsProteinEvolverABC_1G.setText("0.05"); // default
		TextAAFreqsProteinEvolverABC_1H.setText("0.05"); // default
		TextAAFreqsProteinEvolverABC_1I.setText("0.05"); // default
		TextAAFreqsProteinEvolverABC_1L.setText("0.05"); // default
		TextAAFreqsProteinEvolverABC_1K.setText("0.05"); // default
        TextAAFreqsProteinEvolverABC_1M.setText("0.05"); // default
        TextAAFreqsProteinEvolverABC_1F.setText("0.05"); // default
        TextAAFreqsProteinEvolverABC_1P.setText("0.05"); // default
        TextAAFreqsProteinEvolverABC_1S.setText("0.05"); // default
        TextAAFreqsProteinEvolverABC_1T.setText("0.05"); // default
        TextAAFreqsProteinEvolverABC_1W.setText("0.05"); // default
        TextAAFreqsProteinEvolverABC_1Y.setText("0.05"); // default
        TextAAFreqsProteinEvolverABC_1V.setText("0.05"); // default
		//TextAAFreqsNormalProteinEvolverABC.setText("fix 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05"); // default
		AA_normal_Freqs_ProteinEvolverABCWindow.setVisible(false); // default
		AA_normal_Freqs_ProteinEvolverABCWindow.dispose();
		// default
		
		ProteinEvolverABCTypeOfAAFreqs_NO.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			
					TextAAFreqsNormalProteinEvolverABC.setVisible(false);
					TextAAFreqsNormalProteinEvolverABC.setText("");

					//AA_FreqsWindow.setVisible( false );	
					AA_normal_Freqs_ProteinEvolverABCWindow.setVisible( false );
					ProteinEvolverABCNormalAAFreqs = "#AminoacidFrequencies=fix 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05";
					System.out.println("ProteinEvolverABCNormalAAFreqs: " + ProteinEvolverABCNormalAAFreqs);
			}
		});
		

		ProteinEvolverABCTypeOfAAFreqs_YES.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			
					AA_normal_Freqs_ProteinEvolverABCWindow.setVisible( true );
					FirstTimeAA_normal_Freqs_ProteinEvolverABCWindow = FirstTimeAA_normal_Freqs_ProteinEvolverABCWindow + 1;
					
					ProteinEvolverABCNormalAAFreqs = "#AminoacidFrequencies=fix 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05";
					
					if (FirstTimeAA_normal_Freqs_ProteinEvolverABCWindow == 1)
						{
						AA_normal_Freqs_ProteinEvolverABCWindow.setTitle( "Amino acid frequencies" );
						AA_normal_Freqs_ProteinEvolverABCWindow.setSize(600, 1800);
						AA_normal_Freqs_ProteinEvolverABCWindow.setLayout( new GridLayout(26, 2) ); // 10 rows, 4 columns
						AA_normal_Freqs_ProteinEvolverABCWindow.setBackground(Color.white);
						AA_normal_Freqs_ProteinEvolverABCWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				AA_normal_Freqs_ProteinEvolverABCWindow.setLocationRelativeTo(null);

						JLabel labelX1 = new JLabel();
						labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1.setText(" Amino acid frequencies");
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX1);

						JLabel labelX1b1 = new JLabel();
       					labelX1b1.setText(" ");
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX1b1);


						JLabel labelA1 = new JLabel();
       					labelA1.setText(" Examples:");
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(labelA1);

						JLabel labelA1b1 = new JLabel();
       					labelA1b1.setText("fix 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05");
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(labelA1b1);

                        
                        JLabel labelX1b6 = new JLabel();
                        labelX1b6.setText(" ");
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX1b6);
                            
						JLabel labelA1b2 = new JLabel();
       					labelA1b2.setText("dirichlet 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1");
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(labelA1b2);


						JLabel labelX2 = new JLabel();
       					labelX2.setText(" Apply Distribution: ");
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2);

						AA_normal_Freqs_ProteinEvolverABCWindow.add(ProteinEvolverABCTypeOfAAFreqs_FixDir1_);

                        // A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V
						JLabel labelX2a = new JLabel();
       					labelX2a.setText(" Frequency A: ");
						labelX2a.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2a);
						
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1A);


						JLabel labelX2b = new JLabel();
       					labelX2b.setText(" Frequency R: ");
						labelX2b.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2b);
						
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1R);
						

						JLabel labelX2c = new JLabel();
       					labelX2c.setText(" Frequency N: ");
						labelX2c.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2c);
						
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1N);


						JLabel labelX2d = new JLabel();
       					labelX2d.setText(" Frequency D: ");
						labelX2d.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2d);
						
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1D);
                            
                            
                        JLabel labelX2ac = new JLabel();
                        labelX2ac.setText(" Frequency C: ");
                        labelX2ac.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2ac);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1C);
                            
                            
                        JLabel labelX2bq = new JLabel();
                        labelX2bq.setText(" Frequency Q: ");
                        labelX2bq.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2bq);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1Q);
                            
                            
                        JLabel labelX2ce = new JLabel();
                        labelX2ce.setText(" Frequency E: ");
                        labelX2ce.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2ce);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1E);
                            
                            
                        JLabel labelX2dg = new JLabel();
                        labelX2dg.setText(" Frequency G: ");
                        labelX2dg.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2dg);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1G);
                            
                        
                        JLabel labelX2ch = new JLabel();
                        labelX2ch.setText(" Frequency H: ");
                        labelX2ch.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2ch);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1H);
                            
                            
                        JLabel labelX2di = new JLabel();
                        labelX2di.setText(" Frequency I: ");
                        labelX2di.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2di);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1I);

                            
                        JLabel labelX2bl = new JLabel();
                        labelX2bl.setText(" Frequency L: ");
                        labelX2bl.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2bl);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1L);
                            
                            
                        JLabel labelX2ck = new JLabel();
                        labelX2ck.setText(" Frequency K: ");
                        labelX2ck.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2ck);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1K);
                            
                            
                        JLabel labelX2dm = new JLabel();
                        labelX2dm.setText(" Frequency M: ");
                        labelX2dm.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2dm);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1M);
                            
                            
                        JLabel labelX2cf = new JLabel();
                        labelX2cf.setText(" Frequency F: ");
                        labelX2cf.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2cf);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1F);
                            
                            
                        JLabel labelX2dp = new JLabel();
                        labelX2dp.setText(" Frequency P: ");
                        labelX2dp.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2dp);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1P);
                            
                            
                        JLabel labelX2bs = new JLabel();
                        labelX2bs.setText(" Frequency S: ");
                        labelX2bs.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2bs);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1S);
                            
                            
                        JLabel labelX2ct = new JLabel();
                        labelX2ct.setText(" Frequency T: ");
                        labelX2ct.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2ct);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1T);
                            
                            
                        JLabel labelX2dw = new JLabel();
                        labelX2dw.setText(" Frequency W: ");
                        labelX2dw.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2dw);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1W);
                            
                            
                        JLabel labelX2cy = new JLabel();
                        labelX2cy.setText(" Frequency Y: ");
                        labelX2cy.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2cy);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1Y);
                            
                            
                        JLabel labelX2dv = new JLabel();
                        labelX2dv.setText(" Frequency V: ");
                        labelX2dv.setFont(new Font("Arial",Font.PLAIN | Font.BOLD, 12));
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(labelX2dv);
                            
                        AA_normal_Freqs_ProteinEvolverABCWindow.add(TextAAFreqsProteinEvolverABC_1V);
                            
                            
						JLabel labelXB = new JLabel();
       					labelXB.setText(" ");
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(labelXB);
						JLabel labelXC = new JLabel();
       					labelXC.setText(" ");
      					AA_normal_Freqs_ProteinEvolverABCWindow.add(labelXC);


						//This creates a new button 
						//ButtonNextFrameAA_normal_Freqs_ProteinEvolverABC_SaveNext.setLocation(600, 600); // right, down
       					ButtonNextFrameAA_normal_Freqs_ProteinEvolverABC_SaveNext.setSize(70, 70); // long, high
						runAA_normal_Freqs_ProteinEvolverABCSaveNextHandler = new runButtonAA_normal_Freqs_ProteinEvolverABCSaveNextHandler();
						ButtonNextFrameAA_normal_Freqs_ProteinEvolverABC_SaveNext.addActionListener(runAA_normal_Freqs_ProteinEvolverABCSaveNextHandler);
        				ButtonNextFrameAA_normal_Freqs_ProteinEvolverABC_SaveNext.setVisible(true); 
       					AA_normal_Freqs_ProteinEvolverABCWindow.add(ButtonNextFrameAA_normal_Freqs_ProteinEvolverABC_SaveNext);


						//This creates a new button 
						//ButtonNextFrameAA_normal_Freqs_ProteinEvolverABC_Back.setLocation(600, 600); // right, down
       					ButtonNextFrameAA_normal_Freqs_ProteinEvolverABC_Back.setSize(70, 70); // long, high
						runAA_normal_Freqs_ProteinEvolverABCExitHandler = new runButtonAA_normal_Freqs_ProteinEvolverABCExitHandler();
						ButtonNextFrameAA_normal_Freqs_ProteinEvolverABC_Back.addActionListener(runAA_normal_Freqs_ProteinEvolverABCExitHandler);
        				ButtonNextFrameAA_normal_Freqs_ProteinEvolverABC_Back.setVisible(true); 
       					AA_normal_Freqs_ProteinEvolverABCWindow.add(ButtonNextFrameAA_normal_Freqs_ProteinEvolverABC_Back);
						}
				}
			});
				

		
		/* +I */
       	label7j.setText("Proportion of invariable sites (+I): ");
		label7j.setLocation(30, 280); // right, down
        label7j.setSize(800, 30); // long, high
      	panel7.add(label7j);

		KindAA_I_group.add(KindAA_I_NO);
		KindAA_I_group.add(KindAA_I_YES);		
		KindAA_I_NO.setSelected(true);
		KindAA_I_NO.setLocation(330, 280); // right, down
		KindAA_I_NO.setSize(80, 30); // long, high
		KindAA_I_YES.setLocation(420, 280); // right, down
		KindAA_I_YES.setSize(80, 30); // long, high		
		panel7.add(KindAA_I_NO);
		panel7.add(KindAA_I_YES);

		KindAA_I_NO.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

			AA_I_ProteinEvolverABC.setVisible(false);
			TextAA_I_ProteinEvolverABC.setVisible(false);
			TextAA_I_ProteinEvolverABC.setText(""); // default
			ProteinEvolverABC_AA_I = "#PropInvSites=uniform 0.3 0.5";

			String hola4 = TextAA_I_ProteinEvolverABC.getText();
			System.out.println("+I is desactivated, TextAA_I_ProteinEvolverABC: " + hola4);

			}
		});
		KindAA_I_YES.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {	
		
			AA_I_ProteinEvolverABC.setVisible(true);

			AA_I_ProteinEvolverABC.setSelectedItem("fix"); // default
			TextFix_AA_I_ProteinEvolverABC.setText("0.5"); // default
			Fix_Window_AA_I_ProteinEvolverABC.setVisible(false); // default
			Fix_Window_AA_I_ProteinEvolverABC.dispose(); // default
			TextUnif1_AA_I_ProteinEvolverABC.setText("0.1"); // default
			TextUnif2_AA_I_ProteinEvolverABC.setText("0.7"); // default
			TextExp1_AA_I_ProteinEvolverABC.setText("1.2e4"); // default
			TextNorm1_AA_I_ProteinEvolverABC.setText("0.004"); // default
			TextNorm2_AA_I_ProteinEvolverABC.setText("0.0007"); // default
			TextGamma1_AA_I_ProteinEvolverABC.setText("0.0001"); // default
			TextGamma2_AA_I_ProteinEvolverABC.setText("0.002"); // default
			TextBeta1_AA_I_ProteinEvolverABC.setText("0.05"); // default
			TextBeta2_AA_I_ProteinEvolverABC.setText("0.02"); // default
			TextAA_I_ProteinEvolverABC.setText("fix 0.5"); // default
			TextAA_I_ProteinEvolverABC.setVisible(true);

			String hola4 = TextAA_I_ProteinEvolverABC.getText();
			System.out.println("+I is activated, TextAA_I_ProteinEvolverABC: " + hola4);
			}
		});


		AA_I_ProteinEvolverABC.setVisible(false);
		TextAA_I_ProteinEvolverABC.setVisible(false);
		TextAA_I_ProteinEvolverABC.setText(""); // default

		AA_I_ProteinEvolverABC.setLocation(520, 280); // right, down
        AA_I_ProteinEvolverABC.setSize(120, 30); // long, high
      	panel7.add(AA_I_ProteinEvolverABC);

		AA_I_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				JComboBox KindOf = (JComboBox) e.getSource();
				String seletedKindOf = (String) KindOf.getSelectedItem(); 	//String[] AA_I_ProteinEvolverABCOptions = {"no", "fix", "uniform", "exponential", "normal", "gamma", "beta"}; // fix, unif, norm(t), exp(t), gamma(t), beta(t)

				/*if (seletedKindOf == "no") 
					{
					Fix_Window_AA_I_ProteinEvolverABC.setVisible(false);

					OutputDistribution_AA_I_ProteinEvolverABC = "";
					TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
        			}*/ // end no

				if (seletedKindOf == "fix")
					{
					
					FirstTimeFix_Window_AA_I_ProteinEvolverABC++;
					Fix_Window_AA_I_ProteinEvolverABC.setVisible( true );
									
					if (FirstTimeFix_Window_AA_I_ProteinEvolverABC == 1)
						{
						Fix_Window_AA_I_ProteinEvolverABC.setTitle( "Fix" );
						Fix_Window_AA_I_ProteinEvolverABC.setSize(400, 300);
						Fix_Window_AA_I_ProteinEvolverABC.setLayout( new GridLayout( 3, 2 ) ); // 15 rows, 2 columns
						Fix_Window_AA_I_ProteinEvolverABC.setBackground(Color.white);
						Fix_Window_AA_I_ProteinEvolverABC.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Fix_Window_AA_I_ProteinEvolverABC.setLocationRelativeTo(null);

						JLabel labelX1 = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1.setText("Value e.g., 0.5");
						//labelX1.setLocation(30, 130); // right, down
        				//labelX1.setSize(300, 30); // long, high
      					Fix_Window_AA_I_ProteinEvolverABC.add(labelX1);
	
						Fix_Window_AA_I_ProteinEvolverABC.add(TextFix_AA_I_ProteinEvolverABC);	
					
						JLabel labelXB = new JLabel();
       					labelXB.setText(" ");
      					Fix_Window_AA_I_ProteinEvolverABC.add(labelXB);
						JLabel labelXC = new JLabel();
       					labelXC.setText(" ");
      					Fix_Window_AA_I_ProteinEvolverABC.add(labelXC);
				

						//This creates a new button 
       					ButtonNext_Fix_Window_Next_AA_I_ProteinEvolverABC.setSize(70, 70); // long, high
       	 				ButtonNext_Fix_Window_Next_AA_I_ProteinEvolverABC.setVisible(true); 
       					Fix_Window_AA_I_ProteinEvolverABC.add(ButtonNext_Fix_Window_Next_AA_I_ProteinEvolverABC);

						//This creates a new button 
    	   				ButtonNext_Fix_Window_Handler_Back_AA_I_ProteinEvolverABC.setSize(70, 70); // long, high
       	 				ButtonNext_Fix_Window_Handler_Back_AA_I_ProteinEvolverABC.setVisible(true); 
       					Fix_Window_AA_I_ProteinEvolverABC.add(ButtonNext_Fix_Window_Handler_Back_AA_I_ProteinEvolverABC);
						}
        			} // end fix

				if (seletedKindOf == "uniform")
					{
					
					FirstTimeUnif_Window_AA_I_ProteinEvolverABC++;
					Unif_Window_AA_I_ProteinEvolverABC.setVisible( true );
									
					if (FirstTimeUnif_Window_AA_I_ProteinEvolverABC == 1)
						{
						Unif_Window_AA_I_ProteinEvolverABC.setTitle( "Uniform distribution" );
						Unif_Window_AA_I_ProteinEvolverABC.setSize(500, 300);
						Unif_Window_AA_I_ProteinEvolverABC.setLayout( new GridLayout( 4, 2 ) ); // 15 rows, 2 columns
						Unif_Window_AA_I_ProteinEvolverABC.setBackground(Color.white);
						Unif_Window_AA_I_ProteinEvolverABC.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Unif_Window_AA_I_ProteinEvolverABC.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1b.setText("Minimum value e.g., 0.5");
      					Unif_Window_AA_I_ProteinEvolverABC.add(labelX1b);
	
						Unif_Window_AA_I_ProteinEvolverABC.add(TextUnif1_AA_I_ProteinEvolverABC);	
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText("Maximum value e.g., 1.0");
      					Unif_Window_AA_I_ProteinEvolverABC.add(labelX1c);
	
						Unif_Window_AA_I_ProteinEvolverABC.add(TextUnif2_AA_I_ProteinEvolverABC);	
						
						JLabel labelXBc = new JLabel();
       					labelXBc.setText(" ");
      					Unif_Window_AA_I_ProteinEvolverABC.add(labelXBc);
						JLabel labelXCc = new JLabel();
    	   				labelXCc.setText(" ");
      					Unif_Window_AA_I_ProteinEvolverABC.add(labelXCc);
					
	
						//This creates a new button 
    	   				ButtonNext_Unif_Window_Next_AA_I_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Unif_Window_Next_AA_I_ProteinEvolverABC.setVisible(true); 
       					Unif_Window_AA_I_ProteinEvolverABC.add(ButtonNext_Unif_Window_Next_AA_I_ProteinEvolverABC);
	
						//This creates a new button 
       					ButtonNext_Unif_Window_Handler_Back_AA_I_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Unif_Window_Handler_Back_AA_I_ProteinEvolverABC.setVisible(true); 
       					Unif_Window_AA_I_ProteinEvolverABC.add(ButtonNext_Unif_Window_Handler_Back_AA_I_ProteinEvolverABC);
						}
        			} // end unif

				if (seletedKindOf == "exponential")
					{
					
					FirstTimeExp_Window_AA_I_ProteinEvolverABC++;
					Exp_Window_AA_I_ProteinEvolverABC.setVisible( true );
									
					if (FirstTimeExp_Window_AA_I_ProteinEvolverABC == 1)
						{
						Exp_Window_AA_I_ProteinEvolverABC.setTitle( "Exponential distribution" );
						Exp_Window_AA_I_ProteinEvolverABC.setSize(500, 300);
						Exp_Window_AA_I_ProteinEvolverABC.setLayout( new GridLayout( 6, 2 ) ); // 15 rows, 2 columns
						Exp_Window_AA_I_ProteinEvolverABC.setBackground(Color.white);
						Exp_Window_AA_I_ProteinEvolverABC.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Exp_Window_AA_I_ProteinEvolverABC.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1b.setText("Rate e.g., 1.2e7");
      					Exp_Window_AA_I_ProteinEvolverABC.add(labelX1b);
	
						Exp_Window_AA_I_ProteinEvolverABC.add(TextExp1_AA_I_ProteinEvolverABC);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Exp_Window_AA_I_ProteinEvolverABC.add(labelXgb);	
					
						String[] AA_I_ProteinEvolverABC_Exp_truncatedOptions = {"no", "yes"};
    					JComboBox AA_I_ProteinEvolverABC_Exp_truncated = new JComboBox(AA_I_ProteinEvolverABC_Exp_truncatedOptions);
        				Exp_Window_AA_I_ProteinEvolverABC.add(AA_I_ProteinEvolverABC_Exp_truncated);

       					AA_I_ProteinEvolverABC_labelt1_Exp.setText("Minimum value e.g., 0.5");
      					Exp_Window_AA_I_ProteinEvolverABC.add(AA_I_ProteinEvolverABC_labelt1_Exp);
	
						Exp_Window_AA_I_ProteinEvolverABC.add(TextExp3_AA_I_ProteinEvolverABC);

       					AA_I_ProteinEvolverABC_labelt2_Exp.setText("Maximum value e.g., 1.0");
      					Exp_Window_AA_I_ProteinEvolverABC.add(AA_I_ProteinEvolverABC_labelt2_Exp);
	
						Exp_Window_AA_I_ProteinEvolverABC.add(TextExp4_AA_I_ProteinEvolverABC);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Exp_Window_AA_I_ProteinEvolverABC.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Exp_Window_AA_I_ProteinEvolverABC.add(labelX1h);
						

						AA_I_ProteinEvolverABC_labelt1_Exp.setVisible(false);
						TextExp3_AA_I_ProteinEvolverABC.setVisible(false);
						AA_I_ProteinEvolverABC_labelt2_Exp.setVisible(false);
						TextExp4_AA_I_ProteinEvolverABC.setVisible(false);
						
						AA_I_ProteinEvolverABC_Exp_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								AA_I_ProteinEvolverABC_labelt1_Exp.setVisible(true);
								TextExp3_AA_I_ProteinEvolverABC.setVisible(true);
								AA_I_ProteinEvolverABC_labelt2_Exp.setVisible(true);
								TextExp4_AA_I_ProteinEvolverABC.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								AA_I_ProteinEvolverABC_labelt1_Exp.setVisible(false);
								TextExp3_AA_I_ProteinEvolverABC.setVisible(false);
								AA_I_ProteinEvolverABC_labelt2_Exp.setVisible(false);
								TextExp4_AA_I_ProteinEvolverABC.setVisible(false);
								
								TextExp3_AA_I_ProteinEvolverABC.setText("");
								TextExp4_AA_I_ProteinEvolverABC.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Exp_Window_Next_AA_I_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Exp_Window_Next_AA_I_ProteinEvolverABC.setVisible(true); 
       					Exp_Window_AA_I_ProteinEvolverABC.add(ButtonNext_Exp_Window_Next_AA_I_ProteinEvolverABC);
	
						//This creates a new button 
       					ButtonNext_Exp_Window_Handler_Back_AA_I_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Exp_Window_Handler_Back_AA_I_ProteinEvolverABC.setVisible(true); 
       					Exp_Window_AA_I_ProteinEvolverABC.add(ButtonNext_Exp_Window_Handler_Back_AA_I_ProteinEvolverABC);
						}
        			} // end Exp

				if (seletedKindOf == "normal")
					{
					
					FirstTimeNorm_Window_AA_I_ProteinEvolverABC++;
					Norm_Window_AA_I_ProteinEvolverABC.setVisible( true );
									
					if (FirstTimeNorm_Window_AA_I_ProteinEvolverABC == 1)
						{
						Norm_Window_AA_I_ProteinEvolverABC.setTitle( "Normal distribution" );
						Norm_Window_AA_I_ProteinEvolverABC.setSize(500, 300);
						Norm_Window_AA_I_ProteinEvolverABC.setLayout( new GridLayout( 7, 2 ) ); // 15 rows, 2 columns
						Norm_Window_AA_I_ProteinEvolverABC.setBackground(Color.white);
						Norm_Window_AA_I_ProteinEvolverABC.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Norm_Window_AA_I_ProteinEvolverABC.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
       					labelX1b.setText("Mean (location) e.g., 0.5");
      					Norm_Window_AA_I_ProteinEvolverABC.add(labelX1b);
	
						Norm_Window_AA_I_ProteinEvolverABC.add(TextNorm1_AA_I_ProteinEvolverABC);

						JLabel labelX2b = new JLabel();
       					labelX2b.setText("Variance (squared scale) e.g., 0.001");
      					Norm_Window_AA_I_ProteinEvolverABC.add(labelX2b);
	
						Norm_Window_AA_I_ProteinEvolverABC.add(TextNorm2_AA_I_ProteinEvolverABC);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Norm_Window_AA_I_ProteinEvolverABC.add(labelXgb);	
					
						String[] AA_I_ProteinEvolverABC_Norm_truncatedOptions = {"no", "yes"};
  						JComboBox AA_I_ProteinEvolverABC_Norm_truncated = new JComboBox(AA_I_ProteinEvolverABC_Norm_truncatedOptions);
        				Norm_Window_AA_I_ProteinEvolverABC.add(AA_I_ProteinEvolverABC_Norm_truncated);

       					AA_I_ProteinEvolverABC_labelt1_Norm.setText("Minimum value e.g., 0.5");
      					Norm_Window_AA_I_ProteinEvolverABC.add(AA_I_ProteinEvolverABC_labelt1_Norm);
	
						Norm_Window_AA_I_ProteinEvolverABC.add(TextNorm3_AA_I_ProteinEvolverABC);

       					AA_I_ProteinEvolverABC_labelt2_Norm.setText("Maximum value e.g., 1.0");
      					Norm_Window_AA_I_ProteinEvolverABC.add(AA_I_ProteinEvolverABC_labelt2_Norm);
	
						Norm_Window_AA_I_ProteinEvolverABC.add(TextNorm4_AA_I_ProteinEvolverABC);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Norm_Window_AA_I_ProteinEvolverABC.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Norm_Window_AA_I_ProteinEvolverABC.add(labelX1h);
						

						AA_I_ProteinEvolverABC_labelt1_Norm.setVisible(false);
						TextNorm3_AA_I_ProteinEvolverABC.setVisible(false);
						AA_I_ProteinEvolverABC_labelt2_Norm.setVisible(false);
						TextNorm4_AA_I_ProteinEvolverABC.setVisible(false);
						
						AA_I_ProteinEvolverABC_Norm_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								AA_I_ProteinEvolverABC_labelt1_Norm.setVisible(true);
								TextNorm3_AA_I_ProteinEvolverABC.setVisible(true);
								AA_I_ProteinEvolverABC_labelt2_Norm.setVisible(true);
								TextNorm4_AA_I_ProteinEvolverABC.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								AA_I_ProteinEvolverABC_labelt1_Norm.setVisible(false);
								TextNorm3_AA_I_ProteinEvolverABC.setVisible(false);
								AA_I_ProteinEvolverABC_labelt2_Norm.setVisible(false);
								TextNorm4_AA_I_ProteinEvolverABC.setVisible(false);
								
								TextNorm3_AA_I_ProteinEvolverABC.setText("");
								TextNorm4_AA_I_ProteinEvolverABC.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Norm_Window_Next_AA_I_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Norm_Window_Next_AA_I_ProteinEvolverABC.setVisible(true); 
       					Norm_Window_AA_I_ProteinEvolverABC.add(ButtonNext_Norm_Window_Next_AA_I_ProteinEvolverABC);
	
						//This creates a new button 
       					ButtonNext_Norm_Window_Handler_Back_AA_I_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Norm_Window_Handler_Back_AA_I_ProteinEvolverABC.setVisible(true); 
       					Norm_Window_AA_I_ProteinEvolverABC.add(ButtonNext_Norm_Window_Handler_Back_AA_I_ProteinEvolverABC);
						}
        			} // end Norm

				if (seletedKindOf == "gamma")
					{
					
					FirstTimeGamma_Window_AA_I_ProteinEvolverABC++;
					Gamma_Window_AA_I_ProteinEvolverABC.setVisible( true );
									
					if (FirstTimeGamma_Window_AA_I_ProteinEvolverABC == 1)
						{
						Gamma_Window_AA_I_ProteinEvolverABC.setTitle( "Gamma distribution" );
						Gamma_Window_AA_I_ProteinEvolverABC.setSize(500, 300);
						Gamma_Window_AA_I_ProteinEvolverABC.setLayout( new GridLayout( 7, 2 ) ); // 15 rows, 2 columns
						Gamma_Window_AA_I_ProteinEvolverABC.setBackground(Color.white);
						Gamma_Window_AA_I_ProteinEvolverABC.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Gamma_Window_AA_I_ProteinEvolverABC.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
       					labelX1b.setText("Shape e.g., 0.5");
      					Gamma_Window_AA_I_ProteinEvolverABC.add(labelX1b);
	
						Gamma_Window_AA_I_ProteinEvolverABC.add(TextGamma1_AA_I_ProteinEvolverABC);

						JLabel labelX2b = new JLabel();
       					labelX2b.setText("Scale e.g., 0.001");
      					Gamma_Window_AA_I_ProteinEvolverABC.add(labelX2b);
	
						Gamma_Window_AA_I_ProteinEvolverABC.add(TextGamma2_AA_I_ProteinEvolverABC);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Gamma_Window_AA_I_ProteinEvolverABC.add(labelXgb);	
					
						String[] AA_I_ProteinEvolverABC_Gamma_truncatedOptions = {"no", "yes"};
  						JComboBox AA_I_ProteinEvolverABC_Gamma_truncated = new JComboBox(AA_I_ProteinEvolverABC_Gamma_truncatedOptions);
        				Gamma_Window_AA_I_ProteinEvolverABC.add(AA_I_ProteinEvolverABC_Gamma_truncated);

       					AA_I_ProteinEvolverABC_labelt1_Gamma.setText("Minimum value e.g., 0.5");
      					Gamma_Window_AA_I_ProteinEvolverABC.add(AA_I_ProteinEvolverABC_labelt1_Gamma);
	
						Gamma_Window_AA_I_ProteinEvolverABC.add(TextGamma3_AA_I_ProteinEvolverABC);

       					AA_I_ProteinEvolverABC_labelt2_Gamma.setText("Maximum value e.g., 1.0");
      					Gamma_Window_AA_I_ProteinEvolverABC.add(AA_I_ProteinEvolverABC_labelt2_Gamma);
	
						Gamma_Window_AA_I_ProteinEvolverABC.add(TextGamma4_AA_I_ProteinEvolverABC);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Gamma_Window_AA_I_ProteinEvolverABC.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Gamma_Window_AA_I_ProteinEvolverABC.add(labelX1h);
						

						AA_I_ProteinEvolverABC_labelt1_Gamma.setVisible(false);
						TextGamma3_AA_I_ProteinEvolverABC.setVisible(false);
						AA_I_ProteinEvolverABC_labelt2_Gamma.setVisible(false);
						TextGamma4_AA_I_ProteinEvolverABC.setVisible(false);
						
						AA_I_ProteinEvolverABC_Gamma_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								AA_I_ProteinEvolverABC_labelt1_Gamma.setVisible(true);
								TextGamma3_AA_I_ProteinEvolverABC.setVisible(true);
								AA_I_ProteinEvolverABC_labelt2_Gamma.setVisible(true);
								TextGamma4_AA_I_ProteinEvolverABC.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								AA_I_ProteinEvolverABC_labelt1_Gamma.setVisible(false);
								TextGamma3_AA_I_ProteinEvolverABC.setVisible(false);
								AA_I_ProteinEvolverABC_labelt2_Gamma.setVisible(false);
								TextGamma4_AA_I_ProteinEvolverABC.setVisible(false);
								
								TextGamma3_AA_I_ProteinEvolverABC.setText("");
								TextGamma4_AA_I_ProteinEvolverABC.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Gamma_Window_Next_AA_I_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Gamma_Window_Next_AA_I_ProteinEvolverABC.setVisible(true); 
       					Gamma_Window_AA_I_ProteinEvolverABC.add(ButtonNext_Gamma_Window_Next_AA_I_ProteinEvolverABC);
	
						//This creates a new button 
       					ButtonNext_Gamma_Window_Handler_Back_AA_I_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Gamma_Window_Handler_Back_AA_I_ProteinEvolverABC.setVisible(true); 
       					Gamma_Window_AA_I_ProteinEvolverABC.add(ButtonNext_Gamma_Window_Handler_Back_AA_I_ProteinEvolverABC);
						}
        			} // end Gamma

				if (seletedKindOf == "beta")
					{
					
					FirstTimeBeta_Window_AA_I_ProteinEvolverABC++;
					Beta_Window_AA_I_ProteinEvolverABC.setVisible( true );
									
					if (FirstTimeBeta_Window_AA_I_ProteinEvolverABC == 1)
						{
						Beta_Window_AA_I_ProteinEvolverABC.setTitle( "Beta distribution" );
						Beta_Window_AA_I_ProteinEvolverABC.setSize(500, 300);
						Beta_Window_AA_I_ProteinEvolverABC.setLayout( new GridLayout( 7, 2 ) ); // 15 rows, 2 columns
						Beta_Window_AA_I_ProteinEvolverABC.setBackground(Color.white);
						Beta_Window_AA_I_ProteinEvolverABC.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Beta_Window_AA_I_ProteinEvolverABC.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
       					labelX1b.setText("Shape (alpha) e.g., 0.5");
      					Beta_Window_AA_I_ProteinEvolverABC.add(labelX1b);
	
						Beta_Window_AA_I_ProteinEvolverABC.add(TextBeta1_AA_I_ProteinEvolverABC);

						JLabel labelX2b = new JLabel();
       					labelX2b.setText("Shape (beta) e.g., 0.001");
      					Beta_Window_AA_I_ProteinEvolverABC.add(labelX2b);
	
						Beta_Window_AA_I_ProteinEvolverABC.add(TextBeta2_AA_I_ProteinEvolverABC);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Beta_Window_AA_I_ProteinEvolverABC.add(labelXgb);	
					
						String[] AA_I_ProteinEvolverABC_Beta_truncatedOptions = {"no", "yes"};
  						JComboBox AA_I_ProteinEvolverABC_Beta_truncated = new JComboBox(AA_I_ProteinEvolverABC_Beta_truncatedOptions);
        				Beta_Window_AA_I_ProteinEvolverABC.add(AA_I_ProteinEvolverABC_Beta_truncated);

       					AA_I_ProteinEvolverABC_labelt1_Beta.setText("Minimum value e.g., 0.5");
      					Beta_Window_AA_I_ProteinEvolverABC.add(AA_I_ProteinEvolverABC_labelt1_Beta);
	
						Beta_Window_AA_I_ProteinEvolverABC.add(TextBeta3_AA_I_ProteinEvolverABC);

       					AA_I_ProteinEvolverABC_labelt2_Beta.setText("Maximum value e.g., 1.0");
      					Beta_Window_AA_I_ProteinEvolverABC.add(AA_I_ProteinEvolverABC_labelt2_Beta);
	
						Beta_Window_AA_I_ProteinEvolverABC.add(TextBeta4_AA_I_ProteinEvolverABC);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Beta_Window_AA_I_ProteinEvolverABC.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Beta_Window_AA_I_ProteinEvolverABC.add(labelX1h);
						

						AA_I_ProteinEvolverABC_labelt1_Beta.setVisible(false);
						TextBeta3_AA_I_ProteinEvolverABC.setVisible(false);
						AA_I_ProteinEvolverABC_labelt2_Beta.setVisible(false);
						TextBeta4_AA_I_ProteinEvolverABC.setVisible(false);
						
						AA_I_ProteinEvolverABC_Beta_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								AA_I_ProteinEvolverABC_labelt1_Beta.setVisible(true);
								TextBeta3_AA_I_ProteinEvolverABC.setVisible(true);
								AA_I_ProteinEvolverABC_labelt2_Beta.setVisible(true);
								TextBeta4_AA_I_ProteinEvolverABC.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								AA_I_ProteinEvolverABC_labelt1_Beta.setVisible(false);
								TextBeta3_AA_I_ProteinEvolverABC.setVisible(false);
								AA_I_ProteinEvolverABC_labelt2_Beta.setVisible(false);
								TextBeta4_AA_I_ProteinEvolverABC.setVisible(false);
								
								TextBeta3_AA_I_ProteinEvolverABC.setText("");
								TextBeta4_AA_I_ProteinEvolverABC.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Beta_Window_Next_AA_I_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Beta_Window_Next_AA_I_ProteinEvolverABC.setVisible(true); 
       					Beta_Window_AA_I_ProteinEvolverABC.add(ButtonNext_Beta_Window_Next_AA_I_ProteinEvolverABC);
	
						//This creates a new button 
       					ButtonNext_Beta_Window_Handler_Back_AA_I_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Beta_Window_Handler_Back_AA_I_ProteinEvolverABC.setVisible(true); 
       					Beta_Window_AA_I_ProteinEvolverABC.add(ButtonNext_Beta_Window_Handler_Back_AA_I_ProteinEvolverABC);
						}
        			} // end Beta


				TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
				}

			});

			// Fix (double) - exit NOT saving
			ButtonNext_Fix_Window_Handler_Back_AA_I_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_AA_I_ProteinEvolverABC = "";
				System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
			
				Fix_Window_AA_I_ProteinEvolverABC.setVisible(false);
				Fix_Window_AA_I_ProteinEvolverABC.dispose();

				TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
				}
			});

			// Fix (double) - exit saving
			ButtonNext_Fix_Window_Next_AA_I_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_AA_I_ProteinEvolverABC = "";
				par1 = -1;
				Spar1 = "";

				Spar1 = TextFix_AA_I_ProteinEvolverABC.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number should be specified");
					JOptionPane.showMessageDialog(null, "A number should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}
				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}
				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || par1 > 1 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					else // Ok
						{
						OutputDistribution_AA_I_ProteinEvolverABC = "fix " + Spar1;
						System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
						Fix_Window_AA_I_ProteinEvolverABC.setVisible(false);
						Fix_Window_AA_I_ProteinEvolverABC.dispose();
	
						TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
						}
					}
					}
				});		

			// Uniform (double) - exit NOT saving
			ButtonNext_Unif_Window_Handler_Back_AA_I_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_AA_I_ProteinEvolverABC = "";
				System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
			
				Unif_Window_AA_I_ProteinEvolverABC.setVisible(false);
				Unif_Window_AA_I_ProteinEvolverABC.dispose();

				TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
				}
			});

			// Uniform (double) - exit saving
			ButtonNext_Unif_Window_Next_AA_I_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_AA_I_ProteinEvolverABC = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";

				Spar1 = TextUnif1_AA_I_ProteinEvolverABC.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (minimum) should be specified");
					JOptionPane.showMessageDialog(null, "A number (minimum) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}
				Spar2 = TextUnif2_AA_I_ProteinEvolverABC.getText(); //String Spar1 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (maximum) should be specified");
					JOptionPane.showMessageDialog(null, "A number (maximum) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (minimum) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (minimum) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}
				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (maximum) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (maximum) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}


				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || par1 > 1 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (minimum) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (minimum) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (maximum) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (maximum) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				if (Error == 0)
					{
					if (par1 > par2)
						{
						System.out.println("The minimum value should be smaller than the maximum value");
						JOptionPane.showMessageDialog(null, "The minimum value should be smaller than the maximum value", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					}
					
				if (Error == 0) // Ok
					{
					OutputDistribution_AA_I_ProteinEvolverABC = "uniform " + Spar1 + " " + Spar2;
					System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
					Unif_Window_AA_I_ProteinEvolverABC.setVisible(false);
					Unif_Window_AA_I_ProteinEvolverABC.dispose();
	
					TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
					}

					}
				});	

			// Exponential (double) - exit NOT saving
			ButtonNext_Exp_Window_Handler_Back_AA_I_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_AA_I_ProteinEvolverABC = "";
				System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
			
				Exp_Window_AA_I_ProteinEvolverABC.setVisible(false);
				Exp_Window_AA_I_ProteinEvolverABC.dispose();

				TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
				}
			});

			// Exponential (double) - exit saving
			ButtonNext_Exp_Window_Next_AA_I_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_AA_I_ProteinEvolverABC = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextExp1_AA_I_ProteinEvolverABC.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (rate) should be specified");
					JOptionPane.showMessageDialog(null, "A number (rate) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (rate) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (rate) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (rate) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (rate) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextExp3_AA_I_ProteinEvolverABC.getText(); //String Spar1 = "23";
				Spar4 = TextExp4_AA_I_ProteinEvolverABC.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_AA_I_ProteinEvolverABC = "exp " + Spar1;
						System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
						Exp_Window_AA_I_ProteinEvolverABC.setVisible(false);
						Exp_Window_AA_I_ProteinEvolverABC.dispose();
	
						TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{

						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							}


						if (Error == 0)
							{
							OutputDistribution_AA_I_ProteinEvolverABC = "exp " + Spar1 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
							Exp_Window_AA_I_ProteinEvolverABC.setVisible(false);
							Exp_Window_AA_I_ProteinEvolverABC.dispose();
		
							TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
							}
						}
					}
					}
				});	

			// Normal (double) - exit NOT saving
			ButtonNext_Norm_Window_Handler_Back_AA_I_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_AA_I_ProteinEvolverABC = "";
				System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
			
				Norm_Window_AA_I_ProteinEvolverABC.setVisible(false);
				Norm_Window_AA_I_ProteinEvolverABC.dispose();

				TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
				}
			});

			// Normal (double) - exit saving
			ButtonNext_Norm_Window_Next_AA_I_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_AA_I_ProteinEvolverABC = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextNorm1_AA_I_ProteinEvolverABC.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (mean) should be specified");
					JOptionPane.showMessageDialog(null, "A number (mean) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (mean) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (mean) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (mean) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (mean) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				Spar2 = TextNorm2_AA_I_ProteinEvolverABC.getText(); //String Spar2 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (variance) should be specified");
					JOptionPane.showMessageDialog(null, "A number (variance) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (variance) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (variance) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (variance) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (variance) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextNorm3_AA_I_ProteinEvolverABC.getText(); //String Spar1 = "23";
				Spar4 = TextNorm4_AA_I_ProteinEvolverABC.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_AA_I_ProteinEvolverABC = "norm " + Spar1 + " " + Spar2;
						System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
						Norm_Window_AA_I_ProteinEvolverABC.setVisible(false);
						Norm_Window_AA_I_ProteinEvolverABC.dispose();
	
						TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{
						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							}

						if (Error == 0)
							{
							OutputDistribution_AA_I_ProteinEvolverABC = "norm " + Spar1 + " " + Spar2 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
							Norm_Window_AA_I_ProteinEvolverABC.setVisible(false);
							Norm_Window_AA_I_ProteinEvolverABC.dispose();
		
							TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
							}
						}
					}
				}
				});	

			
			// Gamma (double) - exit NOT saving
			ButtonNext_Gamma_Window_Handler_Back_AA_I_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_AA_I_ProteinEvolverABC = "";
				System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
			
				Gamma_Window_AA_I_ProteinEvolverABC.setVisible(false);
				Gamma_Window_AA_I_ProteinEvolverABC.dispose();

				TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
				}
			});

			// Gamma (double) - exit saving
			ButtonNext_Gamma_Window_Next_AA_I_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_AA_I_ProteinEvolverABC = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextGamma1_AA_I_ProteinEvolverABC.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (shape) should be specified");
					JOptionPane.showMessageDialog(null, "A number (shape) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (shape) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (shape) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (shape) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (shape) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				Spar2 = TextGamma2_AA_I_ProteinEvolverABC.getText(); //String Spar2 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (scale) should be specified");
					JOptionPane.showMessageDialog(null, "A number (scale) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (scale) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (scale) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (scale) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (scale) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextGamma3_AA_I_ProteinEvolverABC.getText(); //String Spar1 = "23";
				Spar4 = TextGamma4_AA_I_ProteinEvolverABC.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_AA_I_ProteinEvolverABC = "gamma " + Spar1 + " " + Spar2;
						System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
						Gamma_Window_AA_I_ProteinEvolverABC.setVisible(false);
						Gamma_Window_AA_I_ProteinEvolverABC.dispose();
	
						TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{

						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							}

						if (Error == 0)
							{
							OutputDistribution_AA_I_ProteinEvolverABC = "gamma " + Spar1 + " " + Spar2 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
							Gamma_Window_AA_I_ProteinEvolverABC.setVisible(false);
							Gamma_Window_AA_I_ProteinEvolverABC.dispose();
		
							TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
							}
						}
					}
				}
				});	

			// Beta (double) - exit NOT saving
			ButtonNext_Beta_Window_Handler_Back_AA_I_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_AA_I_ProteinEvolverABC = "";
				System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
			
				Beta_Window_AA_I_ProteinEvolverABC.setVisible(false);
				Beta_Window_AA_I_ProteinEvolverABC.dispose();

				TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
				}
			});

			// Beta (double) - exit saving
			ButtonNext_Beta_Window_Next_AA_I_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_AA_I_ProteinEvolverABC = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextBeta1_AA_I_ProteinEvolverABC.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (shape alpha) should be specified");
					JOptionPane.showMessageDialog(null, "A number (shape alpha) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (shape alpha) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (shape alpha) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (shape alpha) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (shape alpha) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				Spar2 = TextBeta2_AA_I_ProteinEvolverABC.getText(); //String Spar2 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (shape beta) should be specified");
					JOptionPane.showMessageDialog(null, "A number (shape beta) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (shape beta) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (shape beta) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (shape beta) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (shape beta) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextBeta3_AA_I_ProteinEvolverABC.getText(); //String Spar1 = "23";
				Spar4 = TextBeta4_AA_I_ProteinEvolverABC.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_AA_I_ProteinEvolverABC = "beta " + Spar1 + " " + Spar2;
						System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
						Beta_Window_AA_I_ProteinEvolverABC.setVisible(false);
						Beta_Window_AA_I_ProteinEvolverABC.dispose();
	
						TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{

						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							}

						if (Error == 0)
							{
							OutputDistribution_AA_I_ProteinEvolverABC = "beta " + Spar1 + " " + Spar2 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_AA_I_ProteinEvolverABC: " + OutputDistribution_AA_I_ProteinEvolverABC);
							Beta_Window_AA_I_ProteinEvolverABC.setVisible(false);
							Beta_Window_AA_I_ProteinEvolverABC.dispose();
		
							TextAA_I_ProteinEvolverABC.setText(OutputDistribution_AA_I_ProteinEvolverABC); 
							}
						}
					}
				}
				});	

		TextAA_I_ProteinEvolverABC.setLocation(660, 280); // right, down
		TextAA_I_ProteinEvolverABC.setForeground(Color.darkGray);
		TextAA_I_ProteinEvolverABC.setFont(PLAINAtt);
        TextAA_I_ProteinEvolverABC.setSize(300, 30); // long, high
		panel7.add(TextAA_I_ProteinEvolverABC);




		/* +G sites */
       	label7i.setText("Rate of heterogeneity across sites (+G): ");
		label7i.setLocation(30, 330); // right, down
        label7i.setSize(800, 30); // long, high
      	panel7.add(label7i);

		KindAA_Gsites_group.add(KindAA_Gsites_NO);
		KindAA_Gsites_group.add(KindAA_Gsites_YES);		
		KindAA_Gsites_NO.setSelected(true);
		KindAA_Gsites_NO.setLocation(370, 330);
		KindAA_Gsites_NO.setSize(80, 30); // long, high
		KindAA_Gsites_YES.setLocation(460, 330);
		KindAA_Gsites_YES.setSize(80, 30); // long, high		
		panel7.add(KindAA_Gsites_NO);
		panel7.add(KindAA_Gsites_YES);

		KindAA_Gsites_NO.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

			AA_Gsites_ProteinEvolverABC.setVisible(false); // default
			TextAA_Gsites_ProteinEvolverABC.setVisible(false); // default
			TextAA_Gsites_ProteinEvolverABC.setText(""); // default
			ProteinEvolverABC_AA_Gamongsites = "#RateHetSites=uniform 0.76 0.90";

			String hola6 = TextAA_Gsites_ProteinEvolverABC.getText();
			System.out.println("+G is desactivated, TextAA_Gsites_ProteinEvolverABC: " + hola6);

			}
		});
		KindAA_Gsites_YES.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {	
		
			AA_Gsites_ProteinEvolverABC.setVisible(true); // default

			AA_Gsites_ProteinEvolverABC.setSelectedItem("fix"); // default
			TextFix_AA_Gsites_ProteinEvolverABC.setText("1.1"); // default
			Fix_Window_AA_Gsites_ProteinEvolverABC.setVisible(false); // default
			Fix_Window_AA_Gsites_ProteinEvolverABC.dispose(); // default
			TextUnif1_AA_Gsites_ProteinEvolverABC.setText("0.1"); // default
			TextUnif2_AA_Gsites_ProteinEvolverABC.setText("0.7"); // default
			TextExp1_AA_Gsites_ProteinEvolverABC.setText("1.2e4"); // default
			TextNorm1_AA_Gsites_ProteinEvolverABC.setText("0.004"); // default
			TextNorm2_AA_Gsites_ProteinEvolverABC.setText("0.0007"); // default
			TextGamma1_AA_Gsites_ProteinEvolverABC.setText("0.0001"); // default
			TextGamma2_AA_Gsites_ProteinEvolverABC.setText("0.002"); // default
			TextBeta1_AA_Gsites_ProteinEvolverABC.setText("0.05"); // default
			TextBeta2_AA_Gsites_ProteinEvolverABC.setText("0.02"); // default
			TextAA_Gsites_ProteinEvolverABC.setText("fix 1.1"); // default
			TextAA_Gsites_ProteinEvolverABC.setVisible(true); // default

			String hola7 = TextAA_Gsites_ProteinEvolverABC.getText();
			System.out.println("+G is activated, TextAA_Gsites_ProteinEvolverABC: " + hola7);
			}
		});


		AA_Gsites_ProteinEvolverABC.setVisible(false); // default
		TextAA_Gsites_ProteinEvolverABC.setVisible(false); // default
		TextAA_Gsites_ProteinEvolverABC.setText(""); // default

		AA_Gsites_ProteinEvolverABC.setLocation(560, 330); // right, down
        AA_Gsites_ProteinEvolverABC.setSize(120, 30); // long, high
      	panel7.add(AA_Gsites_ProteinEvolverABC);

		AA_Gsites_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				JComboBox KindOf = (JComboBox) e.getSource();
				String seletedKindOf = (String) KindOf.getSelectedItem(); 	//String[] AA_Gsites_ProteinEvolverABCOptions = {"no", "fix", "uniform", "exponential", "normal", "gamma", "beta"}; // fix, unif, norm(t), exp(t), gamma(t), beta(t)

				if (seletedKindOf == "fix")
					{
					FirstTimeFix_Window_AA_Gsites_ProteinEvolverABC++;
					Fix_Window_AA_Gsites_ProteinEvolverABC.setVisible( true );
									
					if (FirstTimeFix_Window_AA_Gsites_ProteinEvolverABC == 1)
						{
						Fix_Window_AA_Gsites_ProteinEvolverABC.setTitle( "Fix" );
						Fix_Window_AA_Gsites_ProteinEvolverABC.setSize(400, 300);
						Fix_Window_AA_Gsites_ProteinEvolverABC.setLayout( new GridLayout( 3, 2 ) ); // 15 rows, 2 columns
						Fix_Window_AA_Gsites_ProteinEvolverABC.setBackground(Color.white);
						Fix_Window_AA_Gsites_ProteinEvolverABC.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Fix_Window_AA_Gsites_ProteinEvolverABC.setLocationRelativeTo(null);

						JLabel labelX1 = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1.setText("Value e.g., 0.5");
						//labelX1.setLocation(30, 130); // right, down
        				//labelX1.setSize(300, 30); // long, high
      					Fix_Window_AA_Gsites_ProteinEvolverABC.add(labelX1);
	
						Fix_Window_AA_Gsites_ProteinEvolverABC.add(TextFix_AA_Gsites_ProteinEvolverABC);	
					
						JLabel labelXB = new JLabel();
       					labelXB.setText(" ");
      					Fix_Window_AA_Gsites_ProteinEvolverABC.add(labelXB);
						JLabel labelXC = new JLabel();
       					labelXC.setText(" ");
      					Fix_Window_AA_Gsites_ProteinEvolverABC.add(labelXC);
				

						//This creates a new button 
       					ButtonNext_Fix_Window_Next_AA_Gsites_ProteinEvolverABC.setSize(70, 70); // long, high
       	 				ButtonNext_Fix_Window_Next_AA_Gsites_ProteinEvolverABC.setVisible(true); 
       					Fix_Window_AA_Gsites_ProteinEvolverABC.add(ButtonNext_Fix_Window_Next_AA_Gsites_ProteinEvolverABC);

						//This creates a new button 
    	   				ButtonNext_Fix_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.setSize(70, 70); // long, high
       	 				ButtonNext_Fix_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.setVisible(true); 
       					Fix_Window_AA_Gsites_ProteinEvolverABC.add(ButtonNext_Fix_Window_Handler_Back_AA_Gsites_ProteinEvolverABC);
						}
        			} // end fix

				if (seletedKindOf == "uniform")
					{
					
					FirstTimeUnif_Window_AA_Gsites_ProteinEvolverABC++;
					Unif_Window_AA_Gsites_ProteinEvolverABC.setVisible( true );
									
					if (FirstTimeUnif_Window_AA_Gsites_ProteinEvolverABC == 1)
						{
						Unif_Window_AA_Gsites_ProteinEvolverABC.setTitle( "Uniform distribution" );
						Unif_Window_AA_Gsites_ProteinEvolverABC.setSize(500, 300);
						Unif_Window_AA_Gsites_ProteinEvolverABC.setLayout( new GridLayout( 4, 2 ) ); // 15 rows, 2 columns
						Unif_Window_AA_Gsites_ProteinEvolverABC.setBackground(Color.white);
						Unif_Window_AA_Gsites_ProteinEvolverABC.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Unif_Window_AA_Gsites_ProteinEvolverABC.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1b.setText("Minimum value e.g., 0.5");
      					Unif_Window_AA_Gsites_ProteinEvolverABC.add(labelX1b);
	
						Unif_Window_AA_Gsites_ProteinEvolverABC.add(TextUnif1_AA_Gsites_ProteinEvolverABC);	
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText("Maximum value e.g., 1.0");
      					Unif_Window_AA_Gsites_ProteinEvolverABC.add(labelX1c);
	
						Unif_Window_AA_Gsites_ProteinEvolverABC.add(TextUnif2_AA_Gsites_ProteinEvolverABC);	
						
						JLabel labelXBc = new JLabel();
       					labelXBc.setText(" ");
      					Unif_Window_AA_Gsites_ProteinEvolverABC.add(labelXBc);
						JLabel labelXCc = new JLabel();
    	   				labelXCc.setText(" ");
      					Unif_Window_AA_Gsites_ProteinEvolverABC.add(labelXCc);
					
	
						//This creates a new button 
    	   				ButtonNext_Unif_Window_Next_AA_Gsites_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Unif_Window_Next_AA_Gsites_ProteinEvolverABC.setVisible(true); 
       					Unif_Window_AA_Gsites_ProteinEvolverABC.add(ButtonNext_Unif_Window_Next_AA_Gsites_ProteinEvolverABC);
	
						//This creates a new button 
       					ButtonNext_Unif_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Unif_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.setVisible(true); 
       					Unif_Window_AA_Gsites_ProteinEvolverABC.add(ButtonNext_Unif_Window_Handler_Back_AA_Gsites_ProteinEvolverABC);
						}
        			} // end unif

				if (seletedKindOf == "exponential")
					{
					
					FirstTimeExp_Window_AA_Gsites_ProteinEvolverABC++;
					Exp_Window_AA_Gsites_ProteinEvolverABC.setVisible( true );
									
					if (FirstTimeExp_Window_AA_Gsites_ProteinEvolverABC == 1)
						{
						Exp_Window_AA_Gsites_ProteinEvolverABC.setTitle( "Exponential distribution" );
						Exp_Window_AA_Gsites_ProteinEvolverABC.setSize(500, 300);
						Exp_Window_AA_Gsites_ProteinEvolverABC.setLayout( new GridLayout( 6, 2 ) ); // 15 rows, 2 columns
						Exp_Window_AA_Gsites_ProteinEvolverABC.setBackground(Color.white);
						Exp_Window_AA_Gsites_ProteinEvolverABC.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Exp_Window_AA_Gsites_ProteinEvolverABC.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
						//labelX1.setFont(new Font("Arial", Font.BOLD, 14));
       					labelX1b.setText("Rate e.g., 1.2e7");
      					Exp_Window_AA_Gsites_ProteinEvolverABC.add(labelX1b);
	
						Exp_Window_AA_Gsites_ProteinEvolverABC.add(TextExp1_AA_Gsites_ProteinEvolverABC);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Exp_Window_AA_Gsites_ProteinEvolverABC.add(labelXgb);	
					
						String[] AA_Gsites_ProteinEvolverABC_Exp_truncatedOptions = {"no", "yes"};
    					JComboBox AA_Gsites_ProteinEvolverABC_Exp_truncated = new JComboBox(AA_Gsites_ProteinEvolverABC_Exp_truncatedOptions);
        				Exp_Window_AA_Gsites_ProteinEvolverABC.add(AA_Gsites_ProteinEvolverABC_Exp_truncated);

       					AA_Gsites_ProteinEvolverABC_labelt1_Exp.setText("Minimum value e.g., 0.5");
      					Exp_Window_AA_Gsites_ProteinEvolverABC.add(AA_Gsites_ProteinEvolverABC_labelt1_Exp);
	
						Exp_Window_AA_Gsites_ProteinEvolverABC.add(TextExp3_AA_Gsites_ProteinEvolverABC);

       					AA_Gsites_ProteinEvolverABC_labelt2_Exp.setText("Maximum value e.g., 1.0");
      					Exp_Window_AA_Gsites_ProteinEvolverABC.add(AA_Gsites_ProteinEvolverABC_labelt2_Exp);
	
						Exp_Window_AA_Gsites_ProteinEvolverABC.add(TextExp4_AA_Gsites_ProteinEvolverABC);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Exp_Window_AA_Gsites_ProteinEvolverABC.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Exp_Window_AA_Gsites_ProteinEvolverABC.add(labelX1h);
						

						AA_Gsites_ProteinEvolverABC_labelt1_Exp.setVisible(false);
						TextExp3_AA_Gsites_ProteinEvolverABC.setVisible(false);
						AA_Gsites_ProteinEvolverABC_labelt2_Exp.setVisible(false);
						TextExp4_AA_Gsites_ProteinEvolverABC.setVisible(false);
						
						AA_Gsites_ProteinEvolverABC_Exp_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								AA_Gsites_ProteinEvolverABC_labelt1_Exp.setVisible(true);
								TextExp3_AA_Gsites_ProteinEvolverABC.setVisible(true);
								AA_Gsites_ProteinEvolverABC_labelt2_Exp.setVisible(true);
								TextExp4_AA_Gsites_ProteinEvolverABC.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								AA_Gsites_ProteinEvolverABC_labelt1_Exp.setVisible(false);
								TextExp3_AA_Gsites_ProteinEvolverABC.setVisible(false);
								AA_Gsites_ProteinEvolverABC_labelt2_Exp.setVisible(false);
								TextExp4_AA_Gsites_ProteinEvolverABC.setVisible(false);
								
								TextExp3_AA_Gsites_ProteinEvolverABC.setText("");
								TextExp4_AA_Gsites_ProteinEvolverABC.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Exp_Window_Next_AA_Gsites_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Exp_Window_Next_AA_Gsites_ProteinEvolverABC.setVisible(true); 
       					Exp_Window_AA_Gsites_ProteinEvolverABC.add(ButtonNext_Exp_Window_Next_AA_Gsites_ProteinEvolverABC);
	
						//This creates a new button 
       					ButtonNext_Exp_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Exp_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.setVisible(true); 
       					Exp_Window_AA_Gsites_ProteinEvolverABC.add(ButtonNext_Exp_Window_Handler_Back_AA_Gsites_ProteinEvolverABC);
						}
        			} // end Exp

				if (seletedKindOf == "normal")
					{
					
					FirstTimeNorm_Window_AA_Gsites_ProteinEvolverABC++;
					Norm_Window_AA_Gsites_ProteinEvolverABC.setVisible( true );
									
					if (FirstTimeNorm_Window_AA_Gsites_ProteinEvolverABC == 1)
						{
						Norm_Window_AA_Gsites_ProteinEvolverABC.setTitle( "Normal distribution" );
						Norm_Window_AA_Gsites_ProteinEvolverABC.setSize(500, 300);
						Norm_Window_AA_Gsites_ProteinEvolverABC.setLayout( new GridLayout( 7, 2 ) ); // 15 rows, 2 columns
						Norm_Window_AA_Gsites_ProteinEvolverABC.setBackground(Color.white);
						Norm_Window_AA_Gsites_ProteinEvolverABC.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Norm_Window_AA_Gsites_ProteinEvolverABC.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
       					labelX1b.setText("Mean (location) e.g., 0.5");
      					Norm_Window_AA_Gsites_ProteinEvolverABC.add(labelX1b);
	
						Norm_Window_AA_Gsites_ProteinEvolverABC.add(TextNorm1_AA_Gsites_ProteinEvolverABC);

						JLabel labelX2b = new JLabel();
       					labelX2b.setText("Variance (squared scale) e.g., 0.001");
      					Norm_Window_AA_Gsites_ProteinEvolverABC.add(labelX2b);
	
						Norm_Window_AA_Gsites_ProteinEvolverABC.add(TextNorm2_AA_Gsites_ProteinEvolverABC);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Norm_Window_AA_Gsites_ProteinEvolverABC.add(labelXgb);	
					
						String[] AA_Gsites_ProteinEvolverABC_Norm_truncatedOptions = {"no", "yes"};
  						JComboBox AA_Gsites_ProteinEvolverABC_Norm_truncated = new JComboBox(AA_Gsites_ProteinEvolverABC_Norm_truncatedOptions);
        				Norm_Window_AA_Gsites_ProteinEvolverABC.add(AA_Gsites_ProteinEvolverABC_Norm_truncated);

       					AA_Gsites_ProteinEvolverABC_labelt1_Norm.setText("Minimum value e.g., 0.5");
      					Norm_Window_AA_Gsites_ProteinEvolverABC.add(AA_Gsites_ProteinEvolverABC_labelt1_Norm);
	
						Norm_Window_AA_Gsites_ProteinEvolverABC.add(TextNorm3_AA_Gsites_ProteinEvolverABC);

       					AA_Gsites_ProteinEvolverABC_labelt2_Norm.setText("Maximum value e.g., 1.0");
      					Norm_Window_AA_Gsites_ProteinEvolverABC.add(AA_Gsites_ProteinEvolverABC_labelt2_Norm);
	
						Norm_Window_AA_Gsites_ProteinEvolverABC.add(TextNorm4_AA_Gsites_ProteinEvolverABC);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Norm_Window_AA_Gsites_ProteinEvolverABC.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Norm_Window_AA_Gsites_ProteinEvolverABC.add(labelX1h);
						

						AA_Gsites_ProteinEvolverABC_labelt1_Norm.setVisible(false);
						TextNorm3_AA_Gsites_ProteinEvolverABC.setVisible(false);
						AA_Gsites_ProteinEvolverABC_labelt2_Norm.setVisible(false);
						TextNorm4_AA_Gsites_ProteinEvolverABC.setVisible(false);
						
						AA_Gsites_ProteinEvolverABC_Norm_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								AA_Gsites_ProteinEvolverABC_labelt1_Norm.setVisible(true);
								TextNorm3_AA_Gsites_ProteinEvolverABC.setVisible(true);
								AA_Gsites_ProteinEvolverABC_labelt2_Norm.setVisible(true);
								TextNorm4_AA_Gsites_ProteinEvolverABC.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								AA_Gsites_ProteinEvolverABC_labelt1_Norm.setVisible(false);
								TextNorm3_AA_Gsites_ProteinEvolverABC.setVisible(false);
								AA_Gsites_ProteinEvolverABC_labelt2_Norm.setVisible(false);
								TextNorm4_AA_Gsites_ProteinEvolverABC.setVisible(false);
								
								TextNorm3_AA_Gsites_ProteinEvolverABC.setText("");
								TextNorm4_AA_Gsites_ProteinEvolverABC.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Norm_Window_Next_AA_Gsites_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Norm_Window_Next_AA_Gsites_ProteinEvolverABC.setVisible(true); 
       					Norm_Window_AA_Gsites_ProteinEvolverABC.add(ButtonNext_Norm_Window_Next_AA_Gsites_ProteinEvolverABC);
	
						//This creates a new button 
       					ButtonNext_Norm_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Norm_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.setVisible(true); 
       					Norm_Window_AA_Gsites_ProteinEvolverABC.add(ButtonNext_Norm_Window_Handler_Back_AA_Gsites_ProteinEvolverABC);
						}
        			} // end Norm

				if (seletedKindOf == "gamma")
					{
					
					FirstTimeGamma_Window_AA_Gsites_ProteinEvolverABC++;
					Gamma_Window_AA_Gsites_ProteinEvolverABC.setVisible( true );
									
					if (FirstTimeGamma_Window_AA_Gsites_ProteinEvolverABC == 1)
						{
						Gamma_Window_AA_Gsites_ProteinEvolverABC.setTitle( "Gamma distribution" );
						Gamma_Window_AA_Gsites_ProteinEvolverABC.setSize(500, 300);
						Gamma_Window_AA_Gsites_ProteinEvolverABC.setLayout( new GridLayout( 7, 2 ) ); // 15 rows, 2 columns
						Gamma_Window_AA_Gsites_ProteinEvolverABC.setBackground(Color.white);
						Gamma_Window_AA_Gsites_ProteinEvolverABC.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Gamma_Window_AA_Gsites_ProteinEvolverABC.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
       					labelX1b.setText("Shape e.g., 0.5");
      					Gamma_Window_AA_Gsites_ProteinEvolverABC.add(labelX1b);
	
						Gamma_Window_AA_Gsites_ProteinEvolverABC.add(TextGamma1_AA_Gsites_ProteinEvolverABC);

						JLabel labelX2b = new JLabel();
       					labelX2b.setText("Scale e.g., 0.001");
      					Gamma_Window_AA_Gsites_ProteinEvolverABC.add(labelX2b);
	
						Gamma_Window_AA_Gsites_ProteinEvolverABC.add(TextGamma2_AA_Gsites_ProteinEvolverABC);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Gamma_Window_AA_Gsites_ProteinEvolverABC.add(labelXgb);	
					
						String[] AA_Gsites_ProteinEvolverABC_Gamma_truncatedOptions = {"no", "yes"};
  						JComboBox AA_Gsites_ProteinEvolverABC_Gamma_truncated = new JComboBox(AA_Gsites_ProteinEvolverABC_Gamma_truncatedOptions);
        				Gamma_Window_AA_Gsites_ProteinEvolverABC.add(AA_Gsites_ProteinEvolverABC_Gamma_truncated);

       					AA_Gsites_ProteinEvolverABC_labelt1_Gamma.setText("Minimum value e.g., 0.5");
      					Gamma_Window_AA_Gsites_ProteinEvolverABC.add(AA_Gsites_ProteinEvolverABC_labelt1_Gamma);
	
						Gamma_Window_AA_Gsites_ProteinEvolverABC.add(TextGamma3_AA_Gsites_ProteinEvolverABC);

       					AA_Gsites_ProteinEvolverABC_labelt2_Gamma.setText("Maximum value e.g., 1.0");
      					Gamma_Window_AA_Gsites_ProteinEvolverABC.add(AA_Gsites_ProteinEvolverABC_labelt2_Gamma);
	
						Gamma_Window_AA_Gsites_ProteinEvolverABC.add(TextGamma4_AA_Gsites_ProteinEvolverABC);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Gamma_Window_AA_Gsites_ProteinEvolverABC.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Gamma_Window_AA_Gsites_ProteinEvolverABC.add(labelX1h);
						

						AA_Gsites_ProteinEvolverABC_labelt1_Gamma.setVisible(false);
						TextGamma3_AA_Gsites_ProteinEvolverABC.setVisible(false);
						AA_Gsites_ProteinEvolverABC_labelt2_Gamma.setVisible(false);
						TextGamma4_AA_Gsites_ProteinEvolverABC.setVisible(false);
						
						AA_Gsites_ProteinEvolverABC_Gamma_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								AA_Gsites_ProteinEvolverABC_labelt1_Gamma.setVisible(true);
								TextGamma3_AA_Gsites_ProteinEvolverABC.setVisible(true);
								AA_Gsites_ProteinEvolverABC_labelt2_Gamma.setVisible(true);
								TextGamma4_AA_Gsites_ProteinEvolverABC.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								AA_Gsites_ProteinEvolverABC_labelt1_Gamma.setVisible(false);
								TextGamma3_AA_Gsites_ProteinEvolverABC.setVisible(false);
								AA_Gsites_ProteinEvolverABC_labelt2_Gamma.setVisible(false);
								TextGamma4_AA_Gsites_ProteinEvolverABC.setVisible(false);
								
								TextGamma3_AA_Gsites_ProteinEvolverABC.setText("");
								TextGamma4_AA_Gsites_ProteinEvolverABC.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Gamma_Window_Next_AA_Gsites_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Gamma_Window_Next_AA_Gsites_ProteinEvolverABC.setVisible(true); 
       					Gamma_Window_AA_Gsites_ProteinEvolverABC.add(ButtonNext_Gamma_Window_Next_AA_Gsites_ProteinEvolverABC);
	
						//This creates a new button 
       					ButtonNext_Gamma_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Gamma_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.setVisible(true); 
       					Gamma_Window_AA_Gsites_ProteinEvolverABC.add(ButtonNext_Gamma_Window_Handler_Back_AA_Gsites_ProteinEvolverABC);
						}
        			} // end Gamma

				if (seletedKindOf == "beta")
					{
					
					FirstTimeBeta_Window_AA_Gsites_ProteinEvolverABC++;
					Beta_Window_AA_Gsites_ProteinEvolverABC.setVisible( true );
									
					if (FirstTimeBeta_Window_AA_Gsites_ProteinEvolverABC == 1)
						{
						Beta_Window_AA_Gsites_ProteinEvolverABC.setTitle( "Beta distribution" );
						Beta_Window_AA_Gsites_ProteinEvolverABC.setSize(500, 300);
						Beta_Window_AA_Gsites_ProteinEvolverABC.setLayout( new GridLayout( 7, 2 ) ); // 15 rows, 2 columns
						Beta_Window_AA_Gsites_ProteinEvolverABC.setBackground(Color.white);
						Beta_Window_AA_Gsites_ProteinEvolverABC.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        				Beta_Window_AA_Gsites_ProteinEvolverABC.setLocationRelativeTo(null);
	
						JLabel labelX1b = new JLabel();
       					labelX1b.setText("Shape (alpha) e.g., 0.5");
      					Beta_Window_AA_Gsites_ProteinEvolverABC.add(labelX1b);
	
						Beta_Window_AA_Gsites_ProteinEvolverABC.add(TextBeta1_AA_Gsites_ProteinEvolverABC);

						JLabel labelX2b = new JLabel();
       					labelX2b.setText("Shape (beta) e.g., 0.001");
      					Beta_Window_AA_Gsites_ProteinEvolverABC.add(labelX2b);
	
						Beta_Window_AA_Gsites_ProteinEvolverABC.add(TextBeta2_AA_Gsites_ProteinEvolverABC);	
	
						JLabel labelXgb = new JLabel();
       					labelXgb.setText("Truncated: ");
      					Beta_Window_AA_Gsites_ProteinEvolverABC.add(labelXgb);	
					
						String[] AA_Gsites_ProteinEvolverABC_Beta_truncatedOptions = {"no", "yes"};
  						JComboBox AA_Gsites_ProteinEvolverABC_Beta_truncated = new JComboBox(AA_Gsites_ProteinEvolverABC_Beta_truncatedOptions);
        				Beta_Window_AA_Gsites_ProteinEvolverABC.add(AA_Gsites_ProteinEvolverABC_Beta_truncated);

       					AA_Gsites_ProteinEvolverABC_labelt1_Beta.setText("Minimum value e.g., 0.5");
      					Beta_Window_AA_Gsites_ProteinEvolverABC.add(AA_Gsites_ProteinEvolverABC_labelt1_Beta);
	
						Beta_Window_AA_Gsites_ProteinEvolverABC.add(TextBeta3_AA_Gsites_ProteinEvolverABC);

       					AA_Gsites_ProteinEvolverABC_labelt2_Beta.setText("Maximum value e.g., 1.0");
      					Beta_Window_AA_Gsites_ProteinEvolverABC.add(AA_Gsites_ProteinEvolverABC_labelt2_Beta);
	
						Beta_Window_AA_Gsites_ProteinEvolverABC.add(TextBeta4_AA_Gsites_ProteinEvolverABC);
	
						JLabel labelX1c = new JLabel();
       					labelX1c.setText(" ");
      					Beta_Window_AA_Gsites_ProteinEvolverABC.add(labelX1c);
						JLabel labelX1h = new JLabel();
    	   				labelX1h.setText(" ");
      					Beta_Window_AA_Gsites_ProteinEvolverABC.add(labelX1h);
						

						AA_Gsites_ProteinEvolverABC_labelt1_Beta.setVisible(false);
						TextBeta3_AA_Gsites_ProteinEvolverABC.setVisible(false);
						AA_Gsites_ProteinEvolverABC_labelt2_Beta.setVisible(false);
						TextBeta4_AA_Gsites_ProteinEvolverABC.setVisible(false);
						
						AA_Gsites_ProteinEvolverABC_Beta_truncated.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) 
							{
							JComboBox TruncatedHere = (JComboBox) e.getSource();
							String seletedTruncatedHere = (String) TruncatedHere.getSelectedItem();							
							if (seletedTruncatedHere == "yes")
								{
								AA_Gsites_ProteinEvolverABC_labelt1_Beta.setVisible(true);
								TextBeta3_AA_Gsites_ProteinEvolverABC.setVisible(true);
								AA_Gsites_ProteinEvolverABC_labelt2_Beta.setVisible(true);
								TextBeta4_AA_Gsites_ProteinEvolverABC.setVisible(true);
								}
							if (seletedTruncatedHere == "no")
								{
								AA_Gsites_ProteinEvolverABC_labelt1_Beta.setVisible(false);
								TextBeta3_AA_Gsites_ProteinEvolverABC.setVisible(false);
								AA_Gsites_ProteinEvolverABC_labelt2_Beta.setVisible(false);
								TextBeta4_AA_Gsites_ProteinEvolverABC.setVisible(false);
								
								TextBeta3_AA_Gsites_ProteinEvolverABC.setText("");
								TextBeta4_AA_Gsites_ProteinEvolverABC.setText("");
								}
							}
						});
	
						//This creates a new button 
    	   				ButtonNext_Beta_Window_Next_AA_Gsites_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Beta_Window_Next_AA_Gsites_ProteinEvolverABC.setVisible(true); 
       					Beta_Window_AA_Gsites_ProteinEvolverABC.add(ButtonNext_Beta_Window_Next_AA_Gsites_ProteinEvolverABC);
	
						//This creates a new button 
       					ButtonNext_Beta_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.setSize(70, 70); // long, high
        				ButtonNext_Beta_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.setVisible(true); 
       					Beta_Window_AA_Gsites_ProteinEvolverABC.add(ButtonNext_Beta_Window_Handler_Back_AA_Gsites_ProteinEvolverABC);
						}
        			} // end Beta


				TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
				}

			});

			// Fix (double) - exit NOT saving
			ButtonNext_Fix_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_AA_Gsites_ProteinEvolverABC = "";
				System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
			
				Fix_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
				Fix_Window_AA_Gsites_ProteinEvolverABC.dispose();

				TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
				}
			});

			// Fix (double) - exit saving
			ButtonNext_Fix_Window_Next_AA_Gsites_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_AA_Gsites_ProteinEvolverABC = "";
				par1 = -1;
				Spar1 = "";

				Spar1 = TextFix_AA_Gsites_ProteinEvolverABC.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number should be specified");
					JOptionPane.showMessageDialog(null, "A number should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}
				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}
				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					else // Ok
						{
						OutputDistribution_AA_Gsites_ProteinEvolverABC = "fix " + Spar1;
						System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
						Fix_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
						Fix_Window_AA_Gsites_ProteinEvolverABC.dispose();
	
						TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
						}
					}
					}
				});		

			// Uniform (double) - exit NOT saving
			ButtonNext_Unif_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_AA_Gsites_ProteinEvolverABC = "";
				System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
			
				Unif_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
				Unif_Window_AA_Gsites_ProteinEvolverABC.dispose();

				TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
				}
			});

			// Uniform (double) - exit saving
			ButtonNext_Unif_Window_Next_AA_Gsites_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_AA_Gsites_ProteinEvolverABC = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";

				Spar1 = TextUnif1_AA_Gsites_ProteinEvolverABC.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (minimum) should be specified");
					JOptionPane.showMessageDialog(null, "A number (minimum) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}
				Spar2 = TextUnif2_AA_Gsites_ProteinEvolverABC.getText(); //String Spar1 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (maximum) should be specified");
					JOptionPane.showMessageDialog(null, "A number (maximum) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (minimum) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (minimum) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}
				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (maximum) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (maximum) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}


				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (minimum) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (minimum) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (maximum) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (maximum) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				if (Error == 0)
					{
					if (par1 > par2)
						{
						System.out.println("The minimum value should be smaller than the maximum value");
						JOptionPane.showMessageDialog(null, "The minimum value should be smaller than the maximum value", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					}
					
				if (Error == 0) // Ok
					{
					OutputDistribution_AA_Gsites_ProteinEvolverABC = "uniform " + Spar1 + " " + Spar2;
					System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
					Unif_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
					Unif_Window_AA_Gsites_ProteinEvolverABC.dispose();
	
					TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
					}

					}
				});	

			// Exponential (double) - exit NOT saving
			ButtonNext_Exp_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_AA_Gsites_ProteinEvolverABC = "";
				System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
			
				Exp_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
				Exp_Window_AA_Gsites_ProteinEvolverABC.dispose();

				TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
				}
			});

			// Exponential (double) - exit saving
			ButtonNext_Exp_Window_Next_AA_Gsites_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_AA_Gsites_ProteinEvolverABC = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextExp1_AA_Gsites_ProteinEvolverABC.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (rate) should be specified");
					JOptionPane.showMessageDialog(null, "A number (rate) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (rate) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (rate) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 < 0 || par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (rate) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (rate) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextExp3_AA_Gsites_ProteinEvolverABC.getText(); //String Spar1 = "23";
				Spar4 = TextExp4_AA_Gsites_ProteinEvolverABC.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_AA_Gsites_ProteinEvolverABC = "exp " + Spar1;
						System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
						Exp_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
						Exp_Window_AA_Gsites_ProteinEvolverABC.dispose();
	
						TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{

						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							}


						if (Error == 0)
							{
							OutputDistribution_AA_Gsites_ProteinEvolverABC = "exp " + Spar1 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
							Exp_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
							Exp_Window_AA_Gsites_ProteinEvolverABC.dispose();
		
							TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
							}
						}
					}
					}
				});	

			// Normal (double) - exit NOT saving
			ButtonNext_Norm_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_AA_Gsites_ProteinEvolverABC = "";
				System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
			
				Norm_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
				Norm_Window_AA_Gsites_ProteinEvolverABC.dispose();

				TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
				}
			});

			// Normal (double) - exit saving
			ButtonNext_Norm_Window_Next_AA_Gsites_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_AA_Gsites_ProteinEvolverABC = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextNorm1_AA_Gsites_ProteinEvolverABC.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (mean) should be specified");
					JOptionPane.showMessageDialog(null, "A number (mean) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (mean) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (mean) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (mean) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (mean) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				Spar2 = TextNorm2_AA_Gsites_ProteinEvolverABC.getText(); //String Spar2 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (variance) should be specified");
					JOptionPane.showMessageDialog(null, "A number (variance) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (variance) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (variance) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (variance) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (variance) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextNorm3_AA_Gsites_ProteinEvolverABC.getText(); //String Spar1 = "23";
				Spar4 = TextNorm4_AA_Gsites_ProteinEvolverABC.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_AA_Gsites_ProteinEvolverABC = "norm " + Spar1 + " " + Spar2;
						System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
						Norm_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
						Norm_Window_AA_Gsites_ProteinEvolverABC.dispose();
	
						TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{
						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							}

						if (Error == 0)
							{
							OutputDistribution_AA_Gsites_ProteinEvolverABC = "norm " + Spar1 + " " + Spar2 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
							Norm_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
							Norm_Window_AA_Gsites_ProteinEvolverABC.dispose();
		
							TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
							}
						}
					}
				}
				});	

			
			// Gamma (double) - exit NOT saving
			ButtonNext_Gamma_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_AA_Gsites_ProteinEvolverABC = "";
				System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
			
				Gamma_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
				Gamma_Window_AA_Gsites_ProteinEvolverABC.dispose();

				TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
				}
			});

			// Gamma (double) - exit saving
			ButtonNext_Gamma_Window_Next_AA_Gsites_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_AA_Gsites_ProteinEvolverABC = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextGamma1_AA_Gsites_ProteinEvolverABC.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (shape) should be specified");
					JOptionPane.showMessageDialog(null, "A number (shape) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (shape) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (shape) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (shape) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (shape) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				Spar2 = TextGamma2_AA_Gsites_ProteinEvolverABC.getText(); //String Spar2 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (scale) should be specified");
					JOptionPane.showMessageDialog(null, "A number (scale) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (scale) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (scale) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (scale) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (scale) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextGamma3_AA_Gsites_ProteinEvolverABC.getText(); //String Spar1 = "23";
				Spar4 = TextGamma4_AA_Gsites_ProteinEvolverABC.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_AA_Gsites_ProteinEvolverABC = "gamma " + Spar1 + " " + Spar2;
						System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
						Gamma_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
						Gamma_Window_AA_Gsites_ProteinEvolverABC.dispose();
	
						TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{

						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							}

						if (Error == 0)
							{
							OutputDistribution_AA_Gsites_ProteinEvolverABC = "gamma " + Spar1 + " " + Spar2 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
							Gamma_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
							Gamma_Window_AA_Gsites_ProteinEvolverABC.dispose();
		
							TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
							}
						}
					}
				}
				});	

			// Beta (double) - exit NOT saving
			ButtonNext_Beta_Window_Handler_Back_AA_Gsites_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				OutputDistribution_AA_Gsites_ProteinEvolverABC = "";
				System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
			
				Beta_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
				Beta_Window_AA_Gsites_ProteinEvolverABC.dispose();

				TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
				}
			});

			// Beta (double) - exit saving
			ButtonNext_Beta_Window_Next_AA_Gsites_ProteinEvolverABC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
				{
				Error = 0;
				OutputDistribution_AA_Gsites_ProteinEvolverABC = "";
				par1 = -1;
				Spar1 = "";
				par2 = -1;
				Spar2 = "";
				par3 = -1;
				Spar3 = "";
				par4 = -1;
				Spar4 = "";

				Spar1 = TextBeta1_AA_Gsites_ProteinEvolverABC.getText(); //String Spar1 = "23";
				if (Spar1.trim().length() == 0) // check empty
					{
					System.out.println("A number (shape alpha) should be specified");
					JOptionPane.showMessageDialog(null, "A number (shape alpha) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar1.length(); i++) // check double
    					{
        				char c = Spar1.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (shape alpha) number: " + Spar1);
							JOptionPane.showMessageDialog(null, "Incorrect (shape alpha) number: " + Spar1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par1 = Double.parseDouble(Spar1);
					if ((par1 > 1000000000 || Spar1.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (shape alpha) is out of range: " + par1);
						JOptionPane.showMessageDialog(null, "The value (shape alpha) is out of range: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				Spar2 = TextBeta2_AA_Gsites_ProteinEvolverABC.getText(); //String Spar2 = "23";
				if (Spar2.trim().length() == 0) // check empty
					{
					System.out.println("A number (shape beta) should be specified");
					JOptionPane.showMessageDialog(null, "A number (shape beta) should be specified", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}

				if (Error == 0)
					{
					for (int i=0; i < Spar2.length(); i++) // check double
    					{
        				char c = Spar2.charAt(i);
        				if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
        					{
  	          				; // ok
    	    				}
						else
							{
							System.out.println("Incorrect (shape beta) number: " + Spar2);
							JOptionPane.showMessageDialog(null, "Incorrect (shape beta) number: " + Spar2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}

				if (Error == 0)
					{
					par2 = Double.parseDouble(Spar2);
					if ((par2 < 0 || par2 > 1000000000 || Spar2.trim().length() == 0) && (Error == 0))
						{
						System.out.println("The value (shape beta) is out of range: " + par2);
						JOptionPane.showMessageDialog(null, "The value (shape beta) is out of range: " + par2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				// truncated?
				Spar3 = TextBeta3_AA_Gsites_ProteinEvolverABC.getText(); //String Spar1 = "23";
				Spar4 = TextBeta4_AA_Gsites_ProteinEvolverABC.getText(); //String Spar1 = "23";
				int truncatedThis = 0;
				if (Spar3.trim().length() == 0 && Spar4.trim().length() == 0) // check empty, no truncated
					{
					if (Error == 0) // Ok
						{
						OutputDistribution_AA_Gsites_ProteinEvolverABC = "beta " + Spar1 + " " + Spar2;
						System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
						Beta_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
						Beta_Window_AA_Gsites_ProteinEvolverABC.dispose();
	
						TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
						}
					}
				else if (Spar3.trim().length() == 0 && Spar4.trim().length() != 0)
					{
					System.out.println("The truncated value (minimum) is out of range: " + Spar3);
					JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else if (Spar3.trim().length() != 0 && Spar4.trim().length() == 0)
					{
					System.out.println("The truncated value (maximum) is out of range: " + Spar4);
					JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				else // truncated
					{
					if (Error == 0) // Ok
						{

						if (Error == 0)
							{
							for (int i=0; i < Spar3.length(); i++) // check double
    							{
        						char c = Spar3.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (minimum) number: " + Spar3);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (minimum) number: " + Spar3, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							for (int i=0; i < Spar4.length(); i++) // check double
    							{
        						char c = Spar4.charAt(i);
        						if ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == '-')) // fix 1.0e-9
       	 							{
  	    	    	  				; // ok
    	    						}
								else
									{
									System.out.println("Incorrect truncated (maximum) number: " + Spar4);
									JOptionPane.showMessageDialog(null, "Incorrect truncated (maximum) number: " + Spar4, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}

						if (Error == 0)
							{
							par3 = Double.parseDouble(Spar3);
							if ((par3 < 0 || par3 > 1000000000 || Spar3.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (minimum) is out of range: " + par3);
								JOptionPane.showMessageDialog(null, "The truncated value (minimum) is out of range: " + par3, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							
							par4 = Double.parseDouble(Spar4);
							if ((par4 < 0 || par4 > 1000000000 || Spar4.trim().length() == 0) && (Error == 0))
								{
								System.out.println("The truncated value (maximum) is out of range: " + par4);
								JOptionPane.showMessageDialog(null, "The truncated value (maximum) is out of range: " + par4, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								//System.exit(0);
								}
							}

						if (Error == 0)
							{
							OutputDistribution_AA_Gsites_ProteinEvolverABC = "beta " + Spar1 + " " + Spar2 + " t " + Spar3 + " " + Spar4;
							System.out.println("OutputDistribution_AA_Gsites_ProteinEvolverABC: " + OutputDistribution_AA_Gsites_ProteinEvolverABC);
							Beta_Window_AA_Gsites_ProteinEvolverABC.setVisible(false);
							Beta_Window_AA_Gsites_ProteinEvolverABC.dispose();
		
							TextAA_Gsites_ProteinEvolverABC.setText(OutputDistribution_AA_Gsites_ProteinEvolverABC); 
							}
						}
					}
				}
				});	

		TextAA_Gsites_ProteinEvolverABC.setLocation(700, 330); // right, down
		TextAA_Gsites_ProteinEvolverABC.setForeground(Color.darkGray);
		TextAA_Gsites_ProteinEvolverABC.setFont(PLAINAtt);
        TextAA_Gsites_ProteinEvolverABC.setSize(300, 30); // long, high
		panel7.add(TextAA_Gsites_ProteinEvolverABC);



		//This creates a new button 
		JButton ButtonNext7 = new JButton("Save and next");
		ButtonNext7.setLocation(800, 620); // right, down
        ButtonNext7.setSize(170, 70); // long, high
       	ButtonNext7.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run7Handler = new runButton7Handler();
		ButtonNext7.addActionListener(run7Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel7.add(ButtonNext7);
		}


	/*** TAB 8: sequence regions (I) (ProteinEvolverABC) ***/
	public void createPage8()
		{
		panel8.setLayout( null );
		panel8.setPreferredSize(new Dimension(1100,800));

		JLabel label8a = new JLabel();
       	label8a.setText("Settings for models (I)");
		label8a.setFont(new Font("Arial", Font.BOLD, 13));
		label8a.setLocation(30, 15); // right, down
        label8a.setSize(800, 30); // long, high
      	panel8.add(label8a);


		//This creates a new button 
		JButton ButtonNext8 = new JButton("Save and next");
		ButtonNext8.setLocation(800, 620); // right, down
        ButtonNext8.setSize(170, 70); // long, high
       	ButtonNext8.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run8Handler = new runButton8Handler();
		ButtonNext8.addActionListener(run8Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel8.add(ButtonNext8);
		}


	/*** TAB 9: sequence regions (II) (ProteinEvolverABC) ***/
	public void createPage9()
		{
		panel9.setLayout( null );
		panel9.setPreferredSize(new Dimension(1100,800));

		JLabel label9a = new JLabel();
       	label9a.setText("Settings for models (II)");
		label9a.setFont(new Font("Arial", Font.BOLD, 14));
		label9a.setLocation(30, 15); // right, down
        label9a.setSize(800, 30); // long, high
      	panel9.add(label9a);



		//This creates a new button 
		JButton ButtonNext9 = new JButton("Save and next");
		ButtonNext9.setLocation(800, 620); // right, down
        ButtonNext9.setSize(170, 70); // long, high
       	ButtonNext9.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run9Handler = new runButton9Handler();
		ButtonNext9.addActionListener(run9Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel9.add(ButtonNext9);
		}





	/*** TAB 11: sequence regions (ProteinEvolverABC) ***/
	public void createPage11()
		{
		panel11.setLayout( null );
		panel11.setPreferredSize(new Dimension(1100,800));
		
		JLabel label11a = new JLabel();
       	label11a.setText("Settings for models");
		label11a.setFont(new Font("Arial", Font.BOLD, 14));
		label11a.setLocation(30, 15); // right, down
        label11a.setSize(800, 30); // long, high
      	panel11.add(label11a);
		
		

		//This creates a new button 
		JButton ButtonNext11 = new JButton("Save and next");
		ButtonNext11.setLocation(800, 620); // right, down
        ButtonNext11.setSize(170, 70); // long, high
       	ButtonNext11.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run11Handler = new runButton11Handler();
		ButtonNext11.addActionListener(run11Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel11.add(ButtonNext11);
		}



	/*** TAB 12: sequence regions (ProteinEvolverABC) ***/
	public void createPage12()
		{
		panel12.setLayout( null );
		panel12.setPreferredSize(new Dimension(1100,800));


		JLabel label12a = new JLabel();
       	label12a.setText("Settings for models");
		label12a.setFont(new Font("Arial", Font.BOLD, 14));
		label12a.setLocation(30, 15); // right, down
        label12a.setSize(800, 30); // long, high
      	panel12.add(label12a);


		JLabel label12bx = new JLabel();
       	label12bx.setText("substitution model:");
		label12bx.setFont(new Font("Arial", Font.BOLD, 13));
		label12bx.setLocation(30, 70); // right, down
        label12bx.setSize(900, 30); // long, high
      	panel12.add(label12bx);

			
		//This creates a new button 
		JButton ButtonNext12 = new JButton("Save and next");
		ButtonNext12.setLocation(800, 620); // right, down
        ButtonNext12.setSize(170, 70); // long, high
        ButtonNext12.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run12Handler = new runButton12Handler();
		ButtonNext12.addActionListener(run12Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel12.add(ButtonNext12);
		}


	
	/*** TAB 13: sequence regions (ProteinEvolverABC) ***/
	public void createPage13()
		{
		panel13.setLayout( null );
		panel13.setPreferredSize(new Dimension(1100,800));
		

		JLabel label13a = new JLabel();
       	label13a.setText("Settings for Models");
		label13a.setFont(new Font("Arial", Font.BOLD, 14));
		label13a.setLocation(30, 15); // right, down
        label13a.setSize(800, 30); // long, high
      	panel13.add(label13a);
		
		JLabel label13aba = new JLabel();
		label13aba.setText("These settings are required");
		label13aba.setFont(new Font("Arial", Font.PLAIN | Font.BOLD, 14));
		label13aba.setLocation(30, 50); // right, down
        label13aba.setSize(200, 30); // long, high
      	panel13.add(label13aba);

		


		//This creates a new button 
		JButton ButtonNext13 = new JButton("Save and next");
		ButtonNext13.setLocation(800, 620); // right, down
        ButtonNext13.setSize(170, 70); // long, high
        ButtonNext13.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run13Handler = new runButton13Handler();
		ButtonNext13.addActionListener(run13Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel13.add(ButtonNext13);
		}
	
////////////////////////////////
/*	public void createPage14()
		{
		panel14.setLayout( new GridLayout( 3, 2 ) );
		panel14.setPreferredSize(new Dimension(1100,800));

		panel14.add( new JLabel( "Field 1:" ) );
		panel14.add( new TextArea() );
		panel14.add( new JLabel( "Field 2:" ) );
		panel14.add( new TextArea() );
		panel14.add( new JLabel( "Field 3:" ) );
		panel14.add( new TextArea() );
		}	*/
////////////////////////////////
	
	/*** TAB 15: ABC ***/
	public void createPage15()
		{
		panel15.setLayout( null );
		panel15.setPreferredSize(new Dimension(1100,800));
		

		JLabel label15a = new JLabel();
       	label15a.setText("Settings for approximate Bayesian estimation ");
		label15a.setFont(new Font("Arial", Font.BOLD, 14));
		label15a.setLocation(30, 15); // right, down
        label15a.setSize(400, 30); // long, high
      	panel15.add(label15a);

		JLabel label15ca = new JLabel();
		label15ca.setText("These settings are required");
		label15ca.setFont(new Font("Arial", Font.PLAIN | Font.BOLD, 14));
		label15ca.setLocation(30, 50); // right, down
        label15ca.setSize(500, 30); // long, high
      	panel15.add(label15ca);

		JLabel label15b = new JLabel();
       	label15b.setText("ABC iterations (Number of simulations to consider): ");
		label15b.setLocation(30, 90); // right, down
        label15b.setSize(600, 30); // long, high
      	panel15.add(label15b);

		TextABCIterations.setText("200");
		TextABCIterations.setLocation(470, 90); // right, down
        TextABCIterations.setSize(100, 30); // long, high
		panel15.add(TextABCIterations);


		JLabel label15bc = new JLabel();
       	label15bc.setText("ABC tolerance (Number of simulations to retain): ");
		label15bc.setLocation(30, 130); // right, down
        label15bc.setSize(600, 30); // long, high
      	panel15.add(label15bc);

		TextABCTolerance.setText("100");
		TextABCTolerance.setLocation(470, 130); // right, down
        TextABCTolerance.setSize(100, 30); // long, high
		panel15.add(TextABCTolerance);
		

		JLabel label15bd = new JLabel();
       	label15bd.setText("ABC method: ");
		label15bd.setLocation(30, 170); // right, down
        label15bd.setSize(600, 30); // long, high
      	panel15.add(label15bd);

		KindABCmethod_group.add(KindABCmethod_log);		
		KindABCmethod_group.add(KindABCmethod_rej);
		KindABCmethod_log.setLocation(600, 170);
		KindABCmethod_log.setSize(110, 30); // long, high
		KindABCmethod_rej.setLocation(470, 170);
		KindABCmethod_rej.setSize(110, 30); // long, high		
		panel15.add(KindABCmethod_log);
		panel15.add(KindABCmethod_rej);
		KindABCmethod_log.setSelected(true); // default
		ABC_Method = "*ABCMethod=loclinear"; // default

		KindABCmethod_log.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			
			ABC_Method = "*ABCMethod=loclinear";
			System.out.println("ABC method, ABC_Method: " + ABC_Method);

			}
		});
		KindABCmethod_rej.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			
			ABC_Method = "*ABCMethod=rejection";
			System.out.println("ABC method, ABC_Method: " + ABC_Method);

			}
		});
		

		JLabel label15be = new JLabel();
       	label15be.setText("ABC transformation: ");
		label15be.setLocation(30, 210); // right, down
        label15be.setSize(400, 30); // long, high
      	panel15.add(label15be);
		
		KindABCtransformation_group.add(KindABCtransformation_Logit);
		KindABCtransformation_group.add(KindABCtransformation_Log);	
		KindABCtransformation_group.add(KindABCtransformation_None);
		KindABCtransformation_Logit.setLocation(730, 210);
		KindABCtransformation_Logit.setSize(90, 30); // long, high
		KindABCtransformation_Log.setLocation(600, 210);
		KindABCtransformation_Log.setSize(90, 30); // long, high
		KindABCtransformation_None.setLocation(470, 210);
		KindABCtransformation_None.setSize(90, 30); // long, high
		panel15.add(KindABCtransformation_Logit);
		panel15.add(KindABCtransformation_Log);
		panel15.add(KindABCtransformation_None);
		KindABCtransformation_Logit.setSelected(true); // default
		ABC_Transf = "*ABCTransf=logit"; // default

		KindABCtransformation_Logit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			
			ABC_Transf = "*ABCTransf=logit";
			System.out.println("ABC transformation, ABC_Transf: " + ABC_Transf);

			}
		});
		KindABCtransformation_Log.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			
			ABC_Transf = "*ABCTransf=log";
			System.out.println("ABC transformation, ABC_Transf: " + ABC_Transf);

			}
		});
		KindABCtransformation_None.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			
			ABC_Transf = "*ABCTransf=none";
			System.out.println("ABC transformation, ABC_Transf: " + ABC_Transf);

			}
		});


		JLabel label15bf = new JLabel();
       	label15bf.setText("ABC correction (Correct for heteroscedastic variance): ");
		label15bf.setLocation(30, 250); // right, down
        label15bf.setSize(600, 30); // long, high
      	panel15.add(label15bf);

		KindABCcorrection_group.add(KindABCcorrection_Yes);		
		KindABCcorrection_group.add(KindABCcorrection_No);
		KindABCcorrection_Yes.setSelected(true);
		KindABCcorrection_Yes.setLocation(600, 250);
		KindABCcorrection_Yes.setSize(90, 30); // long, high
		KindABCcorrection_No.setLocation(470, 250);
		KindABCcorrection_No.setSize(90, 30); // long, high		
		panel15.add(KindABCcorrection_Yes);
		panel15.add(KindABCcorrection_No);
		KindABCcorrection_No.setSelected(true); // default
		ABC_Corr = "*ABCHCorr=0"; // default

		KindABCcorrection_Yes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			
			ABC_Corr = "*ABCHCorr=1";
			System.out.println("ABC correction, ABC_Corr: " + ABC_Corr);

			}
		});
		KindABCcorrection_No.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			
			ABC_Corr = "*ABCHCorr=0";
			System.out.println("ABC correction, ABC_Corr: " + ABC_Corr);

			}
		});

		
		JLabel label15bx = new JLabel();
       	label15bx.setText("Summary statistics to use in ABC: ");
		label15bx.setLocation(30, 290); // right, down
        label15bx.setSize(600, 30); // long, high
      	panel15.add(label15bx);


		SS_choose1.setLocation(300, 290); // right, down
        SS_choose1.setSize(200, 30); // long, high
		SS_choose1.setSelected(true);
		panel15.add(SS_choose1);

		SS_choose2.setLocation(510, 290); // right, down
        SS_choose2.setSize(200, 30); // long, high
		SS_choose2.setSelected(true);
		panel15.add(SS_choose2);
		
		SS_choose3.setLocation(730, 290); // right, down
        SS_choose3.setSize(200, 30); // long, high
		SS_choose3.setSelected(true);
		panel15.add(SS_choose3);
		
		SS_choose4.setLocation(90, 320); // right, down
        SS_choose4.setSize(200, 30); // long, high
		SS_choose4.setSelected(true);
		panel15.add(SS_choose4);
		
		SS_choose5.setLocation(300, 320); // right, down
        SS_choose5.setSize(200, 30); // long, high
		SS_choose5.setSelected(true);
		panel15.add(SS_choose5);
		
		SS_choose6.setLocation(510, 320); // right, down
        SS_choose6.setSize(200, 30); // long, high
		SS_choose6.setSelected(true);
		panel15.add(SS_choose6);
		
		SS_choose7.setLocation(730, 320); // right, down
        SS_choose7.setSize(200, 30); // long, high
		SS_choose7.setSelected(true);
		panel15.add(SS_choose7);
		
		SS_choose8.setLocation(90, 350); // right, down
        SS_choose8.setSize(200, 30); // long, high
		SS_choose8.setSelected(true);
		panel15.add(SS_choose8);
		
		SS_choose9.setLocation(300, 350); // right, down
        SS_choose9.setSize(200, 30); // long, high
		SS_choose9.setSelected(true);
		panel15.add(SS_choose9);
		
		SS_choose10.setLocation(510, 350); // right, down
        SS_choose10.setSize(200, 30); // long, high
		SS_choose10.setSelected(true);
		panel15.add(SS_choose10);
		
		SS_choose11.setLocation(730, 350); // right, down
        SS_choose11.setSize(200, 30); // long, high
		SS_choose11.setSelected(true);
		panel15.add(SS_choose11);

		SS_choose12.setLocation(90, 380); // right, down
        SS_choose12.setSize(200, 30); // long, high
		SS_choose12.setSelected(true);
		panel15.add(SS_choose12);
		
		SS_choose13.setLocation(300, 380); // right, down
        SS_choose13.setSize(200, 30); // long, high
		SS_choose13.setSelected(true);
		panel15.add(SS_choose13);
		
		SS_choose14.setLocation(510, 380); // right, down
        SS_choose14.setSize(200, 30); // long, high
		SS_choose14.setSelected(true);
		panel15.add(SS_choose14);
		
		SS_choose15.setLocation(730, 380); // right, down
        SS_choose15.setSize(200, 30); // long, high
		SS_choose15.setSelected(true);
		panel15.add(SS_choose15);
		
		SS_choose16.setLocation(90, 410); // right, down
        SS_choose16.setSize(200, 30); // long, high
		SS_choose16.setSelected(true);
		panel15.add(SS_choose16);
		
		/*SS_choose17.setLocation(300, 410); // right, down
        SS_choose17.setSize(200, 30); // long, high
		SS_choose17.setSelected(true);
		panel15.add(SS_choose17);
		
		SS_choose18.setLocation(510, 410); // right, down
        SS_choose18.setSize(200, 30); // long, high
		SS_choose18.setSelected(true);
		panel15.add(SS_choose18);
		
		SS_choose19.setLocation(730, 410); // right, down
        SS_choose19.setSize(200, 30); // long, high
		SS_choose19.setSelected(true);
		panel15.add(SS_choose19);
		
		SS_choose20.setLocation(90, 440); // right, down
        SS_choose20.setSize(200, 30); // long, high
		SS_choose20.setSelected(true);
		panel15.add(SS_choose20);
		
		SS_choose21.setLocation(300, 440); // right, down
        SS_choose21.setSize(200, 30); // long, high
		SS_choose21.setSelected(true);
		panel15.add(SS_choose21);

		SS_choose22.setLocation(510, 440); // right, down
        SS_choose22.setSize(200, 30); // long, high
		SS_choose22.setSelected(true);
		panel15.add(SS_choose22);
		
		SS_choose23.setLocation(730, 440); // right, down
        SS_choose23.setSize(200, 30); // long, high
		SS_choose23.setSelected(true);
		panel15.add(SS_choose23);
		
		SS_choose24.setLocation(90, 470); // right, down
        SS_choose24.setSize(200, 30); // long, high
		SS_choose24.setSelected(true);
		panel15.add(SS_choose24);
		
		SS_choose25.setLocation(300, 470); // right, down
        SS_choose25.setSize(200, 30); // long, high
		SS_choose25.setSelected(true);
		panel15.add(SS_choose25);
		
		SS_choose26.setLocation(510, 470); // right, down
        SS_choose26.setSize(200, 30); // long, high
		SS_choose26.setSelected(true);
		panel15.add(SS_choose26);*/

		//TextABCSummaryStatistics.setText(" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22");
		//TextABCSummaryStatistics.setLocation(350, 590); // right, down
        //TextABCSummaryStatistics.setSize(460, 30); // long, high
		//panel15.add(TextABCSummaryStatistics);

		SS_choose1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose1 = SS_choose1.isSelected();
			if (selectedSS_choose1) 
				{
				SS1 = " 1";
          		System.out.println("SS1 selected");
        		} 
			else 
				{
				SS1 = "";
          		System.out.println("SS1 deselected");
        		}			
			}
		});

		SS_choose2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose2 = SS_choose2.isSelected();
			if (selectedSS_choose2) 
				{
				SS2 = " 2";
          		System.out.println("SS2 selected");
        		} 
			else 
				{
				SS2 = "";
          		System.out.println("SS2 deselected");
        		}			
			}
		});
		
		SS_choose3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose3 = SS_choose3.isSelected();
			if (selectedSS_choose3) 
				{
				SS3 = " 3";
          		System.out.println("SS3 selected");
        		} 
			else 
				{
				SS3 = "";
          		System.out.println("SS3 deselected");
        		}			
			}
		});
		
		SS_choose4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose4 = SS_choose4.isSelected();
			if (selectedSS_choose4) 
				{
				SS4 = " 4";
          		System.out.println("SS4 selected");
        		} 
			else 
				{
				SS4 = "";
          		System.out.println("SS4 deselected");
        		}			
			}
		});
		
		SS_choose5.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose5 = SS_choose5.isSelected();
			if (selectedSS_choose5) 
				{
				SS5 = " 5";
          		System.out.println("SS5 selected");
        		} 
			else 
				{
				SS5 = "";
          		System.out.println("SS5 deselected");
        		}			
			}
		});
		
		SS_choose6.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose6 = SS_choose6.isSelected();
			if (selectedSS_choose6) 
				{
				SS6 = " 6";
          		System.out.println("SS6 selected");
        		} 
			else 
				{
				SS6 = "";
          		System.out.println("SS6 deselected");
        		}			
			}
		});
		
		SS_choose7.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose7 = SS_choose7.isSelected();
			if (selectedSS_choose7) 
				{
				SS7 = " 7";
          		System.out.println("SS7 selected");
        		} 
			else 
				{
				SS7 = "";
          		System.out.println("SS7 deselected");
        		}			
			}
		});
		
		SS_choose8.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose8 = SS_choose8.isSelected();
			if (selectedSS_choose8) 
				{
				SS8 = " 8";
          		System.out.println("SS8 selected");
        		} 
			else 
				{
				SS8 = "";
          		System.out.println("SS8 deselected");
        		}			
			}
		});
		
		SS_choose9.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose9 = SS_choose9.isSelected();
			if (selectedSS_choose9) 
				{
				SS9 = " 9";
          		System.out.println("SS9 selected");
        		} 
			else 
				{
				SS9 = "";
          		System.out.println("SS9 deselected");
        		}			
			}
		});
		
		SS_choose10.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose10 = SS_choose10.isSelected();
			if (selectedSS_choose10) 
				{
				SS10 = " 10";
          		System.out.println("SS10 selected");
        		} 
			else 
				{
				SS10 = "";
          		System.out.println("SS10 deselected");
        		}			
			}
		});
		
		SS_choose11.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose11 = SS_choose11.isSelected();
			if (selectedSS_choose11) 
				{
				SS11 = " 11";
          		System.out.println("SS11 selected");
        		} 
			else 
				{
				SS11 = "";
          		System.out.println("SS11 deselected");
        		}			
			}
		});
		
		SS_choose12.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose12 = SS_choose12.isSelected();
			if (selectedSS_choose12) 
				{
				SS12 = " 12";
          		System.out.println("SS12 selected");
        		} 
			else 
				{
				SS12 = "";
          		System.out.println("SS12 deselected");
        		}			
			}
		});
		
		SS_choose13.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose13 = SS_choose13.isSelected();
			if (selectedSS_choose13) 
				{
				SS13 = " 13";
          		System.out.println("SS13 selected");
        		} 
			else 
				{
				SS13 = "";
          		System.out.println("SS13 deselected");
        		}			
			}
		});
		
		SS_choose14.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose14 = SS_choose14.isSelected();
			if (selectedSS_choose14) 
				{
				SS14 = " 14";
          		System.out.println("SS14 selected");
        		} 
			else 
				{
				SS14 = "";
          		System.out.println("SS14 deselected");
        		}			
			}
		});
		
		SS_choose15.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose15 = SS_choose15.isSelected();
			if (selectedSS_choose15) 
				{
				SS15 = " 15";
          		System.out.println("SS15 selected");
        		} 
			else 
				{
				SS15 = "";
          		System.out.println("SS15 deselected");
        		}			
			}
		});
		
		SS_choose16.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose16 = SS_choose16.isSelected();
			if (selectedSS_choose16) 
				{
				SS16 = " 16";
          		System.out.println("SS16 selected");
        		} 
			else 
				{
				SS16 = "";
          		System.out.println("SS16 deselected");
        		}			
			}
		});
		
		/*SS_choose17.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose17 = SS_choose17.isSelected();
			if (selectedSS_choose17) 
				{
				SS17 = " 17";
          		System.out.println("SS17 selected");
        		} 
			else 
				{
				SS17 = "";
          		System.out.println("SS17 deselected");
        		}			
			}
		});
		
		SS_choose18.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose18 = SS_choose18.isSelected();
			if (selectedSS_choose18) 
				{
				SS18 = " 18";
          		System.out.println("SS18 selected");
        		} 
			else 
				{
				SS18 = "";
          		System.out.println("SS18 deselected");
        		}			
			}
		});
		
		SS_choose19.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose19 = SS_choose19.isSelected();
			if (selectedSS_choose19) 
				{
				SS19 = " 19";
          		System.out.println("SS19 selected");
        		} 
			else 
				{
				SS19 = "";
          		System.out.println("SS19 deselected");
        		}			
			}
		});
		
		SS_choose20.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose20 = SS_choose20.isSelected();
			if (selectedSS_choose20) 
				{
				SS20 = " 20";
          		System.out.println("SS20 selected");
        		} 
			else 
				{
				SS20 = "";
          		System.out.println("SS20 deselected");
        		}			
			}
		});
		
		SS_choose21.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose21 = SS_choose21.isSelected();
			if (selectedSS_choose21) 
				{
				SS21 = " 21";
          		System.out.println("SS21 selected");
        		} 
			else 
				{
				SS21 = "";
          		System.out.println("SS21 deselected");
        		}			
			}
		});
		
		SS_choose22.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose22 = SS_choose22.isSelected();
			if (selectedSS_choose22) 
				{
				SS22 = " 22";
          		System.out.println("SS22 selected");
        		} 
			else 
				{
				SS22 = "";
          		System.out.println("SS22 deselected");
        		}			
			}
		});
		
		SS_choose23.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose23 = SS_choose23.isSelected();
			if (selectedSS_choose23) 
				{
				SS23 = " 23";
          		System.out.println("SS23 selected");
        		} 
			else 
				{
				SS23 = "";
          		System.out.println("SS23 deselected");
        		}			
			}
		});
		
		SS_choose24.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose24 = SS_choose24.isSelected();
			if (selectedSS_choose24) 
				{
				SS24 = " 24";
          		System.out.println("SS24 selected");
        		} 
			else 
				{
				SS24 = "";
          		System.out.println("SS24 deselected");
        		}			
			}
		});
		
		SS_choose25.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose25 = SS_choose25.isSelected();
			if (selectedSS_choose25) 
				{
				SS25 = " 25";
          		System.out.println("SS25 selected");
        		} 
			else 
				{
				SS25 = "";
          		System.out.println("SS25 deselected");
        		}			
			}
		});
		
		SS_choose26.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			selectedSS_choose26 = SS_choose26.isSelected();
			if (selectedSS_choose26) 
				{
				SS26 = " 26";
          		System.out.println("SS26 selected");
        		} 
			else 
				{
				SS26 = "";
          		System.out.println("SS26 deselected");
        		}			
			}
		});*/

            
		JLabel label15by = new JLabel();
       	label15by.setText("Outputs. PDF documents with multiple pages?: ");
		label15by.setLocation(30, 450); // right, down
        label15by.setSize(600, 30); // long, high
      	panel15.add(label15by);

		KindABCpages_group.add(KindABCpages_Yes);		
		KindABCpages_group.add(KindABCpages_No);
		KindABCpages_Yes.setSelected(true);
		KindABCpages_Yes.setLocation(600, 450);
		KindABCpages_Yes.setSize(90, 30); // long, high
		KindABCpages_No.setLocation(470, 450);
		KindABCpages_No.setSize(90, 30); // long, high		
		panel15.add(KindABCpages_Yes);
		panel15.add(KindABCpages_No);
		KindABCpages_Yes.setSelected(true); // default
		ABC_MultiPage = "*MultiPage=1"; // default

		KindABCpages_Yes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			
			ABC_MultiPage = "*MultiPage=1";
			System.out.println("PDF documents with multiple pages, ABC_MultiPage: " + ABC_MultiPage);

			}
		});
		KindABCpages_No.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			
			ABC_MultiPage = "*MultiPage=0";
			System.out.println("PDF documents with multiple pages, ABC_MultiPage: " + ABC_MultiPage);

			}
		});
				
		
		//This creates a new button 
		JButton ButtonNext15 = new JButton("Save and next");
		ButtonNext15.setLocation(800, 620); // right, down
        ButtonNext15.setSize(170, 70); // long, high
        ButtonNext15.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run15Handler = new runButton15Handler();
		ButtonNext15.addActionListener(run15Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel15.add(ButtonNext15);
		}

////////////////////////////////
	
/*	public void createPage16()
		{
		panel16.setLayout( new GridLayout( 3, 2 ) );
		panel16.setPreferredSize(new Dimension(1100,800));
		
		panel16.add( new JLabel( "Field 1:" ) );
		panel16.add( new TextArea() );
		panel16.add( new JLabel( "Field 2:" ) );
		panel16.add( new TextArea() );
		panel16.add( new JLabel( "Field 3:" ) );
		panel16.add( new TextArea() );
		}
	
	public void createPage17()
		{
		panel17.setLayout( new GridLayout( 3, 2 ) );
		panel17.setPreferredSize(new Dimension(1100,800));

		panel17.add( new JLabel( "Field 1:" ) );
		panel17.add( new TextArea() );
		panel17.add( new JLabel( "Field 2:" ) );
		panel17.add( new TextArea() );
		panel17.add( new JLabel( "Field 3:" ) );
		panel17.add( new TextArea() );
		}
	
	public void createPage18()
		{
		panel18.setLayout( new GridLayout( 3, 2 ) );
		panel18.setPreferredSize(new Dimension(1100,800));

		panel18.add( new JLabel( "Field 1:" ) );
		panel18.add( new TextArea() );
		panel18.add( new JLabel( "Field 2:" ) );
		panel18.add( new TextArea() );
		panel18.add( new JLabel( "Field 3:" ) );
		panel18.add( new TextArea() );
		}

	public void createPage19()
		{
		panel19.setLayout( new GridLayout( 3, 2 ) );
		panel19.setPreferredSize(new Dimension(1100,800));

		panel19.add( new JLabel( "Field 1:" ) );
		panel19.add( new TextArea() );
		panel19.add( new JLabel( "Field 2:" ) );
		panel19.add( new TextArea() );
		panel19.add( new JLabel( "Field 3:" ) );
		panel19.add( new TextArea() );
		}*/
	//////////////////////////////////////////////////////
	
	/* TAB 20: Outputs and Others */
	public void createPage20()
		{
		panel20.setLayout( null );
		panel20.setPreferredSize(new Dimension(1100,800));

		JLabel label20a = new JLabel();
       	label20a.setText("Outputs and other Options");
		label20a.setFont(new Font("Arial", Font.BOLD, 14));
		label20a.setLocation(30, 15); // right, down
        label20a.setSize(800, 30); // long, high
      	panel20.add(label20a);

		JLabel label20a1 = new JLabel();
       	label20a1.setText("All these settings are optional (not required)");
		label20a1.setFont(new Font("Arial", Font.PLAIN | Font.BOLD, 14));
		label20a1.setLocation(30, 40); // right, down
        label20a1.setSize(800, 30); // long, high
      	panel20.add(label20a1);
		
		
		//This creates a new button 
    /*   	JButton ButtonNext20 = new JButton("Save and next");
		ButtonNext20.setLocation(800, 620); // right, down
        ButtonNext20.setSize(170, 70); // long, high
        ButtonNext20.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run20Handler = new runButton20Handler();
		ButtonNext20.addActionListener(run20Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel20.add(ButtonNext20); */
		}


	
	/* TAB 21: Evolutionary History */
	public void createPage21()
		{
		panel21.setLayout( null );
		panel21.setPreferredSize(new Dimension(1100,800));


		JLabel label21a = new JLabel();
       	label21a.setText("Evolutionary history: ");
		label21a.setFont(new Font("Arial", Font.BOLD, 14));
		label21a.setLocation(30, 15); // right, down
        label21a.setSize(300, 30); // long, high
      	panel21.add(label21a);

		/* user-specified tree file */
		JLabel label21ab = new JLabel();
       	label21ab.setText("User-specified tree (Newick format)");
		label21ab.setLocation(30, 60); // right, down
        label21ab.setSize(360, 30); // long, high
      	panel21.add(label21ab);

	//	TextUserTreefileINDELible.setLocation(30, 100); // right, down
     // TextUserTreefileINDELible.setSize(900, 30); // long, high
	//	panel21.add(TextUserTreefileINDELible);
	//	TextUserTreefileINDELible.setText("(species1:0.4,species2:0.3,(species3:0.5,species4:0.1):0.09);");
		

		//This creates a new button
	/*	JButton ButtonNext21 = new JButton("Save and next");
		ButtonNext21.setLocation(800, 620); // right, down
        ButtonNext21.setSize(170, 70); // long, high
        ButtonNext21.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on
		run21Handler = new runButton21Handler();
		ButtonNext21.addActionListener(run21Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel21.add(ButtonNext21);	*/
		}


	
	/* TAB 22: Regions */
	public void createPage22()
		{
		panel22.setLayout( null );
		panel22.setPreferredSize(new Dimension(1100,800));
		

		JLabel label22a = new JLabel();
       	label22a.setText("General settings ");
		label22a.setFont(new Font("Arial", Font.BOLD, 14));
		label22a.setLocation(30, 15); // right, down
        label22a.setSize(400, 30); // long, high
      	panel22.add(label22a);


	/*	//This creates a new button 
		JButton ButtonNext22 = new JButton("Save and next");
		ButtonNext22.setLocation(800, 620); // right, down
        ButtonNext22.setSize(170, 70); // long, high
        ButtonNext22.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run22Handler = new runButton22Handler();
		ButtonNext22.addActionListener(run22Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel22.add(ButtonNext22);	*/
		}


	
	/* TAB 23: Nucleotide Regions */
	public void createPage23()
		{
		panel23.setLayout( null );
		panel23.setPreferredSize(new Dimension(1100,800));
		

		JLabel label23a = new JLabel();
       	label23a.setText("Settings");
		label23a.setFont(new Font("Arial", Font.BOLD, 14));
		label23a.setLocation(30, 15); // right, down
        label23a.setSize(400, 30); // long, high
      	panel23.add(label23a);

		//This creates a new button 
	/*	JButton ButtonNext23 = new JButton("Save and next");
		ButtonNext23.setLocation(800, 620); // right, down
        ButtonNext23.setSize(170, 70); // long, high
        ButtonNext23.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run23Handler = new runButton23Handler();
		ButtonNext23.addActionListener(run23Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel23.add(ButtonNext23);	*/
		}




	public void createPage24()
		{
		panel24.setLayout( null );
		panel24.setPreferredSize(new Dimension(1100,800));
		}
	
	public void createPage25()
		{
		panel25.setLayout( null );
		panel25.setPreferredSize(new Dimension(1100,800));
		}
		
	public void createPage26()
		{
		panel26.setLayout( null );
		panel26.setPreferredSize(new Dimension(1100,800));
		}
		
/*	public void createPage27()
		{
		panel27.setLayout( null );
		panel27.setPreferredSize(new Dimension(1100,800));
		}
		
	public void createPage28()
		{
		panel28.setLayout( null );
		panel28.setPreferredSize(new Dimension(1100,800));
		}
		
	public void createPage29()
		{
		panel29.setLayout( null );
		panel29.setPreferredSize(new Dimension(1100,800));
		}
*/		
	public void createPage30()
		{
		panel30.setLayout( null );
		panel30.setPreferredSize(new Dimension(1100,800));
		}
		
/*	public void createPage31()
		{
		panel31.setLayout( null );
		panel31.setPreferredSize(new Dimension(1100,800));
		}
*/	
	public void createPage32()
		{
		panel32.setLayout( null );
		panel32.setPreferredSize(new Dimension(1100,800));
		}
		
	public void createPage33()
		{
		panel33.setLayout( null );
		panel33.setPreferredSize(new Dimension(1100,800));
		}

/* TAB 34: Outputs and Others */
	public void createPage34()
		{
		panel34.setLayout( null );
		panel34.setPreferredSize(new Dimension(1100,800));

		JLabel label3a = new JLabel();
       	label3a.setText("Outputs and other Options");
		label3a.setFont(new Font("Arial", Font.BOLD, 14));
		label3a.setLocation(30, 15); // right, down
        label3a.setSize(800, 30); // long, high
      	panel3.add(label3a);

		JLabel label3a1 = new JLabel();
       	label3a1.setText("All these settings are optional (not required)");
		label3a1.setFont(new Font("Arial", Font.PLAIN | Font.BOLD, 14));
		label3a1.setLocation(30, 40); // right, down
        label3a1.setSize(800, 30); // long, high
      	panel3.add(label3a1);
		
		//This creates a new button 
       	JButton ButtonNext34 = new JButton("Save and next");
		ButtonNext34.setLocation(800, 620); // right, down
        ButtonNext34.setSize(170, 70); // long, high
        ButtonNext34.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run34Handler = new runButton34Handler();
		ButtonNext34.addActionListener(run34Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel34.add(ButtonNext34);
		}


	// TAB 35: Write input file and exit
	public void createPage35()
		{
		panel35.setLayout( null );
		panel35.setPreferredSize(new Dimension(1100,800));


		JLabel label35a = new JLabel();
       	label35a.setText("Write input file for ProteinEvolverABC!");
		label35a.setFont(new Font("Arial", Font.BOLD, 14));
		label35a.setLocation(30, 15); // right, down
        label35a.setSize(800, 30); // long, high
      	panel35.add(label35a);

		JLabel label35b = new JLabel();
       	label35b.setText("Generate the file \"Settings.txt\" that will be placed in the directory of the sequence MSA file");
		label35b.setLocation(50, 50); // right, down
        label35b.setSize(900, 30); // long, high
      	panel35.add(label35b);

		//This creates a new button 
		JButton ButtonNext35 = new JButton("Generate \"Settings.txt\" file");
		ButtonNext35.setLocation(200, 90); // right, down
        ButtonNext35.setSize(370, 70); // long, high
        ButtonNext35.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run35Handler = new runButton35Handler();
		ButtonNext35.addActionListener(run35Handler);
        setVisible(true); //otherwise you won't "see" it 
       	panel35.add(ButtonNext35);



		JLabel label35xz = new JLabel();
	    label35xz.setText("Optionally, a shell script \"RunFull_ProteinEvolverABC.sh\" can be generated to run ProteinEvolverABC in a single step: ./RunFull_ProteinEvolverABC.sh");
		label35xz.setLocation(50, 200); // right, down
     	label35xz.setSize(900, 30); // long, high
      	panel35.add(label35xz);

		//This creates a new button 
		JButton ButtonNext35b = new JButton("Generate \"RunFull_ProteinEvolverABC.sh\" script");
		ButtonNext35b.setLocation(200, 230); // right, down
        ButtonNext35b.setSize(370, 70); // long, high
        ButtonNext35b.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on 
		run35bHandler = new runButton35bHandler();
		ButtonNext35b.addActionListener(run35bHandler);
        setVisible(true); //otherwise you won't "see" it 
       	panel35.add(ButtonNext35b);
		

		ImageIcon myIcon = new ImageIcon("LogoProteinEvolverABC.gif"); // needs path of the icon
		JLabel labelimage2 = new JLabel(myIcon);
		labelimage2.setLocation(520, 310); // right, down
        labelimage2.setSize(430, 250); // long, high
      	panel35.add( labelimage2 );


		JLabel label35g2 = new JLabel();
       	label35g2.setText("ProteinEvolverABC_GUI, by Miguel Arenas");
		label35g2.setFont(new Font("Arial", Font.BOLD, 13));
		label35g2.setLocation(100, 375); // right, down
        label35g2.setSize(1200, 30); // long, high
      	panel35.add( label35g2 );

		JLabel label3h = new JLabel();
       	label3h.setText("Copyright (c) 2020. All rights reserved. ");
		label3h.setFont(new Font("Arial", Font.BOLD, 13));
		label3h.setLocation(100, 400); // right, down
        label3h.setSize(1200, 30); // long, high
      	panel35.add( label3h );


       	
       	//This creates a new button
       	JButton EXITButton2 = new JButton("Exit ProteinEvolverABC_GUI");
		EXITButton2.setFont(new Font("Arial", Font.PLAIN, 15));
    	EXITButton2.setLocation(800, 620); // right, down
        EXITButton2.setSize(240, 90); // long, high
		ebHandler = new ExitButtonHandler();
		EXITButton2.addActionListener(ebHandler);
		panel35.add(EXITButton2, BorderLayout.WEST);
            
        //This creates a new button
        JButton ButtonNext35d = new JButton("Save and next");
        /*ButtonNext35d.setLocation(800, 620); // right, down
        ButtonNext35d.setSize(240, 90); // long, high
        ButtonNext35d.setFont(new Font("Arial", Font.BOLD, 14));
        //This is an Action Listener which reacts to clicking on
        run35dHandler = new runButton35dHandler();
        ButtonNext35d.addActionListener(run35dHandler);
        setVisible(true); //otherwise you won't "see" it
        panel35.add(ButtonNext35d);*/
		}

        
        // TAB 40: Run Phase 1
        public void createPage40()
        {
            panel40.setLayout( null );
            panel40.setPreferredSize(new Dimension(1100,800));
            
            
            JLabel label40a = new JLabel();
            label40a.setText("Run ProteinEvolverABC (Phase 1)");
            label40a.setFont(new Font("Arial", Font.BOLD, 14));
            label40a.setLocation(30, 15); // right, down
            label40a.setSize(800, 30); // long, high
            panel40.add(label40a);
            
            JLabel label40b = new JLabel();
            label40b.setText("Running, perl ProteinEvolverABC_Phase1.pl Settings.txt");
            label40b.setLocation(50, 50); // right, down
            label40b.setSize(900, 30); // long, high
            panel40.add(label40b);
            
            //This creates a new button
            JButton ButtonNext40 = new JButton("Run Phase 1");
            ButtonNext40.setLocation(50, 90); // right, down
            ButtonNext40.setSize(370, 70); // long, high
            ButtonNext40.setFont(new Font("Arial", Font.BOLD, 14));
            //This is an Action Listener which reacts to clicking on
            run40Handler = new runButton40Handler();
            ButtonNext40.addActionListener(run40Handler);
            setVisible(true); //otherwise you won't "see" it
            panel40.add(ButtonNext40);
            
            
            //JTextArea textAreaOut_1 = new JTextArea(50,200);
            textAreaOut_1=new JTextArea();
            //textAreaOut_1.setEditable(false);
            //textAreaOut_1.setVisible(true);
            //scrolltextAreaOut_1.setVisible(true);
            //textAreaOut_1.setText("RUNNING OUT");
            //textAreaOut_1.setBounds(5,5,100,200);
            textAreaOut_1.setBounds(50,200,700,450); // setBounds(int x-coordinate, int y-coordinate, int width, int height)

            //textAreaOut_1.setLocation(50, 200); // right, down
            //textAreaOut_1.setSize(900, 460); // long, high
            Color c = new Color(192,192,192);
            textAreaOut_1.setBackground(c);
            
            scrolltextAreaOut_1=new JScrollPane(textAreaOut_1);
            //scrolltextAreaOut_1.setBounds(3,3,400,400);
            scrolltextAreaOut_1.setBounds(48,198,900,490);

            //panel40.add(new JScrollPane(textAreaOut_1));
            //panel40.add(textAreaOut_1);
            panel40.add(scrolltextAreaOut_1);
            
            
            textAreaOut_1.getDocument().addDocumentListener(new DocumentListener() {
                
                @Override
                public void insertUpdate(DocumentEvent e) {
                    updateLineCount();
                }
                
                @Override
                public void removeUpdate(DocumentEvent e) {
                    updateLineCount();
                }
                
                @Override
                public void changedUpdate(DocumentEvent e) {
                    updateLineCount();
                }
                
                private void updateLineCount() {
                    int lineCount = textAreaOut_1.getLineCount();
                    if (lineCount <= 4) {
                        textAreaOut_1.setRows(lineCount);
                        panel40.revalidate();
                    }
                }
            });
            
            
            /*JLabel label40xz = new JLabel();
            label40xz.setText("Empty");
            label40xz.setLocation(50, 200); // right, down
            label40xz.setSize(900, 30); // long, high
            panel40.add(label40xz);
            
            //This creates a new button
            JButton ButtonNext40b = new JButton("Empty");
            ButtonNext40b.setLocation(200, 230); // right, down
            ButtonNext40b.setSize(370, 70); // long, high
            ButtonNext40b.setFont(new Font("Arial", Font.BOLD, 14));
            //This is an Action Listener which reacts to clicking on
            run40bHandler = new runButton40bHandler();
            ButtonNext40b.addActionListener(run40bHandler);
            setVisible(true); //otherwise you won't "see" it
            panel40.add(ButtonNext40b);
            
            
            ImageIcon myIcon = new ImageIcon("ProteinEvolverABC_GUI.gif"); // needs path of the icon
            JLabel labelimage2 = new JLabel(myIcon);
            labelimage2.setLocation(520, 310); // right, down
            labelimage2.setSize(430, 250); // long, high
            panel40.add( labelimage2 );
            
            
            JLabel label40g2 = new JLabel();
            label40g2.setText("ProteinEvolverABC_GUI, by Miguel Arenas");
            label40g2.setFont(new Font("Arial", Font.BOLD, 13));
            label40g2.setLocation(100, 375); // right, down
            label40g2.setSize(1200, 30); // long, high
            panel40.add( label40g2 );
            
            JLabel label3hi = new JLabel();
            label3hi.setText("Copyright (c) 2020. All rights reserved. ");
            label3hi.setFont(new Font("Arial", Font.BOLD, 13));
            label3hi.setLocation(100, 400); // right, down
            label3hi.setSize(1200, 30); // long, high
            panel40.add( label3hi );*/
            
            //This creates a new button
            JButton ButtonNext40d = new JButton("Save and next");
            ButtonNext40d.setLocation(500, 90); // right, down
            ButtonNext40d.setSize(370, 70); // long, high
            ButtonNext40d.setFont(new Font("Arial", Font.BOLD, 14));
            //This is an Action Listener which reacts to clicking on
            run40dHandler = new runButton40dHandler();
            ButtonNext40d.addActionListener(run40dHandler);
            setVisible(true); //otherwise you won't "see" it
            panel40.add(ButtonNext40d);
             
             
            /*
            //This creates a new button
            JButton EXITButton3 = new JButton("Exit ProteinEvolverABC_GUI");
            EXITButton3.setFont(new Font("Arial", Font.PLAIN, 15));
            EXITButton3.setLocation(780, 580); // right, down
            EXITButton3.setSize(190, 90); // long, high
            ebHandler = new ExitButtonHandler();
            EXITButton3.addActionListener(ebHandler);
            panel40.add(EXITButton3, BorderLayout.WEST);*/
        }



        // TAB 41: Run Phase 2
        public void createPage41()
        {
            panel41.setLayout( null );
            panel41.setPreferredSize(new Dimension(1100,800));
            
            
            JLabel label41a = new JLabel();
            label41a.setText("Run ProteinEvolverABC (Phase 2)");
            label41a.setFont(new Font("Arial", Font.BOLD, 14));
            label41a.setLocation(30, 15); // right, down
            label41a.setSize(800, 30); // long, high
            panel41.add(label41a);
            
            JLabel label41b = new JLabel();
            label41b.setText("Running, perl ProteinEvolverABC_Phase2.pl Settings.txt");
            label41b.setLocation(50, 50); // right, down
            label41b.setSize(900, 30); // long, high
            panel41.add(label41b);
            
            //This creates a new button
            JButton ButtonNext41 = new JButton("Run Phase 2");
            ButtonNext41.setLocation(50, 90); // right, down
            ButtonNext41.setSize(370, 70); // long, high
            ButtonNext41.setFont(new Font("Arial", Font.BOLD, 14));
            //This is an Action Listener which reacts to clicking on
            run41Handler = new runButton41Handler();
            ButtonNext41.addActionListener(run41Handler);
            setVisible(true); //otherwise you won't "see" it
            panel41.add(ButtonNext41);
            
            textAreaOut_2=new JTextArea();
            textAreaOut_2.setBounds(50,200,700,450); // setBounds(int x-coordinate, int y-coordinate, int width, int height)
            Color c = new Color(192,192,192);
            textAreaOut_2.setBackground(c);
            scrolltextAreaOut_2=new JScrollPane(textAreaOut_2);
            scrolltextAreaOut_2.setBounds(48,198,900,490);
            panel41.add(scrolltextAreaOut_2);
            
            
            textAreaOut_2.getDocument().addDocumentListener(new DocumentListener() {
                
                @Override
                public void insertUpdate(DocumentEvent e) {
                    updateLineCount();
                }
                
                @Override
                public void removeUpdate(DocumentEvent e) {
                    updateLineCount();
                }
                
                @Override
                public void changedUpdate(DocumentEvent e) {
                    updateLineCount();
                }
                
                private void updateLineCount() {
                    int lineCount = textAreaOut_2.getLineCount();
                    if (lineCount <= 4) {
                        textAreaOut_2.setRows(lineCount);
                        panel41.revalidate();
                    }
                }
            });
            
            //This creates a new button
            JButton ButtonNext41d = new JButton("Save and next");
            ButtonNext41d.setLocation(500, 90); // right, down
            ButtonNext41d.setSize(370, 70); // long, high
            ButtonNext41d.setFont(new Font("Arial", Font.BOLD, 14));
            //This is an Action Listener which reacts to clicking on
            run41dHandler = new runButton41dHandler();
            ButtonNext41d.addActionListener(run41dHandler);
            setVisible(true); //otherwise you won't "see" it
            panel41.add(ButtonNext41d);
        }
        
        
        // TAB 42: Run Phase 3
        public void createPage42()
        {
            panel42.setLayout( null );
            panel42.setPreferredSize(new Dimension(1100,800));
            
            
            JLabel label42a = new JLabel();
            label42a.setText("Run ProteinEvolverABC (Phase 3)");
            label42a.setFont(new Font("Arial", Font.BOLD, 14));
            label42a.setLocation(30, 15); // right, down
            label42a.setSize(800, 30); // long, high
            panel42.add(label42a);
            
        }

        
        
        
        


	/******************************************************************************************/
	/* TAB ACTIONS */ // This is the internal class that defines what the above Action Listener
	/******************************************************************************************/

	// EXIT button
	public class ExitButtonHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			JOptionPane.showMessageDialog(null, "Thanks for using ProteinEvolverABC (GUI)", "Bye!", JOptionPane. INFORMATION_MESSAGE);
			System.exit(0);
			}
		}

    // RunButton1 - Purpose
    class runButtonHandler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			tabbedPane.remove(scroll01);
			tabbedPane.remove(scroll2);
			tabbedPane.remove(scroll3);
			tabbedPane.remove(scroll4);
			tabbedPane.remove(scroll5);
			tabbedPane.remove(scroll6);
			tabbedPane.remove(scroll7);
			tabbedPane.remove(scroll8);
			tabbedPane.remove(scroll9);
			tabbedPane.remove(scroll10);
			tabbedPane.remove(scroll11);
			tabbedPane.remove(scroll12);
			tabbedPane.remove(scroll13);
			tabbedPane.remove(scroll14);
			tabbedPane.remove(scroll15);
			tabbedPane.remove(scroll16);
			tabbedPane.remove(scroll17);
			tabbedPane.remove(scroll18);
			tabbedPane.remove(scroll19);
			tabbedPane.remove(scroll20);
			tabbedPane.remove(scroll21);
			tabbedPane.remove(scroll22);
			tabbedPane.remove(scroll23);
			tabbedPane.remove(scroll24);
			tabbedPane.remove(scroll25);
			tabbedPane.remove(scroll26);
			tabbedPane.remove(scroll27);
			tabbedPane.remove(scroll28);
			tabbedPane.remove(scroll29);
			tabbedPane.remove(scroll30);
			tabbedPane.remove(scroll31);
			tabbedPane.remove(scroll32);
			tabbedPane.remove(scroll33);
			tabbedPane.remove(scroll34);
			tabbedPane.remove(scroll35);
            tabbedPane.remove(scroll40);
            tabbedPane.remove(scroll41);
            tabbedPane.remove(scroll42);


			// default
			TargetFile = "*NameOfPhylipFile=";
			address = "";
			fileName = "";
			SampleSize = 0;
			SequenceLengthNt = 0;
			ProteinEvolverABC_NumberReplicates = "*NumberOfSimulations=";
			NumberReplicates = 0;
			ProteinEvolverABC_NumberProcessors = "NumberOfProcessors=";
			SaveSimulations = "*SaveSimulations=";
            ShowInformationScreen = "*ShowInformationScreen=";
            Indels = "*Indels=";

			ProteinEvolverABC_PopSize = "*PopulationSize=";
			PopSize_MAX = -1;
			ProteinEvolverABC_HapDip = "*Haploid/Diploid=";
			ProteinEvolverABC_DatedTips = "#DatedTips=4 1995 1 10 2003 11 16 1997 17 26 2001 27 29";
			ProteinEvolverABC_GenerationTime = "#GenerationTime=fix 1200";
			ProteinEvolverABC_IslandModel = "#MigrationModel=1 4 12 10 3 4";
			ProteinEvolverABC_SteppStoneModel = "#MigrationModel=2 4 12 10 3 4";
			ProteinEvolverABC_ContIslandModel = "#MigrationModel=3 4 12 10 3 4";
			ProteinEvolverABC_ConvDemes = "#Species/populationsTree=3 1 2 300 3 4 600 5 6 700";
			ProteinEvolverABC_MigrationRate = "#MigrationRate=1 0.005";
			ProteinEvolverABC_GrowthRate = "#GrowthRate=fix 2.3e-03";
			ProteinEvolverABC_DemogPeriods = "#DemographicPeriods=1 1 10 100 500";
			ProteinEvolverABC_DemogPeriodsStructPop_CTE = "#DemographicsSpeciesTree_ConstantPops=2 7 1000 500 900 800 1300 1000 700";
			ProteinEvolverABC_DemogPeriodsStructPop_VARY = "#DemographicsSpeciesTree_VariablePops=3 7 1000 1200 500 600 900 1000 100 200 800 900 2000 1900 900";
			NoDemographics = 0;
			CoalHomogRecRate = "*RecombinationRate=";
			Rho_MIN = 0;
			Rho_MAX = 0;
			Rho.setText("");

			CoalSubsRate = "*SubstitutionRate=";
			Theta_MIN = 0;
			Theta_MAX = 0;
			Theta.setText("");
			ProteinSubstitutionModel_Str = "*SubstitutionModel=";
			ProteinEvolverABCNormalAAFreqs = "#AminoacidFrequencies=fix 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05";
			ProteinEvolverABC_AA_Gamongsites = "#RateHetSites=uniform 0.76 0.90";
			ProteinEvolverABC_AA_I = "#PropInvSites=uniform 0.3 0.5";

			ABC_Iterations = "*ABCIterations=";
	 		ABC_Tolerance = "*ABCTolerance=";
			ABC_Method = "*ABCMethod=";
			ABC_Transf = "*ABCTransf=";
			ABC_Corr = "*ABCHCorr=";
			ABC_SummaryStatistics = "*SummaryStatistics=";
			ABC_MultiPage = "*MultiPage=";
			
			createPage01();
			tabbedPane.addTab( "Information", scroll01);
			scroll01.setVisible(true);
        	//JOptionPane.showMessageDialog(null, "Going to \"Information\"", " ", JOptionPane. INFORMATION_MESSAGE);
			tabbedPane.setSelectedComponent(scroll01); //go to that tab
			//scroll1.setVisible(false);
			//tabbedPane.remove(scroll1);
           	}
    	}

	
	// RunButton01 - Information
    class runButton01Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			tabbedPane.remove(scroll2);
			tabbedPane.remove(scroll3);
			tabbedPane.remove(scroll4);
			tabbedPane.remove(scroll5);
			tabbedPane.remove(scroll6);
			tabbedPane.remove(scroll7);
			tabbedPane.remove(scroll8);
			tabbedPane.remove(scroll9);
			tabbedPane.remove(scroll10);
			tabbedPane.remove(scroll11);
			tabbedPane.remove(scroll12);
			tabbedPane.remove(scroll13);
			tabbedPane.remove(scroll14);
			tabbedPane.remove(scroll15);
			tabbedPane.remove(scroll16);
			tabbedPane.remove(scroll17);
			tabbedPane.remove(scroll18);
			tabbedPane.remove(scroll19);
			tabbedPane.remove(scroll20);
			tabbedPane.remove(scroll21);
			tabbedPane.remove(scroll22);
			tabbedPane.remove(scroll23);
			tabbedPane.remove(scroll24);
			tabbedPane.remove(scroll25);
			tabbedPane.remove(scroll26);
			tabbedPane.remove(scroll27);
			tabbedPane.remove(scroll28);
			tabbedPane.remove(scroll29);
			tabbedPane.remove(scroll30);
			tabbedPane.remove(scroll31);
			tabbedPane.remove(scroll32);
			tabbedPane.remove(scroll33);
			tabbedPane.remove(scroll34);
			tabbedPane.remove(scroll35);
            tabbedPane.remove(scroll40);
            tabbedPane.remove(scroll41);
            tabbedPane.remove(scroll42);

			// default
			TargetFile = "*NameOfPhylipFile=";
			address = "";
			fileName = "";
			SampleSize = 0;
			SequenceLengthNt = 0;
			ProteinEvolverABC_NumberReplicates = "*NumberOfSimulations=";
			NumberReplicates = 0;
			ProteinEvolverABC_NumberProcessors = "NumberOfProcessors=";
			SaveSimulations = "*SaveSimulations=";
            ShowInformationScreen = "*ShowInformationScreen=";
            Indels = "*Indels=";

			ProteinEvolverABC_PopSize = "*PopulationSize=";
			PopSize_MAX = -1;
			ProteinEvolverABC_HapDip = "*Haploid/Diploid=";
			ProteinEvolverABC_DatedTips = "#DatedTips=4 1995 1 10 2003 11 16 1997 17 26 2001 27 29";
			ProteinEvolverABC_GenerationTime = "#GenerationTime=fix 1200";
			ProteinEvolverABC_IslandModel = "#MigrationModel=1 4 12 10 3 4";
			ProteinEvolverABC_SteppStoneModel = "#MigrationModel=2 4 12 10 3 4";
 			ProteinEvolverABC_ContIslandModel = "#MigrationModel=3 4 12 10 3 4";
			ProteinEvolverABC_ConvDemes = "#Species/populationsTree=3 1 2 300 3 4 600 5 6 700";
			ProteinEvolverABC_MigrationRate = "#MigrationRate=1 0.005";
			ProteinEvolverABC_GrowthRate = "#GrowthRate=fix 2.3e-03";
			ProteinEvolverABC_DemogPeriods = "#DemographicPeriods=1 1 10 100 500";
			ProteinEvolverABC_DemogPeriodsStructPop_CTE = "#DemographicsSpeciesTree_ConstantPops=2 7 1000 500 900 800 1300 1000 700";
			ProteinEvolverABC_DemogPeriodsStructPop_VARY = "#DemographicsSpeciesTree_VariablePops=3 7 1000 1200 500 600 900 1000 100 200 800 900 2000 1900 900";
			NoDemographics = 0;
			CoalHomogRecRate = "*RecombinationRate=";
			Rho_MIN = 0;
			Rho_MAX = 0;
			Rho.setText("");

			CoalSubsRate = "*SubstitutionRate=";
			Theta_MIN = 0;
			Theta_MAX = 0;
			Theta.setText("");
			ProteinSubstitutionModel_Str = "*SubstitutionModel=";
			ProteinEvolverABCNormalAAFreqs = "#AminoacidFrequencies=fix 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05";
			ProteinEvolverABC_AA_Gamongsites = "#RateHetSites=uniform 0.76 0.90";
			ProteinEvolverABC_AA_I = "#PropInvSites=uniform 0.3 0.5";
		
			ABC_Iterations = "*ABCIterations=";
	 		ABC_Tolerance = "*ABCTolerance=";
			ABC_Method = "*ABCMethod=";
			ABC_Transf = "*ABCTransf=";
			ABC_Corr = "*ABCHCorr=";
			ABC_SummaryStatistics = "*SummaryStatistics=";
			ABC_MultiPage = "*MultiPage=";
			
			createPage2();
			tabbedPane.addTab( "General Settings", scroll2);
			scroll2.setVisible(true);
        	//JOptionPane.showMessageDialog(null, "Please introduce settings in \"General Settings\"", " ", JOptionPane. INFORMATION_MESSAGE);
			System.out.println("\nSettings: Specific information for the input file of ProteinEvolverABC\n");
			tabbedPane.setSelectedComponent(scroll2); //go to that tab
			//scroll01.setVisible(false);
			//tabbedPane.remove(scroll1);
			}
    	}



    // RunButton2 - General Settings
    class runButton2Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;


			/*** number of replicates ***/
			String s = TextNumberReplicates.getText(); //String s = "23";
			if (s.trim().length() == 0) // check empty
				{
				System.out.println("Number of Replicates out of range: " + s);
				JOptionPane.showMessageDialog(null, "Number of Replicates out of range: " + s, " ", JOptionPane. INFORMATION_MESSAGE);
				// System.exit(0);
				Error = Error + 1;
				}
			if (Error == 0)
				{
				for (int i=0; i < s.length(); i++) // check integer
    				{
        			char c = s.charAt(i);
        			if (c >= '0' && c <= '9')
        				{
            			; // ok
        				}
					else
						{
						if (Error == 0)
							{
							System.out.println("Number of Replicates out of range: " + s);
							JOptionPane.showMessageDialog(null, "Number of Replicates out of range: " + s, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}
				}
			if (Error == 0)
				{
				NumberReplicates = Integer.parseInt(s);
				if ((NumberReplicates < 1 || NumberReplicates > 1000000000 || s.trim().length() == 0) && (Error == 0))
					{
					System.out.println("Number of Replicates out of range: " + NumberReplicates);
					JOptionPane.showMessageDialog(null, "Number of Replicates out of range: " + NumberReplicates, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			System.out.println("NumberReplicates: " + NumberReplicates);
			ProteinEvolverABC_NumberReplicates = "*NumberOfSimulations=" + NumberReplicates;
			System.out.println("ProteinEvolverABC_NumberReplicates: " + ProteinEvolverABC_NumberReplicates);
			System.out.println(" ");

			
			/*** number of Processors ***/
			String sv = TextNumberProcessors.getText(); //String s = "23";
			if (sv.trim().length() == 0) // check empty
				{
				System.out.println("Number of processors out of range: " + sv);
				JOptionPane.showMessageDialog(null, "Number of processors out of range: " + sv, " ", JOptionPane. INFORMATION_MESSAGE);
				// System.exit(0);
				Error = Error + 1;
				}
			if (Error == 0)
				{
				for (int i=0; i < sv.length(); i++) // check integer
    				{
        			char c = sv.charAt(i);
        			if (c >= '0' && c <= '9')
        				{
            			; // ok
        				}
					else
						{
						if (Error == 0)
							{
							System.out.println("Number of processors out of range: " + sv);
							JOptionPane.showMessageDialog(null, "Number of processors out of range: " + sv, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}
				}
			int NumberProcessors = Integer.parseInt(sv);
			if (Error == 0)
				{
				if ((NumberProcessors < 1 || NumberProcessors > 100000 || sv.trim().length() == 0) && (Error == 0))
					{
					System.out.println("Number of Processors out of range: " + NumberProcessors);
					JOptionPane.showMessageDialog(null, "Number of Processors out of range: " + NumberProcessors, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			System.out.println("NumberProcessors: " + NumberProcessors);
			ProteinEvolverABC_NumberProcessors = "NumberOfProcessors=" + NumberProcessors;
			System.out.println("ProteinEvolverABC_NumberProcessors: " + ProteinEvolverABC_NumberProcessors);
			System.out.println(" ");


			// Real dataset
			if (SampleSize <= 0 && Error == 0)
				{
				System.out.println("Sample size is incorrect (is the MSA file correctly uploaded?): " + SampleSize);
				JOptionPane.showMessageDialog(null, "Sample size is incorrect (is the MSA file correctly uploaded?): " + SampleSize, " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}
			System.out.println("Sample size: " + SampleSize);

			if (SequenceLengthNt <= 0 && Error == 0)
				{
				System.out.println("Sequence length is incorrect (is the MSA file correctly uploaded?): " + SequenceLengthNt);
				JOptionPane.showMessageDialog(null, "Sequence length is incorrect (is the MSA file correctly uploaded?): " + SequenceLengthNt, " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}
			System.out.println("Sequence length: " + SequenceLengthNt);
			
			if (OkFile == 0)
				{
				System.out.println("MSA file is incorrect");
				JOptionPane.showMessageDialog(null, "MSA file is incorrect", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}


			/*** Save simulations ***/
			if (SaveSims == 0)
				{
				SaveSimulations = "*SaveSimulations=0"; // default
				}
			else
				{
				SaveSimulations = "*SaveSimulations=1"; // default
				}
			System.out.println("SaveSimulations: " + SaveSimulations);
                
                
            /*** Indels ***/
            if (DoIndels == 0)
                {
                Indels = "*Indels=0"; // default
                }
            else
                {
                Indels = "*Indels=1";
                }
            System.out.println("Indels: " + Indels);
                
                
            /*** Show running information on the screen ***/
            if (ShowInfo == 0)
                {
                ShowInformationScreen = "*ShowInformationScreen=0"; // default
                }
            else
                {
                ShowInformationScreen = "*ShowInformationScreen=1"; // default
                }
            System.out.println("ShowInformationScreen: " + ShowInformationScreen);
                

			/** Prepare next tabs for rec and subs by default **/
			PopSize_MAX = 1000; // default
			PrintRho = 1;
			rfix = -1;
			rtwomin = 0;
			rtwomax = 3.0e-6;
			rtype = 1; // 0 fix, 1 two
			// Rho
			Rho_MAX = 2 * 2 * PopSize_MAX * rtwomax * SequenceLengthNt;
			Rho_MAX = Rho_MAX*100;
			Rho_MAX = (double)((int) Rho_MAX);
			Rho_MAX = Rho_MAX /100;
			AVrho = "Rho: 0 " + String.valueOf(Rho_MAX);
			Rho.setText(AVrho);
			//Rho.setVisible(true);

		
			if (Error == 0)
				{
				tabbedPane.remove(scroll3);
				tabbedPane.remove(scroll4);
				tabbedPane.remove(scroll5);
				tabbedPane.remove(scroll6);
				tabbedPane.remove(scroll7);
				tabbedPane.remove(scroll8);
				tabbedPane.remove(scroll9);
				tabbedPane.remove(scroll10);
				tabbedPane.remove(scroll11);
				tabbedPane.remove(scroll12);
				tabbedPane.remove(scroll13);
				tabbedPane.remove(scroll14);
				tabbedPane.remove(scroll15);
				tabbedPane.remove(scroll16);
				tabbedPane.remove(scroll17);
				tabbedPane.remove(scroll18);
				tabbedPane.remove(scroll19);
				tabbedPane.remove(scroll20);
				tabbedPane.remove(scroll21);
				tabbedPane.remove(scroll22);
				tabbedPane.remove(scroll23);
				tabbedPane.remove(scroll24);
				tabbedPane.remove(scroll25);
				tabbedPane.remove(scroll26);
				tabbedPane.remove(scroll27);
				tabbedPane.remove(scroll28);
				tabbedPane.remove(scroll29);
				tabbedPane.remove(scroll30);
				tabbedPane.remove(scroll31);
				tabbedPane.remove(scroll32);
				tabbedPane.remove(scroll33);
				tabbedPane.remove(scroll34);
				tabbedPane.remove(scroll35);
                tabbedPane.remove(scroll40);
                tabbedPane.remove(scroll41);
                tabbedPane.remove(scroll42);
				
				// default
				ProteinEvolverABC_HapDip = "*Haploid/Diploid=2";
				ProteinEvolverABC_DatedTips = "#DatedTips=4 1995 1 10 2003 11 16 1997 17 26 2001 27 29";
				ProteinEvolverABC_GenerationTime = "#GenerationTime=fix 1200";
				ProteinEvolverABC_GrowthRate = "#GrowthRate=fix 2.3e-03";
				ProteinEvolverABC_DemogPeriods = "#DemographicPeriods=1 1 10 100 500";
				ProteinEvolverABC_DemogPeriodsStructPop_CTE = "#DemographicsSpeciesTree_ConstantPops=2 7 1000 500 900 800 1300 1000 700";
				ProteinEvolverABC_DemogPeriodsStructPop_VARY = "#DemographicsSpeciesTree_VariablePops=3 7 1000 1200 500 600 900 1000 100 200 800 900 2000 1900 900";
				ProteinEvolverABC_IslandModel = "#MigrationModel=1 4 12 10 3 4";
				ProteinEvolverABC_SteppStoneModel = "#MigrationModel=2 4 12 10 3 4";
 				ProteinEvolverABC_ContIslandModel = "#MigrationModel=3 4 12 10 3 4";
				ProteinEvolverABC_MigrationRate = "#MigrationRate=1 0.005";
				ProteinEvolverABC_ConvDemes = "#Species/populationsTree=3 1 2 300 3 4 600 5 6 700";
				//ProteinEvolverABC_HotspotsRec = "[hUserHetRec]";
				//ProteinEvolverABC_Outgroup = "[o0.1]";
				CoalHomogRecRate = "*RecombinationRate=";
				Rho_MIN = 0;
				Rho_MAX = 0;
				Rho.setText("");

				CoalSubsRate = "*SubstitutionRate=";
				Theta_MIN = 0;
				Theta_MAX = 0;
				Theta.setText("");
				ProteinSubstitutionModel_Str = "*SubstitutionModel=";
				ProteinEvolverABCNormalAAFreqs = "#AminoacidFrequencies=fix 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05";
				ProteinEvolverABC_AA_Gamongsites = "#RateHetSites=uniform 0.76 0.90";
				ProteinEvolverABC_AA_I = "#PropInvSites=uniform 0.3 0.5";
				
				ABC_Iterations = "*ABCIterations=";
		 		ABC_Tolerance = "*ABCTolerance=";
				ABC_Method = "*ABCMethod=";
				ABC_Transf = "*ABCTransf=";
				ABC_Corr = "*ABCHCorr=";
				ABC_SummaryStatistics = "*SummaryStatistics=";
				ABC_MultiPage = "*MultiPage=";
				
				
				
				createPage4();
				tabbedPane.addTab( "Evolutionary History", scroll4);
				scroll4.setVisible(true);
				tabbedPane.setSelectedComponent(scroll4); //go to that tab
				}
           	}
    	}

	
	

	// RunButton3 - User-specified tree
    class runButton3Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;
			
					
			}
		}



	// RunButton4 - Evolutionary History - Coalescent
    class runButton4Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;
			

			/*** Population size ***/
			String s2 = TextPopSizeProteinEvolverABC.getText();
			if (s2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < s2.length(); i++) // // numbers integer, fix, unif 
    					{
        				char c = s2.charAt(i);
      			  		if ((c >= '0' && c <= '9' && i > 3) || (c == ' ' && i > 2) || (c == 'f' && i == 0) || (c == 'i' && i == 1) || (c == 'x' && i == 2) || (c == 'u' && i == 0) || (c == 'n' && i == 1) || (c == 'i' && i == 2) || (c == 'f' && i == 3) || (c == 'o' && i == 4) || (c == 'r' && i == 5) || (c == 'm' && i == 6)) 
							{
      			    		if (i == 4 && c == '0')
								{
								if (Error == 0)
									{
									System.out.println("Population size is incorrect: " + s2);
									JOptionPane.showMessageDialog(null, "Population size is incorrect: " + s2, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Population size is incorrect: " + s2);
								JOptionPane.showMessageDialog(null, "Population size is incorrect: " + s2, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}

				if (Error == 0)
					{
					if (s2.length() > 4)
						{
						;
						}
					else
						{
						System.out.println("Population size must be correctly introduced. E.g.: fix 500: " + s2);
						JOptionPane.showMessageDialog(null, "Population size must be correctly introduced. E.g.: fix 500: " + s2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}					
	        		}
 
				if (s2.trim().length() != 0) 
					{
					if (Error == 0)
						{
						ProteinEvolverABC_PopSize = "*PopulationSize=" + s2;
						System.out.println("Population size: " + ProteinEvolverABC_PopSize);
						}
					}
				}
			else
				{
				if (Error == 0)
					{
					System.out.println("Population size must be introduced (e.g., fix 1000)");
					JOptionPane.showMessageDialog(null, "Population size must be introduced (e.g., fix 1000)", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				}
		


				/*** Haploid/Diploid ***/
				if (KindDataProteinEvolverABC == "haploid") 
					{
					ProteinEvolverABC_HapDip = "*Haploid/Diploid=1";
    	        	System.out.println("Haploid data (total seettings): " + ProteinEvolverABC_HapDip);
    	    		} 
				if (KindDataProteinEvolverABC == "diploid")
					{
					ProteinEvolverABC_HapDip = "*Haploid/Diploid=2";
    	        	System.out.println("Diploid data (total settings): " + ProteinEvolverABC_HapDip);
        			}
				

				/*** Dated tips ***/
				if (SavedMultDatedTips > 0)
					{
					System.out.println("Dated tips: " + ProteinEvolverABC_DatedTips);
					}
				else
					{
					System.out.println("Do not dated tips: " + ProteinEvolverABC_DatedTips);
					}


				/*** Generation Time ***/
				String s22 = TextGenTimeProteinEvolverABC.getText();
				if (s22.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < s22.length(); i++) // // numbers integer, fix, unif 
	    					{
	        				char c = s22.charAt(i);
	      			  		if ((c >= '0' && c <= '9' && i > 3) || (c == ' ' && i > 2) || (c == 'f' && i == 0) || (c == 'i' && i == 1) || (c == 'x' && i == 2) || (c == 'u' && i == 0) || (c == 'n' && i == 1) || (c == 'i' && i == 2) || (c == 'f' && i == 3) || (c == 'o' && i == 4) || (c == 'r' && i == 5) || (c == 'm' && i == 6)) 
								{
      				    		if (i == 4 && c == '0')
									{
									if (Error == 0)
										{
										System.out.println("Generation time is incorrect: " + s22);
										JOptionPane.showMessageDialog(null, "Generation time is incorrect: " + s22, " ", JOptionPane. INFORMATION_MESSAGE);
										// System.exit(0);
										Error = Error + 1;
										}
									}
        						}
							else
								{
								if (Error == 0)
									{
									System.out.println("Generation time is incorrect: " + s22);
									JOptionPane.showMessageDialog(null, "Generation time is incorrect: " + s22, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}
						}
	
					if (Error == 0)
						{
						if (s22.length() > 4)
							{
							;
							}
						else
							{
							System.out.println("Generation time must be correctly introduced. E.g.: fix 500: " + s22);
							JOptionPane.showMessageDialog(null, "Generation time must be correctly introduced. E.g.: fix 500: " + s22, " ", JOptionPane. INFORMATION_MESSAGE);
							Error = Error + 1;
							}					
	    	    		}
 	
					if (s22.trim().length() != 0) 
						{
						if (Error == 0)
							{
							ProteinEvolverABC_GenerationTime = "GenerationTime=" + s22;
							System.out.println("Generation time: " + ProteinEvolverABC_GenerationTime);
							}
						}
					}
				else
					{
					if (Error == 0 && TextGenTimeProteinEvolverABC_int == 1)
						{
						System.out.println("Generation time must be introduced (e.g., fix 1200) (e.g., uniform 500 1200)");
						JOptionPane.showMessageDialog(null, "Generation time must be introduced (e.g., fix 1200) (e.g., uniform 500 1200)", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					System.out.println("Do not Generation time: " + ProteinEvolverABC_GenerationTime);
					}



				/*** Migration ***/
				String s9 = TextMigrationRateProteinEvolverABC.getText();		
				if (SavedMultIsland != 0)
					{
        		    System.out.println("Island migration model: " + ProteinEvolverABC_IslandModel);
					}
				else
					{
        		    System.out.println("Do not island migration model: " + ProteinEvolverABC_IslandModel);
					}
				if (SavedMultSteppStone != 0)
					{
					System.out.println("Stepping-stone migration model: " + ProteinEvolverABC_SteppStoneModel);
					}
				else
					{
					System.out.println("Do not stepping-stone migration model: " + ProteinEvolverABC_SteppStoneModel);
					}
				if (SavedMultContIsland != 0)
					{
					System.out.println("Island-continent migration model: " + ProteinEvolverABC_ContIslandModel);
					}
				else
					{
					System.out.println("Do not island-continent migration model: " + ProteinEvolverABC_ContIslandModel);
					}


				// Populations/species tree
				if (SavedMultPopStruct == 0)
					{
					ProteinEvolverABC_ConvDemes = "#Species/populationsTree=3 1 2 300 3 4 600 5 6 700";
    		        System.out.println("Do not Populations/species tree: " + ProteinEvolverABC_ConvDemes);
					}
				else
					{
    		        System.out.println("Populations/species tree: " + ProteinEvolverABC_ConvDemes);
					}


				// Migration rates
				if (SavedMultIsland != 0 || SavedMultSteppStone != 0 || SavedMultContIsland != 0)
					{
					if (SavedMultMigrationRates > 0) // Ok, this is evaluated in mult migs
						{
						System.out.println("Multiple migration rates, SavedMultMigrationRates: " + SavedMultMigrationRates);
						System.out.println("ProteinEvolverABC_MigrationRate: " + ProteinEvolverABC_MigrationRate);
						}
					else
						{					
						String s9b = TextMigrationRateProteinEvolverABC.getText();
						double HereMigrationRate = 0;
						HereMigrationRate = Double.parseDouble(s9b);
		
						if (SampleSize == NumberOfConvDemes + 1)
							{
							; // species tree ok, no problem if mig rate = 0
							}
						else
							{
							// checking mig rates
							if (HereMigrationRate == 0 && Error == 0)
								{
								System.out.println("If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation: " + HereMigrationRate);
								JOptionPane.showMessageDialog(null, "If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation: " + HereMigrationRate, " ", JOptionPane. INFORMATION_MESSAGE);
								Error = Error + 1;
								}
							}
						
						if (Error == 0)
							{
							System.out.println("Single migration rate ");
							ProteinEvolverABC_MigrationRate = "MigrationRate=1 " + s9b;
							System.out.println("ProteinEvolverABC_MigrationRate: " + ProteinEvolverABC_MigrationRate);
							}
						
						}
					}
				else
					{
					ProteinEvolverABC_MigrationRate = "#MigrationRate=1 0.005";
					System.out.println("Do not migration rate, ProteinEvolverABC_MigrationRate: " + ProteinEvolverABC_MigrationRate);
					}



				/*** Demographics ***/
				String ChosenDemographics = (String) VariablePopSize.getSelectedItem();
				if (ChosenDemographics == "growth rate" && Error == 0) 
					{

					// Growth rate rate 
					String s3g = TextGrowthRateProteinEvolverABC.getText();
					if (s3g.trim().length() != 0) 
						{
						/*if (Error == 0)
							{
							for (int i=0; i < s3g.length(); i++) // // numbers all; fix, unif, norm(t), exp(t), gamma(t), beta(t)
    							{
        						char c = s3g.charAt(i);
      					  		if (s3g.length() > 4 && ((c >= '0' && c <= '9' && i > 3) || (c == '.' && i > 4) || (c == ' ' && i > 2) || (c == 't' && i > 4) || (c == 'e' && i > 4) || (c == '-' && i > 4) || (i == 0 && (c == 'f' || c == 'u' || c == 'n' || c == 'e' || c == 'g' || c == 'b'))  || (i == 1 && (c == 'i' || c == 'n' || c == 'o' || c == 'x' || c == 'a' || c == 'e')) || (i == 2 && (c == 'x' || c == 'i' || c == 'r' || c == 'p' || c == 'm' || c == 't')) || (i == 3 && (c == ' ' || c == 'f' || c == 'm' || c == 'a')) || (i == 4 && c == 'a'))) // fix, unif, norm(t), exp(t), gamma(t), beta(t) 
									{
      					    		; // ok
        							}
								else
									{
									if (Error == 0)
										{
										System.out.println("Growth rate rate is incorrect: " + s3g);
										JOptionPane.showMessageDialog(null, "Growth rate rate is incorrect: " + s3g, " ", JOptionPane. INFORMATION_MESSAGE);
										// System.exit(0);
										Error = Error + 1;
										}
									}
								}
							}*/
						if (Error == 0)
							{
							ProteinEvolverABC_GrowthRate = "GrowthRate=" + s3g;
							System.out.println("Growth rate rate: " + ProteinEvolverABC_GrowthRate);
							System.out.println("Do not demographic periods: " + ProteinEvolverABC_DemogPeriods);
							System.out.println("Do not constant demographics branches: " + ProteinEvolverABC_DemogPeriodsStructPop_CTE);
							System.out.println("Do not variable demographics branches: " + ProteinEvolverABC_DemogPeriodsStructPop_VARY);
							NoDemographics = 1;
							}
	        			} 
					else
						{
						if (Error == 0)
							{
							System.out.println("Growth rate rate must be correctly introduced (e.g., fix 0) (e.g., unif 1.5e-8 1.0e-7)");
							JOptionPane.showMessageDialog(null, "Growth rate rate must be correctly introduced (e.g., fix 0) (e.g., unif 1.5e-8 1.0e-7)", " ", JOptionPane. INFORMATION_MESSAGE);
							//System.exit(0);
							Error = Error + 1;
							}
						}
    		    	}
				if (ChosenDemographics == "demographic periods" && Error == 0)
					{
    	    	    System.out.println("Demographic periods: " + ProteinEvolverABC_DemogPeriods);
					System.out.println("Do not growth rate: " + ProteinEvolverABC_GrowthRate);
					System.out.println("Do not constant demographics branches: " + ProteinEvolverABC_DemogPeriodsStructPop_CTE);
					System.out.println("Do not variable demographics branches: " + ProteinEvolverABC_DemogPeriodsStructPop_VARY);
					NoDemographics = 1;
        			}
				if (ChosenDemographics == "demographics along branches (constant N branch)" && Error == 0)
					{
    	    	    System.out.println("Do not Demographic periods: " + ProteinEvolverABC_DemogPeriods);
					System.out.println("Do not growth rate: " + ProteinEvolverABC_GrowthRate);
					System.out.println("Constant demographics branches: " + ProteinEvolverABC_DemogPeriodsStructPop_CTE);
					System.out.println("Do not variable demographics branches: " + ProteinEvolverABC_DemogPeriodsStructPop_VARY);
					NoDemographics = 1;
        			}
				if (ChosenDemographics == "demographics along branches (variable N branch)" && Error == 0)
					{
    	    	    System.out.println("Do not Demographic periods: " + ProteinEvolverABC_DemogPeriods);
					System.out.println("Do not growth rate: " + ProteinEvolverABC_GrowthRate);
					System.out.println("Do not constant demographics branches: " + ProteinEvolverABC_DemogPeriodsStructPop_CTE);
					System.out.println("Variable demographics branches: " + ProteinEvolverABC_DemogPeriodsStructPop_VARY);
					NoDemographics = 1;
        			}
				if (ChosenDemographics == "No" && Error == 0)
					{
    	    	    System.out.println("Do not Demographic periods: " + ProteinEvolverABC_DemogPeriods);
					System.out.println("Do not growth rate: " + ProteinEvolverABC_GrowthRate);
					System.out.println("Do not constant demographics branches: " + ProteinEvolverABC_DemogPeriodsStructPop_CTE);
					System.out.println("Do not Variable demographics branches: " + ProteinEvolverABC_DemogPeriodsStructPop_VARY);
					NoDemographics = 0;
        			}


				/*** Homogeneous recombination rate ***/  
				String s3c = TextHomRecRateProteinEvolverABC.getText();
				if (s3c.trim().length() != 0) 
					{
					/*if (Error == 0)
						{
						for (int i=0; i < s3c.length(); i++) // // numbers all; fix, unif, norm(t), exp(t), gamma(t), beta(t)
    						{
        					char c = s3c.charAt(i);
      				  		if (s3c.length() > 4 && ((c >= '0' && c <= '9' && i > 3) || (c == '.' && i > 4) || (c == ' ' && i > 2) || (c == 't' && i > 4) || (c == 'e' && i > 4) || (c == '-' && i > 4) || (i == 0 && (c == 'f' || c == 'u' || c == 'n' || c == 'e' || c == 'g' || c == 'b'))  || (i == 1 && (c == 'i' || c == 'n' || c == 'o' || c == 'x' || c == 'a' || c == 'e')) || (i == 2 && (c == 'x' || c == 'i' || c == 'r' || c == 'p' || c == 'm' || c == 't')) || (i == 3 && (c == ' ' || c == 'f' || c == 'm' || c == 'a')) || (i == 4 && c == 'a'))) // fix, unif, norm(t), exp(t), gamma(t), beta(t) 
								{
      				    		; // ok
        						}
							else
								{
								if (Error == 0)
									{
									System.out.println("Homogeneous recombination rate is incorrect: " + s3c);
									JOptionPane.showMessageDialog(null, "Homogeneous recombination rate is incorrect: " + s3c, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}
						}*/
					if (Error == 0)
						{
						CoalHomogRecRate = "*RecombinationRate=" + s3c;
						System.out.println("Homogeneous recombination rate: " + CoalHomogRecRate);
						}
	        		} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Homogeneous recombination rate must be correctly introduced (e.g., fix 0) (e.g., unif 1.5e-8 1.0e-7)");
						JOptionPane.showMessageDialog(null, "Homogeneous recombination rate must be correctly introduced (e.g., fix 0) (e.g., unif 1.5e-8 1.0e-7)", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					}


				// Check RHO_MAX
				/** Prepare next tabs for rec and subs by default **/
				// update Rho
				if (PrintRho == 1)
					{
					int xhd = -1;
					if (KindDataProteinEvolverABC == "haploid") 
						{
						xhd = 1;
    	    			} 
					if (KindDataProteinEvolverABC == "diploid")
						{
						xhd = 2;
        				}

					if (rtype == 0) // one rho
						{
						Rho_MAX = 2 * xhd * PopSize_MAX * rfix * SequenceLengthNt;
						Rho_MAX = Rho_MAX*100;
						Rho_MAX = (double)((int) Rho_MAX);
						Rho_MAX = Rho_MAX /100;
						AVrho = "Rho: " + String.valueOf(Rho_MAX);
						Rho.setText(AVrho);
						}
					if (rtype == 1) // two rho
						{
						Rho_MAX = 2 * xhd * PopSize_MAX * rtwomax * SequenceLengthNt;
						Rho_MIN = 2 * xhd * PopSize_MAX * rtwomin * SequenceLengthNt;
						Rho_MAX = Rho_MAX*100;
						Rho_MAX = (double)((int) Rho_MAX);
						Rho_MAX = Rho_MAX /100;
						Rho_MIN = Rho_MIN*100;
						Rho_MIN = (double)((int) Rho_MIN);
						Rho_MIN = Rho_MIN /100;
						String A1 = "Rho: " + String.valueOf(Rho_MIN) + " ";
						String A2 = String.valueOf(Rho_MAX);
						String A3 = A1 + A2;
						AVrho = A3;
						Rho.setText(AVrho);
						}

					if ((Rho_MAX > 150) && (Error == 0))
						{
						System.out.println("Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX);
						JOptionPane.showMessageDialog(null, "Population recombination rate (Rho max, see documentation) is out of range (max 150): " + Rho_MAX, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					else
						{
						System.out.println("Population recombination rate (Rho max): " + Rho_MAX);
						}
					}

				

				/*** Hotspots recombination ***/
			/*	String s11 = TextRecHotspotsProteinEvolverABC.getText();
				if (s11.trim().length() != 0 && TextRecHotspotsProteinEvolverABC_int == 1) 
					{
					String p11 = 'h' + s11;
					ProteinEvolverABC_HotspotsRec = p11;
					System.out.println("Hotspots recombination file: " + ProteinEvolverABC_HotspotsRec);
        			} 
				else
					{
					ProteinEvolverABC_HotspotsRec = "[hUserHetRec]";
					System.out.println("Do not hotspots recombination file: " + ProteinEvolverABC_HotspotsRec);
					}
			*/
				/*** outgroup ***/
			/*	String s12 = TextOutgroupProteinEvolverABC.getText();
				double thisValue3;
				if (s12.trim().length() != 0 && TextOutgroupProteinEvolverABC_int == 1) 
					{
					if (Error == 0)
						{
						for (int i=0; i < s12.length(); i++) // check integer
    						{
        					char c = s12.charAt(i);
      			  			if ((c >= '0' && c <= '9') || (c == '.')) // numbers
        						{
      			     			; // ok
        						}
							else
								{
								if (Error == 0)
									{
									System.out.println("Outgroup branch length is incorrect: " + s12);
									JOptionPane.showMessageDialog(null, "Outgroup branch length is incorrect: " + s12, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}
						}
					if (Error == 0)
						{
						thisValue3 = Double.parseDouble(s12);
						if (thisValue3 < 0)
							{
							System.out.println("Outgroup branch length cannot be negative: " + thisValue3);
							JOptionPane.showMessageDialog(null, "Outgroup branch length cannot be negative: " + thisValue3, " ", JOptionPane. INFORMATION_MESSAGE);
							//System.exit(0);
							Error = Error + 1;
							}
						}
					if (Error == 0)
						{
						String p12 = 'o' + s12;
						ProteinEvolverABC_Outgroup = p12;
						System.out.println("Outgroup: " + ProteinEvolverABC_Outgroup);
						}
        			} 
				else
					{
					ProteinEvolverABC_Outgroup = "[o0.1]";
					System.out.println("Do not outgroup: " + ProteinEvolverABC_Outgroup);
					}
			*/


			
			/** Prepare next tabs for rec and subs by default **/
			double tmax = 4.0e-4; // default
			double tmin = 9.1e-5; // default
			if (KindDataProteinEvolverABC == "haploid") 
				{
				Theta_MAX = 2 * 1 * PopSize_MAX * tmax * SequenceLengthNt / 3;
				Theta_MIN = 2 * 1 * PopSize_MAX * tmin * SequenceLengthNt / 3;
				Theta_MAX = Theta_MAX*100;
				Theta_MAX = (double)((int) Theta_MAX);
				Theta_MAX = Theta_MAX /100;
				Theta_MIN = Theta_MIN*100;
				Theta_MIN = (double)((int) Theta_MIN);
				Theta_MIN = Theta_MIN /100;
				String A1 = "Theta: " + String.valueOf(Theta_MIN) + " ";
				String A2 = String.valueOf(Theta_MAX);
				String A3 = A1 + A2;
				AVtheta = A3;
				Theta.setText(AVtheta);
				}
			if (KindDataProteinEvolverABC == "diploid") 
				{
				Theta_MAX = 2 * 2 * PopSize_MAX * tmax * SequenceLengthNt / 3;
				Theta_MIN = 2 * 2 * PopSize_MAX * tmin * SequenceLengthNt / 3;
				Theta_MAX = Theta_MAX*100;
				Theta_MAX = (double)((int) Theta_MAX);
				Theta_MAX = Theta_MAX /100;
				Theta_MIN = Theta_MIN*100;
				Theta_MIN = (double)((int) Theta_MIN);
				Theta_MIN = Theta_MIN /100;
				String A1 = "Theta: " + String.valueOf(Theta_MIN) + " ";
				String A2 = String.valueOf(Theta_MAX);
				String A3 = A1 + A2;
				AVtheta = A3;
				Theta.setText(AVtheta);
				}



			/*** Next tab ***/
			if (Error == 0)
				{
				System.out.println(" ");
				tabbedPane.remove(scroll5);
				tabbedPane.remove(scroll6);
				tabbedPane.remove(scroll7);
				tabbedPane.remove(scroll8);
				tabbedPane.remove(scroll9);
				tabbedPane.remove(scroll10);
				tabbedPane.remove(scroll11);
				tabbedPane.remove(scroll12);
				tabbedPane.remove(scroll13);
				tabbedPane.remove(scroll14);
				tabbedPane.remove(scroll15);
				tabbedPane.remove(scroll16);
				tabbedPane.remove(scroll17);
				tabbedPane.remove(scroll18);
				tabbedPane.remove(scroll19);
				tabbedPane.remove(scroll20);
				tabbedPane.remove(scroll21);
				tabbedPane.remove(scroll22);
				tabbedPane.remove(scroll23);
				tabbedPane.remove(scroll24);
				tabbedPane.remove(scroll25);
				tabbedPane.remove(scroll26);
				tabbedPane.remove(scroll27);
				tabbedPane.remove(scroll28);
				tabbedPane.remove(scroll29);
				tabbedPane.remove(scroll30);
				tabbedPane.remove(scroll31);
				tabbedPane.remove(scroll32);
				tabbedPane.remove(scroll33);
				tabbedPane.remove(scroll34);
				tabbedPane.remove(scroll35);
                tabbedPane.remove(scroll40);
                tabbedPane.remove(scroll41);
                tabbedPane.remove(scroll42);
				
				// default
				CoalSubsRate = "*SubstitutionRate=";
				Theta_MIN = 0;
				Theta_MAX = 0;
				Theta.setText("");
				ProteinEvolverABCNormalAAFreqs = "#AminoacidFrequencies=fix 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05";
				ProteinEvolverABC_AA_Gamongsites = "#RateHetSites=uniform 0.76 0.90";
				ProteinEvolverABC_AA_I = "#PropInvSites=uniform 0.3 0.5";
				ProteinSubstitutionModel_Str = "*SubstitutionModel=";

				ABC_Iterations = "*ABCIterations=";
	 			ABC_Tolerance = "*ABCTolerance=";
				ABC_Method = "*ABCMethod=";
				ABC_Transf = "*ABCTransf=";
				ABC_Corr = "*ABCHCorr=";
				ABC_SummaryStatistics = "*SummaryStatistics=";
				ABC_MultiPage = "*MultiPage=";
				
				createPage7();
				tabbedPane.addTab("Substitution process", scroll7);
				scroll7.setVisible(true);
				//tabbedPane.remove(scroll4);
				tabbedPane.setSelectedComponent(scroll7); //go to that tab
				}
			}
    	}
	

	// runButtonMultDatedTipsExitHandler button
	public class runButtonMultDatedTipsExitHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			ProteinEvolverABC_DatedTips = "#DatedTips=4 1995 1 10 2003 11 16 1997 17 26 2001 27 29";
			label4ee.setText("");
			label4ee.setVisible(false); // DatedTips not saved
			
			MultDatedTipsWindow.setVisible(false);
			MultDatedTipsWindow.dispose();
			System.out.println("Do not dated tips: " + ProteinEvolverABC_DatedTips);

			
			// Set No
			OneDatedTips_int = 0;
			DatedTipsProteinEvolverABC_No.setSelected(true);
			}
		}

	

	// runButtonMultDatedTipsSaveNextHandler button
	public class runButtonMultDatedTipsSaveNextHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			Error = 0;
			
			String ProteinEvolverABC_InputDatedTips_Mult1 = "";
			String ProteinEvolverABC_InputDatedTips_Mult2 = "";
			String ProteinEvolverABC_InputDatedTips_Mult3 = "";
			String ProteinEvolverABC_InputDatedTips_Mult4 = "";
			String ProteinEvolverABC_InputDatedTips_Mult5 = "";
			String ProteinEvolverABC_InputDatedTips_Mult6 = "";
			String ProteinEvolverABC_InputDatedTips_Mult7 = "";
			String ProteinEvolverABC_InputDatedTips_Mult8 = "";
			String ProteinEvolverABC_InputDatedTips_Mult9 = "";
			String ProteinEvolverABC_InputDatedTips_Mult10 = "";

			// Number Of DatedTips
			String sX0 = TextNumberOfMultDatedTipsProteinEvolverABC.getText();
			int thisValue0 = 0;
			if (sX0.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX0.length(); i++) // check integer
    					{
        				char c = sX0.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Number of DatedTips is incorrect: " + sX0);
								JOptionPane.showMessageDialog(null, "Number of DatedTips is incorrect: " + sX0, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					thisValue0 = Integer.parseInt(sX0);
					if (thisValue0 <= 0)
						{
						System.out.println("Number of DatedTips cannot be null or negative: " + thisValue0);
						JOptionPane.showMessageDialog(null, "Number of DatedTips cannot be null or negative: " + thisValue0, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Number of DatedTips: " + sX0);
					}
        		} 
			else
				{
				System.out.println("Number of DatedTips must be introduced");
				JOptionPane.showMessageDialog(null, "Number of DatedTips must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			


			// DatedTips_1
			int Init_Reg1_1 = 0;
			int End_Reg1_1 = 0;
			Init_Reg1_1 = 0;
			End_Reg1_1 = 0;
			String sX_Reg1_1 = TextMultDatedTips_Reg1_1.getText();
			if (sX_Reg1_1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_1.length(); i++) // check integer
    					{
        				char c = sX_Reg1_1.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_1, initial sample incorrect: " + sX_Reg1_1);
								JOptionPane.showMessageDialog(null, "DatedTips_1, initial sample incorrect: " + sX_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_1 = Integer.parseInt(sX_Reg1_1);
					if (Init_Reg1_1 <= 0 && Error == 0)
						{
						System.out.println("DatedTips_1, initial sample cannot be null or negative: " + Init_Reg1_1);
						JOptionPane.showMessageDialog(null, "DatedTips_1, initial sample cannot be null or negative: " + Init_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					if (Init_Reg1_1 != 1 && Error == 0)
						{
						System.out.println("DatedTips_1, initial sample should be 1: " + Init_Reg1_1);
						JOptionPane.showMessageDialog(null, "DatedTips_1, initial sample should be 1: " + Init_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_1, initial sample: " + sX_Reg1_1);
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("DatedTips_1, initial sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_1, initial sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_1 = TextMultDatedTips_Reg2_1.getText();
			if (sX_Reg2_1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_1.length(); i++) // check integer
    					{
        				char c = sX_Reg2_1.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_1, final sample incorrect: " + sX_Reg2_1);
								JOptionPane.showMessageDialog(null, "DatedTips_1, final sample incorrect: " + sX_Reg2_1, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_1 = Integer.parseInt(sX_Reg2_1);
					if (End_Reg1_1 <= 0 && Error == 0)
						{
						System.out.println("DatedTips_1, final sample cannot be null or negative: " + End_Reg1_1);
						JOptionPane.showMessageDialog(null, "DatedTips_1, final sample cannot be null or negative: " + End_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_1, final sample: " + sX_Reg2_1);
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("DatedTips_1, final sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_1, final sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			if (End_Reg1_1 < Init_Reg1_1 && thisValue0 > 0 && Error == 0)
				{
				System.out.println("DatedTips_1, final sample cannot be lower than the initial sample");
				JOptionPane.showMessageDialog(null, "DatedTips_1, final sample cannot be lower than the initial sample", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			
			
			String sX_DatedTips_1 = TextMultDatedTipsProteinEvolverABC_1.getText();
			int Control_1 = 0;
			if (sX_DatedTips_1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DatedTips_1.length(); i++) // check integer
    					{
        				char c = sX_DatedTips_1.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_1 = Control_1 + 1; // ok
        					}
        				
						}
					}
				if (Error == 0)
					{
					if (Control_1 < 2 && Error == 0)
						{
						System.out.println("DatedTips_1: Incorrect time");
						JOptionPane.showMessageDialog(null, "DatedTips_1: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_1: " + sX_DatedTips_1);
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("DatedTips_1 must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_1 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			
			// DatedTips_2
			int Init_Reg1_2 = 0;
			int End_Reg1_2 = 0;
			Init_Reg1_2 = 0;
			End_Reg1_2 = 0;
			String sX_Reg1_2 = TextMultDatedTips_Reg1_2.getText();
			if (sX_Reg1_2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_2.length(); i++) // check integer
    					{
        				char c = sX_Reg1_2.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_2, initial sample incorrect: " + sX_Reg1_2);
								JOptionPane.showMessageDialog(null, "DatedTips_2, initial sample incorrect: " + sX_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_2 = Integer.parseInt(sX_Reg1_2);
					if (Init_Reg1_2 <= 0 && Error == 0)
						{
						System.out.println("DatedTips_2, initial sample cannot be null or negative: " + Init_Reg1_2);
						JOptionPane.showMessageDialog(null, "DatedTips_2, initial sample cannot be null or negative: " + Init_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_2, initial sample: " + sX_Reg1_2);
					}
        		} 
			else
				{
				if (thisValue0 > 1 && Error == 0)
					{
					System.out.println("DatedTips_2, initial sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_2, initial sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_2 = TextMultDatedTips_Reg2_2.getText();
			if (sX_Reg2_2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_2.length(); i++) // check integer
    					{
        				char c = sX_Reg2_2.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_2, final sample incorrect: " + sX_Reg2_2);
								JOptionPane.showMessageDialog(null, "DatedTips_2, final sample incorrect: " + sX_Reg2_2, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_2 = Integer.parseInt(sX_Reg2_2);
					if (End_Reg1_2 <= 0 && Error == 0)
						{
						System.out.println("DatedTips_2, final sample cannot be null or negative: " + End_Reg1_2);
						JOptionPane.showMessageDialog(null, "DatedTips_2, final sample cannot be null or negative: " + End_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_2, final sample: " + sX_Reg2_2);
					}
        		} 
			else
				{
				if (thisValue0 > 1 && Error == 0)
					{
					System.out.println("DatedTips_2, final sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_2, final sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			if (End_Reg1_2 < Init_Reg1_2 && thisValue0 > 1 && Error == 0)
				{
				System.out.println("DatedTips_2, final sample cannot be lower than the initial sample");
				JOptionPane.showMessageDialog(null, "DatedTips_2, final sample cannot be lower than the initial sample", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			
			
			String sX_DatedTips_2 = TextMultDatedTipsProteinEvolverABC_2.getText();
			int Control_2 = 0;
			if (sX_DatedTips_2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DatedTips_2.length(); i++) // check integer
    					{
        				char c = sX_DatedTips_2.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_2 = Control_2 + 1; // ok
        					}
						}
					}
				if (Error == 0)
					{
					if (Control_2 < 2 && Error == 0)
						{
						System.out.println("DatedTips_2: Incorrect time");
						JOptionPane.showMessageDialog(null, "DatedTips_2: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_2: " + sX_DatedTips_2);
					}
        		} 
			else
				{
				if (thisValue0 > 1 && Error == 0)
					{
					System.out.println("DatedTips_2 must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_2 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			
			// DatedTips_3
			int Init_Reg1_3 = 0;
			int End_Reg1_3 = 0;
			Init_Reg1_3 = 0;
			End_Reg1_3 = 0;
			String sX_Reg1_3 = TextMultDatedTips_Reg1_3.getText();
			if (sX_Reg1_3.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_3.length(); i++) // check integer
    					{
        				char c = sX_Reg1_3.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_3, initial sample incorrect: " + sX_Reg1_3);
								JOptionPane.showMessageDialog(null, "DatedTips_3, initial sample incorrect: " + sX_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_3 = Integer.parseInt(sX_Reg1_3);
					if (Init_Reg1_3 <= 0 && Error == 0)
						{
						System.out.println("DatedTips_3, initial sample cannot be null or negative: " + Init_Reg1_3);
						JOptionPane.showMessageDialog(null, "DatedTips_3, initial sample cannot be null or negative: " + Init_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_3, initial sample: " + sX_Reg1_3);
					}
        		} 
			else
				{
				if (thisValue0 > 2 && Error == 0)
					{
					System.out.println("DatedTips_3, initial sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_3, initial sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_3 = TextMultDatedTips_Reg2_3.getText();
			if (sX_Reg2_3.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_3.length(); i++) // check integer
    					{
        				char c = sX_Reg2_3.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_3, final sample incorrect: " + sX_Reg2_3);
								JOptionPane.showMessageDialog(null, "DatedTips_3, final sample incorrect: " + sX_Reg2_3, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_3 = Integer.parseInt(sX_Reg2_3);
					if (End_Reg1_3 <= 0 && Error == 0)
						{
						System.out.println("DatedTips_3, final sample cannot be null or negative: " + End_Reg1_3);
						JOptionPane.showMessageDialog(null, "DatedTips_3, final sample cannot be null or negative: " + End_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_3, final sample: " + sX_Reg2_3);
					}
        		} 
			else
				{
				if (thisValue0 > 2 && Error == 0)
					{
					System.out.println("DatedTips_3, final sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_3, final sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			if (End_Reg1_3 < Init_Reg1_3 && thisValue0 > 2 && Error == 0)
				{
				System.out.println("DatedTips_3, final sample cannot be lower than the initial sample");
				JOptionPane.showMessageDialog(null, "DatedTips_3, final sample cannot be lower than the initial sample", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			
			
			String sX_DatedTips_3 = TextMultDatedTipsProteinEvolverABC_3.getText();
			int Control_3 = 0;
			if (sX_DatedTips_3.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DatedTips_3.length(); i++) // check integer
    					{
        				char c = sX_DatedTips_3.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_3 = Control_3 + 1; // ok
        					}
        				
						}
					}
				if (Error == 0)
					{
					if (Control_3 < 2 && Error == 0)
						{
						System.out.println("DatedTips_3: Incorrect time");
						JOptionPane.showMessageDialog(null, "DatedTips_3: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_3: " + sX_DatedTips_3);
					}
        		} 
			else
				{
				if (thisValue0 > 2 && Error == 0)
					{
					System.out.println("DatedTips_3 must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_3 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
		
		
			// DatedTips_4
			int Init_Reg1_4 = 0;
			int End_Reg1_4 = 0;
			Init_Reg1_4 = 0;
			End_Reg1_4 = 0;
			String sX_Reg1_4 = TextMultDatedTips_Reg1_4.getText();
			if (sX_Reg1_4.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_4.length(); i++) // check integer
    					{
        				char c = sX_Reg1_4.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_4, initial sample incorrect: " + sX_Reg1_4);
								JOptionPane.showMessageDialog(null, "DatedTips_4, initial sample incorrect: " + sX_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_4 = Integer.parseInt(sX_Reg1_4);
					if (Init_Reg1_4 <= 0 && Error == 0)
						{
						System.out.println("DatedTips_4, initial sample cannot be null or negative: " + Init_Reg1_4);
						JOptionPane.showMessageDialog(null, "DatedTips_4, initial sample cannot be null or negative: " + Init_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_4, initial sample: " + sX_Reg1_4);
					}
        		} 
			else
				{
				if (thisValue0 > 3 && Error == 0)
					{
					System.out.println("DatedTips_4, initial sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_4, initial sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_4 = TextMultDatedTips_Reg2_4.getText();
			if (sX_Reg2_4.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_4.length(); i++) // check integer
    					{
        				char c = sX_Reg2_4.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_4, final sample incorrect: " + sX_Reg2_4);
								JOptionPane.showMessageDialog(null, "DatedTips_4, final sample incorrect: " + sX_Reg2_4, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_4 = Integer.parseInt(sX_Reg2_4);
					if (End_Reg1_4 <= 0 && Error == 0)
						{
						System.out.println("DatedTips_4, final sample cannot be null or negative: " + End_Reg1_4);
						JOptionPane.showMessageDialog(null, "DatedTips_4, final sample cannot be null or negative: " + End_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_4, final sample: " + sX_Reg2_4);
					}
        		} 
			else
				{
				if (thisValue0 > 3 && Error == 0)
					{
					System.out.println("DatedTips_4, final sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_4, final sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			if (End_Reg1_4 < Init_Reg1_4 && thisValue0 > 3 && Error == 0)
				{
				System.out.println("DatedTips_4, final sample cannot be lower than the initial sample");
				JOptionPane.showMessageDialog(null, "DatedTips_4, final sample cannot be lower than the initial sample", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			
			
			String sX_DatedTips_4 = TextMultDatedTipsProteinEvolverABC_4.getText();
			int Control_4 = 0;
			if (sX_DatedTips_4.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DatedTips_4.length(); i++) // check integer
    					{
        				char c = sX_DatedTips_4.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_4 = Control_4 + 1; // ok
        					}
        				
						}
					}
				if (Error == 0)
					{
					if (Control_4 < 2 && Error == 0)
						{
						System.out.println("DatedTips_4: Incorrect time");
						JOptionPane.showMessageDialog(null, "DatedTips_4: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_4: " + sX_DatedTips_4);
					}
        		} 
			else
				{
				if (thisValue0 > 3 && Error == 0)
					{
					System.out.println("DatedTips_4 must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_4 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
		
	
		// DatedTips_5
			int Init_Reg1_5 = 0;
			int End_Reg1_5 = 0;
			Init_Reg1_5 = 0;
			End_Reg1_5 = 0;
			String sX_Reg1_5 = TextMultDatedTips_Reg1_5.getText();
			if (sX_Reg1_5.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_5.length(); i++) // check integer
    					{
        				char c = sX_Reg1_5.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_5, initial sample incorrect: " + sX_Reg1_5);
								JOptionPane.showMessageDialog(null, "DatedTips_5, initial sample incorrect: " + sX_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_5 = Integer.parseInt(sX_Reg1_5);
					if (Init_Reg1_5 <= 0)
						{
						System.out.println("DatedTips_5, initial sample cannot be null or negative: " + Init_Reg1_5);
						JOptionPane.showMessageDialog(null, "DatedTips_5, initial sample cannot be null or negative: " + Init_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_5, initial sample: " + sX_Reg1_5);
					}
        		} 
			else
				{
				if (thisValue0 > 4 && Error == 0)
					{
					System.out.println("DatedTips_5, initial sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_5, initial sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_5 = TextMultDatedTips_Reg2_5.getText();
			if (sX_Reg2_5.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_5.length(); i++) // check integer
    					{
        				char c = sX_Reg2_5.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_5, final sample incorrect: " + sX_Reg2_5);
								JOptionPane.showMessageDialog(null, "DatedTips_5, final sample incorrect: " + sX_Reg2_5, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_5 = Integer.parseInt(sX_Reg2_5);
					if (End_Reg1_5 <= 0 && Error == 0)
						{
						System.out.println("DatedTips_5, final sample cannot be null or negative: " + End_Reg1_5);
						JOptionPane.showMessageDialog(null, "DatedTips_5, final sample cannot be null or negative: " + End_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_5, final sample: " + sX_Reg2_5);
					}
        		} 
			else
				{
				if (thisValue0 > 4 && Error == 0)
					{
					System.out.println("DatedTips_5, final sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_5, final sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			if (End_Reg1_5 < Init_Reg1_5 && thisValue0 > 4 && Error == 0)
				{
				System.out.println("DatedTips_5, final sample cannot be lower than the initial sample");
				JOptionPane.showMessageDialog(null, "DatedTips_5, final sample cannot be lower than the initial sample", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			
			
			String sX_DatedTips_5 = TextMultDatedTipsProteinEvolverABC_5.getText();
			int Control_5 = 0;
			if (sX_DatedTips_5.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DatedTips_5.length(); i++) // check integer
    					{
        				char c = sX_DatedTips_5.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_5 = Control_5 + 1; // ok
        					}
        				
						}
					}
				if (Error == 0)
					{
					if (Control_5 < 2 && Error == 0)
						{
						System.out.println("DatedTips_5: Incorrect time");
						JOptionPane.showMessageDialog(null, "DatedTips_5: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_5: " + sX_DatedTips_5);
					}
        		} 
			else
				{
				if (thisValue0 > 4 && Error == 0)
					{
					System.out.println("DatedTips_5 must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_5 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// DatedTips_6
			int Init_Reg1_6 = 0;
			int End_Reg1_6 = 0;
			Init_Reg1_6 = 0;
			End_Reg1_6 = 0;
			String sX_Reg1_6 = TextMultDatedTips_Reg1_6.getText();
			if (sX_Reg1_6.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_6.length(); i++) // check integer
    					{
        				char c = sX_Reg1_6.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_6, initial sample incorrect: " + sX_Reg1_6);
								JOptionPane.showMessageDialog(null, "DatedTips_6, initial sample incorrect: " + sX_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_6 = Integer.parseInt(sX_Reg1_6);
					if (Init_Reg1_6 <= 0 && Error == 0)
						{
						System.out.println("DatedTips_6, initial sample cannot be null or negative: " + Init_Reg1_6);
						JOptionPane.showMessageDialog(null, "DatedTips_6, initial sample cannot be null or negative: " + Init_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_6, initial sample: " + sX_Reg1_6);
					}
        		} 
			else
				{
				if (thisValue0 > 5 && Error == 0)
					{
					System.out.println("DatedTips_6, initial sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_6, initial sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_6 = TextMultDatedTips_Reg2_6.getText();
			if (sX_Reg2_6.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_6.length(); i++) // check integer
    					{
        				char c = sX_Reg2_6.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_6, final sample incorrect: " + sX_Reg2_6);
								JOptionPane.showMessageDialog(null, "DatedTips_6, final sample incorrect: " + sX_Reg2_6, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_6 = Integer.parseInt(sX_Reg2_6);
					if (End_Reg1_6 <= 0 && Error == 0)
						{
						System.out.println("DatedTips_6, final sample cannot be null or negative: " + End_Reg1_6);
						JOptionPane.showMessageDialog(null, "DatedTips_6, final sample cannot be null or negative: " + End_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_6, final sample: " + sX_Reg2_6);
					}
        		} 
			else
				{
				if (thisValue0 > 5 && Error == 0)
					{
					System.out.println("DatedTips_6, final sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_6, final sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			if (End_Reg1_6 < Init_Reg1_6 && thisValue0 > 5 && Error == 0)
				{
				System.out.println("DatedTips_6, final sample cannot be lower than the initial sample");
				JOptionPane.showMessageDialog(null, "DatedTips_6, final sample cannot be lower than the initial sample", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			
			
			String sX_DatedTips_6 = TextMultDatedTipsProteinEvolverABC_6.getText();
			int Control_6 = 0;
			if (sX_DatedTips_6.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DatedTips_6.length(); i++) // check integer
    					{
        				char c = sX_DatedTips_6.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_6 = Control_6 + 1; // ok
        					}
        				
						}
					}
				if (Error == 0)
					{
					if (Control_6 < 2 && Error == 0)
						{
						System.out.println("DatedTips_6: Incorrect time");
						JOptionPane.showMessageDialog(null, "DatedTips_6: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_6: " + sX_DatedTips_6);
					}
        		} 
			else
				{
				if (thisValue0 > 5 && Error == 0)
					{
					System.out.println("DatedTips_6 must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_6 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// DatedTips_7
			int Init_Reg1_7 = 0;
			int End_Reg1_7 = 0;
			Init_Reg1_7 = 0;
			End_Reg1_7 = 0;
			String sX_Reg1_7 = TextMultDatedTips_Reg1_7.getText();
			if (sX_Reg1_7.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_7.length(); i++) // check integer
    					{
        				char c = sX_Reg1_7.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_7, initial sample incorrect: " + sX_Reg1_7);
								JOptionPane.showMessageDialog(null, "DatedTips_7, initial sample incorrect: " + sX_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_7 = Integer.parseInt(sX_Reg1_7);
					if (Init_Reg1_7 <= 0 && Error == 0)
						{
						System.out.println("DatedTips_7, initial sample cannot be null or negative: " + Init_Reg1_7);
						JOptionPane.showMessageDialog(null, "DatedTips_7, initial sample cannot be null or negative: " + Init_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_7, initial sample: " + sX_Reg1_7);
					}
        		} 
			else
				{
				if (thisValue0 > 6 && Error == 0)
					{
					System.out.println("DatedTips_7, initial sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_7, initial sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_7 = TextMultDatedTips_Reg2_7.getText();
			if (sX_Reg2_7.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_7.length(); i++) // check integer
    					{
        				char c = sX_Reg2_7.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_7, final sample incorrect: " + sX_Reg2_7);
								JOptionPane.showMessageDialog(null, "DatedTips_7, final sample incorrect: " + sX_Reg2_7, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_7 = Integer.parseInt(sX_Reg2_7);
					if (End_Reg1_7 <= 0)
						{
						System.out.println("DatedTips_7, final sample cannot be null or negative: " + End_Reg1_7);
						JOptionPane.showMessageDialog(null, "DatedTips_7, final sample cannot be null or negative: " + End_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_7, final sample: " + sX_Reg2_7);
					}
        		} 
			else
				{
				if (thisValue0 > 6 && Error == 0)
					{
					System.out.println("DatedTips_7, final sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_7, final sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			if (End_Reg1_7 < Init_Reg1_7 && thisValue0 > 6 && Error == 0)
				{
				System.out.println("DatedTips_7, final sample cannot be lower than the initial sample");
				JOptionPane.showMessageDialog(null, "DatedTips_7, final sample cannot be lower than the initial sample", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			
			
			String sX_DatedTips_7 = TextMultDatedTipsProteinEvolverABC_7.getText();
			int Control_7 = 0;
			if (sX_DatedTips_7.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DatedTips_7.length(); i++) // check integer
    					{
        				char c = sX_DatedTips_7.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_7 = Control_7 + 1; // ok
        					}
        				}
					}
				if (Error == 0)
					{
					if (Control_7 < 2 && Error == 0)
						{
						System.out.println("DatedTips_7: Incorrect time");
						JOptionPane.showMessageDialog(null, "DatedTips_7: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_7: " + sX_DatedTips_7);
					}
        		} 
			else
				{
				if (thisValue0 > 6 && Error == 0)
					{
					System.out.println("DatedTips_7 must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_7 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// DatedTips_8
			int Init_Reg1_8 = 0;
			int End_Reg1_8 = 0;
			Init_Reg1_8 = 0;
			End_Reg1_8 = 0;
			String sX_Reg1_8 = TextMultDatedTips_Reg1_8.getText();
			if (sX_Reg1_8.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_8.length(); i++) // check integer
    					{
        				char c = sX_Reg1_8.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_8, initial sample incorrect: " + sX_Reg1_8);
								JOptionPane.showMessageDialog(null, "DatedTips_8, initial sample incorrect: " + sX_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_8 = Integer.parseInt(sX_Reg1_8);
					if (Init_Reg1_8 <= 0)
						{
						System.out.println("DatedTips_8, initial sample cannot be null or negative: " + Init_Reg1_8);
						JOptionPane.showMessageDialog(null, "DatedTips_8, initial sample cannot be null or negative: " + Init_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_8, initial sample: " + sX_Reg1_8);
					}
        		} 
			else
				{
				if (thisValue0 > 7 && Error == 0)
					{
					System.out.println("DatedTips_8, initial sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_8, initial sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_8 = TextMultDatedTips_Reg2_8.getText();
			if (sX_Reg2_8.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_8.length(); i++) // check integer
    					{
        				char c = sX_Reg2_8.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_8, final sample incorrect: " + sX_Reg2_8);
								JOptionPane.showMessageDialog(null, "DatedTips_8, final sample incorrect: " + sX_Reg2_8, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_8 = Integer.parseInt(sX_Reg2_8);
					if (End_Reg1_8 <= 0)
						{
						System.out.println("DatedTips_8, final sample cannot be null or negative: " + End_Reg1_8);
						JOptionPane.showMessageDialog(null, "DatedTips_8, final sample cannot be null or negative: " + End_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_8, final sample: " + sX_Reg2_8);
					}
        		} 
			else
				{
				if (thisValue0 > 7 && Error == 0)
					{
					System.out.println("DatedTips_8, final sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_8, final sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			if (End_Reg1_8 < Init_Reg1_8 && thisValue0 > 7 && Error == 0)
				{
				System.out.println("DatedTips_8, final sample cannot be lower than the initial sample");
				JOptionPane.showMessageDialog(null, "DatedTips_8, final sample cannot be lower than the initial sample", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			
			
			String sX_DatedTips_8 = TextMultDatedTipsProteinEvolverABC_8.getText();
			int Control_8 = 0;
			if (sX_DatedTips_8.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DatedTips_8.length(); i++) // check integer
    					{
        				char c = sX_DatedTips_8.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_8 = Control_8 + 1; // ok
        					}
						}
					}
				if (Error == 0)
					{
					if (Control_8 < 2 && Error == 0)
						{
						System.out.println("DatedTips_8: Incorrect time");
						JOptionPane.showMessageDialog(null, "DatedTips_8: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_8: " + sX_DatedTips_8);
					}
        		} 
			else
				{
				if (thisValue0 > 7 && Error == 0)
					{
					System.out.println("DatedTips_8 must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_8 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// DatedTips_9
			int Init_Reg1_9 = 0;
			int End_Reg1_9 = 0;
			Init_Reg1_9 = 0;
			End_Reg1_9 = 0;
			String sX_Reg1_9 = TextMultDatedTips_Reg1_9.getText();
			if (sX_Reg1_9.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_9.length(); i++) // check integer
    					{
        				char c = sX_Reg1_9.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_9, initial sample incorrect: " + sX_Reg1_9);
								JOptionPane.showMessageDialog(null, "DatedTips_9, initial sample incorrect: " + sX_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_9 = Integer.parseInt(sX_Reg1_9);
					if (Init_Reg1_9 <= 0 && Error == 0)
						{
						System.out.println("DatedTips_9, initial sample cannot be null or negative: " + Init_Reg1_9);
						JOptionPane.showMessageDialog(null, "DatedTips_9, initial sample cannot be null or negative: " + Init_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_9, initial sample: " + sX_Reg1_9);
					}
        		} 
			else
				{
				if (thisValue0 > 8 && Error == 0)
					{
					System.out.println("DatedTips_9, initial sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_9, initial sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_9 = TextMultDatedTips_Reg2_9.getText();
			if (sX_Reg2_9.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_9.length(); i++) // check integer
    					{
        				char c = sX_Reg2_9.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_9, final sample incorrect: " + sX_Reg2_9);
								JOptionPane.showMessageDialog(null, "DatedTips_9, final sample incorrect: " + sX_Reg2_9, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_9 = Integer.parseInt(sX_Reg2_9);
					if (End_Reg1_9 <= 0 && Error == 0)
						{
						System.out.println("DatedTips_9, final sample cannot be null or negative: " + End_Reg1_9);
						JOptionPane.showMessageDialog(null, "DatedTips_9, final sample cannot be null or negative: " + End_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_9, final sample: " + sX_Reg2_9);
					}
        		} 
			else
				{
				if (thisValue0 > 8 && Error == 0)
					{
					System.out.println("DatedTips_9, final sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_9, final sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			if (End_Reg1_9 < Init_Reg1_9 && thisValue0 > 8 && Error == 0)
				{
				System.out.println("DatedTips_9, final sample cannot be lower than the initial sample");
				JOptionPane.showMessageDialog(null, "DatedTips_9, final sample cannot be lower than the initial sample", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			
			
			String sX_DatedTips_9 = TextMultDatedTipsProteinEvolverABC_9.getText();
			int Control_9 = 0;
			if (sX_DatedTips_9.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DatedTips_9.length(); i++) // check integer
    					{
        				char c = sX_DatedTips_9.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_9 = Control_9 + 1; // ok
        					}
						}
					}
				if (Error == 0)
					{
					if (Control_9 < 2 && Error == 0)
						{
						System.out.println("DatedTips_9: Incorrect time");
						JOptionPane.showMessageDialog(null, "DatedTips_9: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_9: " + sX_DatedTips_9);
					}
        		} 
			else
				{
				if (thisValue0 > 8 && Error == 0)
					{
					System.out.println("DatedTips_9 must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_9 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
				
			// DatedTips_10
			int Init_Reg1_10 = 0;
			int End_Reg1_10 = 0;
			Init_Reg1_10 = 0;
			End_Reg1_10 = 0;
			String sX_Reg1_10 = TextMultDatedTips_Reg1_10.getText();
			if (sX_Reg1_10.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_10.length(); i++) // check integer
    					{
        				char c = sX_Reg1_10.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_10, initial sample incorrect: " + sX_Reg1_10);
								JOptionPane.showMessageDialog(null, "DatedTips_10, initial sample incorrect: " + sX_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_10 = Integer.parseInt(sX_Reg1_10);
					if (Init_Reg1_10 <= 0)
						{
						System.out.println("DatedTips_10, initial sample cannot be null or negative: " + Init_Reg1_10);
						JOptionPane.showMessageDialog(null, "DatedTips_10, initial sample cannot be null or negative: " + Init_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_10, initial sample: " + sX_Reg1_10);
					}
        		} 
			else
				{
				if (thisValue0 > 9 && Error == 0)
					{
					System.out.println("DatedTips_10, initial sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_10, initial sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_10 = TextMultDatedTips_Reg2_10.getText();
			if (sX_Reg2_10.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_10.length(); i++) // check integer
    					{
        				char c = sX_Reg2_10.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DatedTips_10, final sample incorrect: " + sX_Reg2_10);
								JOptionPane.showMessageDialog(null, "DatedTips_10, final sample incorrect: " + sX_Reg2_10, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_10 = Integer.parseInt(sX_Reg2_10);
					if (End_Reg1_10 <= 0)
						{
						System.out.println("DatedTips_10, final sample cannot be null or negative: " + End_Reg1_10);
						JOptionPane.showMessageDialog(null, "DatedTips_10, final sample cannot be null or negative: " + End_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_10, final sample: " + sX_Reg2_10);
					}
        		} 
			else
				{
				if (thisValue0 > 9 && Error == 0)
					{
					System.out.println("DatedTips_10, final sample must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_10, final sample must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			if (End_Reg1_10 < Init_Reg1_10 && thisValue0 > 9 && Error == 0)
				{
				System.out.println("DatedTips_10, final sample cannot be lower than the initial sample");
				JOptionPane.showMessageDialog(null, "DatedTips_10, final sample cannot be lower than the initial sample", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			
			
			String sX_DatedTips_10 = TextMultDatedTipsProteinEvolverABC_10.getText();
			int Control_10 = 0;
			if (sX_DatedTips_10.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DatedTips_10.length(); i++) // check integer
    					{
        				char c = sX_DatedTips_10.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_10 = Control_10 + 1; // ok
        					}
						}
					}
				if (Error == 0)
					{
					if (Control_10 < 2 && Error == 0)
						{
						System.out.println("DatedTips_10: Incorrect time");
						JOptionPane.showMessageDialog(null, "DatedTips_10: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DatedTips_10: " + sX_DatedTips_10);
					}
        		} 
			else
				{
				if (thisValue0 > 9 && Error == 0)
					{
					System.out.println("DatedTips_10 must be introduced");
					JOptionPane.showMessageDialog(null, "DatedTips_10 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				

		// Checking
			if (Init_Reg1_1 > 0 && Init_Reg1_1 != 1 && Error == 0)
				{
				System.out.println("DatedTips_1, initial sample must be 1");
				JOptionPane.showMessageDialog(null, "DatedTips_1, initial sample must be 1", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}
			if (Init_Reg1_2 > 0 && (Init_Reg1_2 != End_Reg1_1 + 1) && Error == 0)
				{
				System.out.println("DatedTips_2, initial sample must be the end of the previous DatedTips + 1");
				JOptionPane.showMessageDialog(null, "DatedTips_2, initial sample must be the end of the previous DatedTips + 1", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}
			if (Init_Reg1_3 > 0 && (Init_Reg1_3 != End_Reg1_2 + 1) && Error == 0)
				{
				System.out.println("DatedTips_3, initial sample must be the end of the previous DatedTips + 1");
				JOptionPane.showMessageDialog(null, "DatedTips_3, initial sample must be the end of the previous DatedTips + 1", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}
			if (Init_Reg1_4 > 0 && (Init_Reg1_4 != End_Reg1_3 + 1) && Error == 0)
				{
				System.out.println("DatedTips_4, initial sample must be the end of the previous DatedTips + 1");
				JOptionPane.showMessageDialog(null, "DatedTips_4, initial sample must be the end of the previous DatedTips + 1", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}
			if (Init_Reg1_5 > 0 && (Init_Reg1_5 != End_Reg1_4 + 1) && Error == 0)
				{
				System.out.println("DatedTips_5, initial sample must be the end of the previous DatedTips + 1");
				JOptionPane.showMessageDialog(null, "DatedTips_5, initial sample must be the end of the previous DatedTips + 1", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}
			if (Init_Reg1_6 > 0 && (Init_Reg1_6 != End_Reg1_5 + 1) && Error == 0)
				{
				System.out.println("DatedTips_6, initial sample must be the end of the previous DatedTips + 1");
				JOptionPane.showMessageDialog(null, "DatedTips_6, initial sample must be the end of the previous DatedTips + 1", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}
			if (Init_Reg1_7 > 0 && (Init_Reg1_7 != End_Reg1_6 + 1) && Error == 0)
				{
				System.out.println("DatedTips_7, initial sample must be the end of the previous DatedTips + 1");
				JOptionPane.showMessageDialog(null, "DatedTips_7, initial sample must be the end of the previous DatedTips + 1", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}
			if (Init_Reg1_8 > 0 && (Init_Reg1_8 != End_Reg1_7 + 1) && Error == 0)
				{
				System.out.println("DatedTips_8, initial sample must be the end of the previous DatedTips + 1");
				JOptionPane.showMessageDialog(null, "DatedTips_8, initial sample must be the end of the previous DatedTips + 1", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}
			if (Init_Reg1_9 > 0 && (Init_Reg1_9 != End_Reg1_8 + 1) && Error == 0)
				{
				System.out.println("DatedTips_9, initial sample must be the end of the previous DatedTips + 1");
				JOptionPane.showMessageDialog(null, "DatedTips_9, initial sample must be the end of the previous DatedTips + 1", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}
			if (Init_Reg1_10 > 0 && (Init_Reg1_10 != End_Reg1_9 + 1) && Error == 0)
				{
				System.out.println("DatedTips_10, initial sample must be the end of the previous DatedTips + 1");
				JOptionPane.showMessageDialog(null, "DatedTips_10, initial sample must be the end of the previous DatedTips + 1", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}	

			int MaxNumberTip = 0;
			if (End_Reg1_1 > 0)
				{
				MaxNumberTip = End_Reg1_1;
				}	
			if (End_Reg1_2 > 0)
				{
				MaxNumberTip = End_Reg1_2;
				}
			if (End_Reg1_3 > 0)
				{
				MaxNumberTip = End_Reg1_3;
				}
			if (End_Reg1_4 > 0)
				{
				MaxNumberTip = End_Reg1_4;
				}
			if (End_Reg1_5 > 0)
				{
				MaxNumberTip = End_Reg1_5;
				}
			if (End_Reg1_6 > 0)
				{
				MaxNumberTip = End_Reg1_6;
				}
			if (End_Reg1_7 > 0)
				{
				MaxNumberTip = End_Reg1_7;
				}
			if (End_Reg1_8 > 0)
				{
				MaxNumberTip = End_Reg1_8;
				}
			if (End_Reg1_9 > 0)
				{
				MaxNumberTip = End_Reg1_9;
				}
			if (End_Reg1_10 > 0)
				{
				MaxNumberTip = End_Reg1_10;
				}		

			// We need sample size here to check
			if (MaxNumberTip != SampleSize && Error == 0)
				{
				System.out.println("The number of samples in DatedTips: " + MaxNumberTip + " should be equal to the sample size: " + SampleSize);
				JOptionPane.showMessageDialog(null, "The number of samples in DatedTips should be equal to the sample size: " + SampleSize, " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}

			
			if (Error == 0)
				{
				String Here1_1 = TextMultDatedTips_Reg1_1.getText();
				String Here2_1 = TextMultDatedTips_Reg2_1.getText();
				String Here3_1 = TextMultDatedTipsProteinEvolverABC_1.getText();
				ProteinEvolverABC_InputDatedTips_Mult1 = Here3_1 + " " + Here1_1 + " " + Here2_1;
				
				String Here1_2 = TextMultDatedTips_Reg1_2.getText();
				String Here2_2 = TextMultDatedTips_Reg2_2.getText();
				String Here3_2 = TextMultDatedTipsProteinEvolverABC_2.getText();
				ProteinEvolverABC_InputDatedTips_Mult2 = Here3_2 + " " + Here1_2 + " " + Here2_2;
				
				String Here1_3 = TextMultDatedTips_Reg1_3.getText();
				String Here2_3 = TextMultDatedTips_Reg2_3.getText();
				String Here3_3 = TextMultDatedTipsProteinEvolverABC_3.getText();
				ProteinEvolverABC_InputDatedTips_Mult3 = Here3_3 + " " + Here1_3 + " " + Here2_3;
				
				String Here1_4 = TextMultDatedTips_Reg1_4.getText();
				String Here2_4 = TextMultDatedTips_Reg2_4.getText();
				String Here3_4 = TextMultDatedTipsProteinEvolverABC_4.getText();
				ProteinEvolverABC_InputDatedTips_Mult4 = Here3_4 + " " + Here1_4 + " " + Here2_4;
				
				String Here1_5 = TextMultDatedTips_Reg1_5.getText();
				String Here2_5 = TextMultDatedTips_Reg2_5.getText();
				String Here3_5 = TextMultDatedTipsProteinEvolverABC_5.getText();
				ProteinEvolverABC_InputDatedTips_Mult5 = Here3_5 + " " + Here1_5 + " " + Here2_5;
				
				String Here1_6 = TextMultDatedTips_Reg1_6.getText();
				String Here2_6 = TextMultDatedTips_Reg2_6.getText();
				String Here3_6 = TextMultDatedTipsProteinEvolverABC_6.getText();
				ProteinEvolverABC_InputDatedTips_Mult6 = Here3_6 + " " + Here1_6 + " " + Here2_6;
				
				String Here1_7 = TextMultDatedTips_Reg1_7.getText();
				String Here2_7 = TextMultDatedTips_Reg2_7.getText();
				String Here3_7 = TextMultDatedTipsProteinEvolverABC_7.getText();
				ProteinEvolverABC_InputDatedTips_Mult7 = Here3_7 + " " + Here1_7 + " " + Here2_7;
				
				String Here1_8 = TextMultDatedTips_Reg1_8.getText();
				String Here2_8 = TextMultDatedTips_Reg2_8.getText();
				String Here3_8 = TextMultDatedTipsProteinEvolverABC_8.getText();
				ProteinEvolverABC_InputDatedTips_Mult8 = Here3_8 + " " + Here1_8 + " " + Here2_8;
				
				String Here1_9 = TextMultDatedTips_Reg1_9.getText();
				String Here2_9 = TextMultDatedTips_Reg2_9.getText();
				String Here3_9 = TextMultDatedTipsProteinEvolverABC_9.getText();
				ProteinEvolverABC_InputDatedTips_Mult9 = Here3_9 + " " + Here1_9 + " " + Here2_9;
				
				String Here1_10 = TextMultDatedTips_Reg1_10.getText();
				String Here2_10 = TextMultDatedTips_Reg2_10.getText();
				String Here3_10 = TextMultDatedTipsProteinEvolverABC_10.getText();
				ProteinEvolverABC_InputDatedTips_Mult10 = Here3_10 + " " + Here1_10 + " " + Here2_10;
				
				System.out.println("DatedTips_1: " + ProteinEvolverABC_InputDatedTips_Mult1);
				System.out.println("DatedTips_2: " + ProteinEvolverABC_InputDatedTips_Mult2);
				System.out.println("DatedTips_3: " + ProteinEvolverABC_InputDatedTips_Mult3);
				System.out.println("DatedTips_4: " + ProteinEvolverABC_InputDatedTips_Mult4);
				System.out.println("DatedTips_5: " + ProteinEvolverABC_InputDatedTips_Mult5);
				System.out.println("DatedTips_6: " + ProteinEvolverABC_InputDatedTips_Mult6);
				System.out.println("DatedTips_7: " + ProteinEvolverABC_InputDatedTips_Mult7);
				System.out.println("DatedTips_8: " + ProteinEvolverABC_InputDatedTips_Mult8);
				System.out.println("DatedTips_9: " + ProteinEvolverABC_InputDatedTips_Mult9);
				System.out.println("DatedTips_10: " + ProteinEvolverABC_InputDatedTips_Mult10);
				
				if (thisValue0 == 0)
					{
					System.out.println("Strange error in DatepTips DatedTips. thisValue0 = " + thisValue0);
					JOptionPane.showMessageDialog(null, "Strange error in DatepTips DatedTips. thisValue0 = " + thisValue0 ," ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				if (thisValue0 == 1)
					{
					System.out.println("More than 1 DatepTips is required to use DatepTips");
					JOptionPane.showMessageDialog(null, "More than 1 DatepTips is required to use DatepTips", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				if (thisValue0 == 2 && Error == 0)
					{
					ProteinEvolverABC_DatedTips = "DatedTips=" + sX0 + " " + ProteinEvolverABC_InputDatedTips_Mult1 + " " + ProteinEvolverABC_InputDatedTips_Mult2;
					}
				if (thisValue0 == 3 && Error == 0)
					{
					ProteinEvolverABC_DatedTips = "DatedTips=" + sX0 + " " + ProteinEvolverABC_InputDatedTips_Mult1 + " " + ProteinEvolverABC_InputDatedTips_Mult2 + " " + ProteinEvolverABC_InputDatedTips_Mult3;
					}
				if (thisValue0 == 4 && Error == 0)
					{
					ProteinEvolverABC_DatedTips = "DatedTips=" + sX0 + " " + ProteinEvolverABC_InputDatedTips_Mult1 + " " + ProteinEvolverABC_InputDatedTips_Mult2 + " " + ProteinEvolverABC_InputDatedTips_Mult3 + " " + ProteinEvolverABC_InputDatedTips_Mult4;
					}
				if (thisValue0 == 5 && Error == 0)
					{
					ProteinEvolverABC_DatedTips = "DatedTips=" + sX0 + " " + ProteinEvolverABC_InputDatedTips_Mult1 + " " + ProteinEvolverABC_InputDatedTips_Mult2 + " " + ProteinEvolverABC_InputDatedTips_Mult3 + " " + ProteinEvolverABC_InputDatedTips_Mult4 + " " + ProteinEvolverABC_InputDatedTips_Mult5;
					}
				if (thisValue0 == 6 && Error == 0)
					{
					ProteinEvolverABC_DatedTips = "DatedTips=" + sX0 + " " + ProteinEvolverABC_InputDatedTips_Mult1 + " " + ProteinEvolverABC_InputDatedTips_Mult2 + " " + ProteinEvolverABC_InputDatedTips_Mult3 + " " + ProteinEvolverABC_InputDatedTips_Mult4 + " " + ProteinEvolverABC_InputDatedTips_Mult5 + " " + ProteinEvolverABC_InputDatedTips_Mult6;
					}
				if (thisValue0 == 7 && Error == 0)
					{
					ProteinEvolverABC_DatedTips = "DatedTips=" + sX0 + " " + ProteinEvolverABC_InputDatedTips_Mult1 + " " + ProteinEvolverABC_InputDatedTips_Mult2 + " " + ProteinEvolverABC_InputDatedTips_Mult3 + " " + ProteinEvolverABC_InputDatedTips_Mult4 + " " + ProteinEvolverABC_InputDatedTips_Mult5 + " " + ProteinEvolverABC_InputDatedTips_Mult6 + " " + ProteinEvolverABC_InputDatedTips_Mult7;
					}
				if (thisValue0 == 8 && Error == 0)
					{
					ProteinEvolverABC_DatedTips = "DatedTips=" + sX0 + " " + ProteinEvolverABC_InputDatedTips_Mult1 + " " + ProteinEvolverABC_InputDatedTips_Mult2 + " " + ProteinEvolverABC_InputDatedTips_Mult3 + " " + ProteinEvolverABC_InputDatedTips_Mult4 + " " + ProteinEvolverABC_InputDatedTips_Mult5 + " " + ProteinEvolverABC_InputDatedTips_Mult6 + " " + ProteinEvolverABC_InputDatedTips_Mult7 + " " + ProteinEvolverABC_InputDatedTips_Mult8;
					}
				if (thisValue0 == 9 && Error == 0)
					{
					ProteinEvolverABC_DatedTips = "DatedTips=" + sX0 + " " + ProteinEvolverABC_InputDatedTips_Mult1 + " " + ProteinEvolverABC_InputDatedTips_Mult2 + " " + ProteinEvolverABC_InputDatedTips_Mult3 + " " + ProteinEvolverABC_InputDatedTips_Mult4 + " " + ProteinEvolverABC_InputDatedTips_Mult5 + " " + ProteinEvolverABC_InputDatedTips_Mult6 + " " + ProteinEvolverABC_InputDatedTips_Mult7 + " " + ProteinEvolverABC_InputDatedTips_Mult8 + " " + ProteinEvolverABC_InputDatedTips_Mult9;
					}
				if (thisValue0 == 10 && Error == 0)
					{
					ProteinEvolverABC_DatedTips = "DatedTips=" + sX0 + " " + ProteinEvolverABC_InputDatedTips_Mult1 + " " + ProteinEvolverABC_InputDatedTips_Mult2 + " " + ProteinEvolverABC_InputDatedTips_Mult3 + " " + ProteinEvolverABC_InputDatedTips_Mult4 + " " + ProteinEvolverABC_InputDatedTips_Mult5 + " " + ProteinEvolverABC_InputDatedTips_Mult6 + " " + ProteinEvolverABC_InputDatedTips_Mult7 + " " + ProteinEvolverABC_InputDatedTips_Mult8 + " " + ProteinEvolverABC_InputDatedTips_Mult9 + " " + ProteinEvolverABC_InputDatedTips_Mult10;
					}
	
				
				if (Error == 0)
					{
					SavedMultDatedTips = 1;
					label4ee.setText("Dated tips were saved");
					label4ee.setVisible(true); // Dated tips saved
					System.out.println("ProteinEvolverABC_DatedTips: " + ProteinEvolverABC_DatedTips);
					MultDatedTipsWindow.setVisible(false);
					MultDatedTipsWindow.dispose();
					System.out.println("SavedMultDatedTips: " + SavedMultDatedTips);
					}
				}
			}
		}




			
// runButtonMultDemogPeriodsExitHandler button
	public class runButtonMultDemogPeriodsExitHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			VariablePopSize.setSelectedItem("No");
			TextGrowthRateProteinEvolverABC.setVisible(false);
			TextGrowthRateProteinEvolverABC.setText("");
			label4eee.setText("");
			label4eee.setVisible(false); // Demog not saved
			ProteinEvolverABC_DemogPeriods = "#DemographicPeriods=1 1 10 100 500";
			ProteinEvolverABC_DemogPeriodsStructPop_CTE = "#DemographicsSpeciesTree_ConstantPops=2 7 1000 500 900 800 1300 1000 700";
			ProteinEvolverABC_DemogPeriodsStructPop_VARY = "#DemographicsSpeciesTree_VariablePops=3 7 1000 1200 500 600 900 1000 100 200 800 900 2000 1900 900";
			
			MultDemogPeriodsWindow.setVisible(false);
			MultDemogPeriodsWindow.dispose();
			System.out.println("Do not demographic periods: " + ProteinEvolverABC_DemogPeriods);
			}
		}

	

	// runButtonMultDemogPeriodsSaveNextHandler button
	public class runButtonMultDemogPeriodsSaveNextHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			Error = 0;
			
			String ProteinEvolverABC_InputDemogPeriods_Mult1 = "";
			String ProteinEvolverABC_InputDemogPeriods_Mult2 = "";
			String ProteinEvolverABC_InputDemogPeriods_Mult3 = "";
			String ProteinEvolverABC_InputDemogPeriods_Mult4 = "";
			String ProteinEvolverABC_InputDemogPeriods_Mult5 = "";
			String ProteinEvolverABC_InputDemogPeriods_Mult6 = "";
			String ProteinEvolverABC_InputDemogPeriods_Mult7 = "";
			String ProteinEvolverABC_InputDemogPeriods_Mult8 = "";
			String ProteinEvolverABC_InputDemogPeriods_Mult9 = "";
			String ProteinEvolverABC_InputDemogPeriods_Mult10 = "";

			// Number Of DemogPeriods
			String sX0 = TextNumberOfMultDemogPeriodsProteinEvolverABC.getText();
			int thisValue0 = 0;
			if (sX0.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX0.length(); i++) // check integer
    					{
        				char c = sX0.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Number of demographic periods is incorrect: " + sX0);
								JOptionPane.showMessageDialog(null, "Number of demographic periods is incorrect: " + sX0, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					thisValue0 = Integer.parseInt(sX0);
					if (thisValue0 <= 0)
						{
						System.out.println("Number of demographic periods cannot be null or negative: " + thisValue0);
						JOptionPane.showMessageDialog(null, "Number of demographic periods cannot be null or negative: " + thisValue0, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Number of DemogPeriods: " + sX0);
					}
        		} 
			else
				{
				System.out.println("Number of demographic periods must be introduced");
				JOptionPane.showMessageDialog(null, "Number of demographic periods must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			


			// DemogPeriods_1
			int Init_Reg1_1 = 0;
			int End_Reg1_1 = 0;
			Init_Reg1_1 = 0;
			End_Reg1_1 = 0;
			String sX_Reg1_1 = TextMultDemogPeriods_Reg1_1.getText();
			if (sX_Reg1_1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_1.length(); i++) // check integer
    					{
        				char c = sX_Reg1_1.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_1, initial population size incorrect: " + sX_Reg1_1);
								JOptionPane.showMessageDialog(null, "DemogPeriods_1, initial population size incorrect: " + sX_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_1 = Integer.parseInt(sX_Reg1_1);
					if (Init_Reg1_1 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriods_1, initial population size cannot be null or negative: " + Init_Reg1_1);
						JOptionPane.showMessageDialog(null, "DemogPeriods_1, initial population size cannot be null or negative: " + Init_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_1, initial population size: " + sX_Reg1_1);
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("DemogPeriods_1, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_1, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_1 = TextMultDemogPeriods_Reg2_1.getText();
			if (sX_Reg2_1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_1.length(); i++) // check integer
    					{
        				char c = sX_Reg2_1.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_1, final population size incorrect: " + sX_Reg2_1);
								JOptionPane.showMessageDialog(null, "DemogPeriods_1, final population size incorrect: " + sX_Reg2_1, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_1 = Integer.parseInt(sX_Reg2_1);
					if (End_Reg1_1 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriods_1, final population size cannot be null or negative: " + End_Reg1_1);
						JOptionPane.showMessageDialog(null, "DemogPeriods_1, final population size cannot be null or negative: " + End_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_1, final population size: " + sX_Reg2_1);
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("DemogPeriods_1, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_1, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_DemogPeriods_1 = TextMultDemogPeriodsProteinEvolverABC_1.getText();
			int Control_1 = 0;
			if (sX_DemogPeriods_1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DemogPeriods_1.length(); i++) // check integer
    					{
        				char c = sX_DemogPeriods_1.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_1 = Control_1 + 1; // ok
        					}
        				
						}
					}
				if (Error == 0)
					{
					if (Control_1 < 2 && Error == 0)
						{
						System.out.println("DemogPeriods_1: Incorrect time");
						JOptionPane.showMessageDialog(null, "DemogPeriods_1: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_1: " + sX_DemogPeriods_1);
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("DemogPeriods_1 must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_1 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			
			// DemogPeriods_2
			int Init_Reg1_2 = 0;
			int End_Reg1_2 = 0;
			Init_Reg1_2 = 0;
			End_Reg1_2 = 0;
			String sX_Reg1_2 = TextMultDemogPeriods_Reg1_2.getText();
			if (sX_Reg1_2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_2.length(); i++) // check integer
    					{
        				char c = sX_Reg1_2.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_2, initial population size incorrect: " + sX_Reg1_2);
								JOptionPane.showMessageDialog(null, "DemogPeriods_2, initial population size incorrect: " + sX_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_2 = Integer.parseInt(sX_Reg1_2);
					if (Init_Reg1_2 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriods_2, initial population size cannot be null or negative: " + Init_Reg1_2);
						JOptionPane.showMessageDialog(null, "DemogPeriods_2, initial population size cannot be null or negative: " + Init_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_2, initial population size: " + sX_Reg1_2);
					}
        		} 
			else
				{
				if (thisValue0 > 1 && Error == 0)
					{
					System.out.println("DemogPeriods_2, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_2, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_2 = TextMultDemogPeriods_Reg2_2.getText();
			if (sX_Reg2_2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_2.length(); i++) // check integer
    					{
        				char c = sX_Reg2_2.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_2, final population size incorrect: " + sX_Reg2_2);
								JOptionPane.showMessageDialog(null, "DemogPeriods_2, final population size incorrect: " + sX_Reg2_2, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_2 = Integer.parseInt(sX_Reg2_2);
					if (End_Reg1_2 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriods_2, final population size cannot be null or negative: " + End_Reg1_2);
						JOptionPane.showMessageDialog(null, "DemogPeriods_2, final population size cannot be null or negative: " + End_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_2, final population size: " + sX_Reg2_2);
					}
        		} 
			else
				{
				if (thisValue0 > 1 && Error == 0)
					{
					System.out.println("DemogPeriods_2, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_2, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_DemogPeriods_2 = TextMultDemogPeriodsProteinEvolverABC_2.getText();
			int Control_2 = 0;
			if (sX_DemogPeriods_2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DemogPeriods_2.length(); i++) // check integer
    					{
        				char c = sX_DemogPeriods_2.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_2 = Control_2 + 1; // ok
        					}
						}
					}
				if (Error == 0)
					{
					if (Control_2 < 2 && Error == 0)
						{
						System.out.println("DemogPeriods_2: Incorrect time");
						JOptionPane.showMessageDialog(null, "DemogPeriods_2: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_2: " + sX_DemogPeriods_2);
					}
        		} 
			else
				{
				if (thisValue0 > 1 && Error == 0)
					{
					System.out.println("DemogPeriods_2 must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_2 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			
			// DemogPeriods_3
			int Init_Reg1_3 = 0;
			int End_Reg1_3 = 0;
			Init_Reg1_3 = 0;
			End_Reg1_3 = 0;
			String sX_Reg1_3 = TextMultDemogPeriods_Reg1_3.getText();
			if (sX_Reg1_3.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_3.length(); i++) // check integer
    					{
        				char c = sX_Reg1_3.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_3, initial population size incorrect: " + sX_Reg1_3);
								JOptionPane.showMessageDialog(null, "DemogPeriods_3, initial population size incorrect: " + sX_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_3 = Integer.parseInt(sX_Reg1_3);
					if (Init_Reg1_3 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriods_3, initial population size cannot be null or negative: " + Init_Reg1_3);
						JOptionPane.showMessageDialog(null, "DemogPeriods_3, initial population size cannot be null or negative: " + Init_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_3, initial population size: " + sX_Reg1_3);
					}
        		} 
			else
				{
				if (thisValue0 > 2 && Error == 0)
					{
					System.out.println("DemogPeriods_3, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_3, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_3 = TextMultDemogPeriods_Reg2_3.getText();
			if (sX_Reg2_3.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_3.length(); i++) // check integer
    					{
        				char c = sX_Reg2_3.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_3, final population size incorrect: " + sX_Reg2_3);
								JOptionPane.showMessageDialog(null, "DemogPeriods_3, final population size incorrect: " + sX_Reg2_3, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_3 = Integer.parseInt(sX_Reg2_3);
					if (End_Reg1_3 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriods_3, final population size cannot be null or negative: " + End_Reg1_3);
						JOptionPane.showMessageDialog(null, "DemogPeriods_3, final population size cannot be null or negative: " + End_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_3, final population size: " + sX_Reg2_3);
					}
        		} 
			else
				{
				if (thisValue0 > 2 && Error == 0)
					{
					System.out.println("DemogPeriods_3, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_3, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_DemogPeriods_3 = TextMultDemogPeriodsProteinEvolverABC_3.getText();
			int Control_3 = 0;
			if (sX_DemogPeriods_3.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DemogPeriods_3.length(); i++) // check integer
    					{
        				char c = sX_DemogPeriods_3.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_3 = Control_3 + 1; // ok
        					}
        				
						}
					}
				if (Error == 0)
					{
					if (Control_3 < 2 && Error == 0)
						{
						System.out.println("DemogPeriods_3: Incorrect time");
						JOptionPane.showMessageDialog(null, "DemogPeriods_3: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_3: " + sX_DemogPeriods_3);
					}
        		} 
			else
				{
				if (thisValue0 > 2 && Error == 0)
					{
					System.out.println("DemogPeriods_3 must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_3 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
		
		
			// DemogPeriods_4
			int Init_Reg1_4 = 0;
			int End_Reg1_4 = 0;
			Init_Reg1_4 = 0;
			End_Reg1_4 = 0;
			String sX_Reg1_4 = TextMultDemogPeriods_Reg1_4.getText();
			if (sX_Reg1_4.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_4.length(); i++) // check integer
    					{
        				char c = sX_Reg1_4.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_4, initial population size incorrect: " + sX_Reg1_4);
								JOptionPane.showMessageDialog(null, "DemogPeriods_4, initial population size incorrect: " + sX_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_4 = Integer.parseInt(sX_Reg1_4);
					if (Init_Reg1_4 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriods_4, initial population size cannot be null or negative: " + Init_Reg1_4);
						JOptionPane.showMessageDialog(null, "DemogPeriods_4, initial population size cannot be null or negative: " + Init_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_4, initial population size: " + sX_Reg1_4);
					}
        		} 
			else
				{
				if (thisValue0 > 3 && Error == 0)
					{
					System.out.println("DemogPeriods_4, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_4, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_4 = TextMultDemogPeriods_Reg2_4.getText();
			if (sX_Reg2_4.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_4.length(); i++) // check integer
    					{
        				char c = sX_Reg2_4.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_4, final population size incorrect: " + sX_Reg2_4);
								JOptionPane.showMessageDialog(null, "DemogPeriods_4, final population size incorrect: " + sX_Reg2_4, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_4 = Integer.parseInt(sX_Reg2_4);
					if (End_Reg1_4 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriods_4, final population size cannot be null or negative: " + End_Reg1_4);
						JOptionPane.showMessageDialog(null, "DemogPeriods_4, final population size cannot be null or negative: " + End_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_4, final population size: " + sX_Reg2_4);
					}
        		} 
			else
				{
				if (thisValue0 > 3 && Error == 0)
					{
					System.out.println("DemogPeriods_4, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_4, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_DemogPeriods_4 = TextMultDemogPeriodsProteinEvolverABC_4.getText();
			int Control_4 = 0;
			if (sX_DemogPeriods_4.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DemogPeriods_4.length(); i++) // check integer
    					{
        				char c = sX_DemogPeriods_4.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_4 = Control_4 + 1; // ok
        					}
        				
						}
					}
				if (Error == 0)
					{
					if (Control_4 < 2 && Error == 0)
						{
						System.out.println("DemogPeriods_4: Incorrect time");
						JOptionPane.showMessageDialog(null, "DemogPeriods_4: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_4: " + sX_DemogPeriods_4);
					}
        		} 
			else
				{
				if (thisValue0 > 3 && Error == 0)
					{
					System.out.println("DemogPeriods_4 must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_4 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
		
	
		// DemogPeriods_5
			int Init_Reg1_5 = 0;
			int End_Reg1_5 = 0;
			Init_Reg1_5 = 0;
			End_Reg1_5 = 0;
			String sX_Reg1_5 = TextMultDemogPeriods_Reg1_5.getText();
			if (sX_Reg1_5.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_5.length(); i++) // check integer
    					{
        				char c = sX_Reg1_5.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_5, initial population size incorrect: " + sX_Reg1_5);
								JOptionPane.showMessageDialog(null, "DemogPeriods_5, initial population size incorrect: " + sX_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_5 = Integer.parseInt(sX_Reg1_5);
					if (Init_Reg1_5 <= 0)
						{
						System.out.println("DemogPeriods_5, initial population size cannot be null or negative: " + Init_Reg1_5);
						JOptionPane.showMessageDialog(null, "DemogPeriods_5, initial population size cannot be null or negative: " + Init_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_5, initial population size: " + sX_Reg1_5);
					}
        		} 
			else
				{
				if (thisValue0 > 4 && Error == 0)
					{
					System.out.println("DemogPeriods_5, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_5, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_5 = TextMultDemogPeriods_Reg2_5.getText();
			if (sX_Reg2_5.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_5.length(); i++) // check integer
    					{
        				char c = sX_Reg2_5.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_5, final population size incorrect: " + sX_Reg2_5);
								JOptionPane.showMessageDialog(null, "DemogPeriods_5, final population size incorrect: " + sX_Reg2_5, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_5 = Integer.parseInt(sX_Reg2_5);
					if (End_Reg1_5 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriods_5, final population size cannot be null or negative: " + End_Reg1_5);
						JOptionPane.showMessageDialog(null, "DemogPeriods_5, final population size cannot be null or negative: " + End_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_5, final population size: " + sX_Reg2_5);
					}
        		} 
			else
				{
				if (thisValue0 > 4 && Error == 0)
					{
					System.out.println("DemogPeriods_5, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_5, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_DemogPeriods_5 = TextMultDemogPeriodsProteinEvolverABC_5.getText();
			int Control_5 = 0;
			if (sX_DemogPeriods_5.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DemogPeriods_5.length(); i++) // check integer
    					{
        				char c = sX_DemogPeriods_5.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_5 = Control_5 + 1; // ok
        					}
        				
						}
					}
				if (Error == 0)
					{
					if (Control_5 < 2 && Error == 0)
						{
						System.out.println("DemogPeriods_5: Incorrect time");
						JOptionPane.showMessageDialog(null, "DemogPeriods_5: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_5: " + sX_DemogPeriods_5);
					}
        		} 
			else
				{
				if (thisValue0 > 4 && Error == 0)
					{
					System.out.println("DemogPeriods_5 must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_5 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// DemogPeriods_6
			int Init_Reg1_6 = 0;
			int End_Reg1_6 = 0;
			Init_Reg1_6 = 0;
			End_Reg1_6 = 0;
			String sX_Reg1_6 = TextMultDemogPeriods_Reg1_6.getText();
			if (sX_Reg1_6.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_6.length(); i++) // check integer
    					{
        				char c = sX_Reg1_6.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_6, initial population size incorrect: " + sX_Reg1_6);
								JOptionPane.showMessageDialog(null, "DemogPeriods_6, initial population size incorrect: " + sX_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_6 = Integer.parseInt(sX_Reg1_6);
					if (Init_Reg1_6 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriods_6, initial population size cannot be null or negative: " + Init_Reg1_6);
						JOptionPane.showMessageDialog(null, "DemogPeriods_6, initial population size cannot be null or negative: " + Init_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_6, initial population size: " + sX_Reg1_6);
					}
        		} 
			else
				{
				if (thisValue0 > 5 && Error == 0)
					{
					System.out.println("DemogPeriods_6, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_6, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_6 = TextMultDemogPeriods_Reg2_6.getText();
			if (sX_Reg2_6.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_6.length(); i++) // check integer
    					{
        				char c = sX_Reg2_6.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_6, final population size incorrect: " + sX_Reg2_6);
								JOptionPane.showMessageDialog(null, "DemogPeriods_6, final population size incorrect: " + sX_Reg2_6, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_6 = Integer.parseInt(sX_Reg2_6);
					if (End_Reg1_6 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriods_6, final population size cannot be null or negative: " + End_Reg1_6);
						JOptionPane.showMessageDialog(null, "DemogPeriods_6, final population size cannot be null or negative: " + End_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_6, final population size: " + sX_Reg2_6);
					}
        		} 
			else
				{
				if (thisValue0 > 5 && Error == 0)
					{
					System.out.println("DemogPeriods_6, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_6, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_DemogPeriods_6 = TextMultDemogPeriodsProteinEvolverABC_6.getText();
			int Control_6 = 0;
			if (sX_DemogPeriods_6.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DemogPeriods_6.length(); i++) // check integer
    					{
        				char c = sX_DemogPeriods_6.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_6 = Control_6 + 1; // ok
        					}
        				
						}
					}
				if (Error == 0)
					{
					if (Control_6 < 2 && Error == 0)
						{
						System.out.println("DemogPeriods_6: Incorrect time");
						JOptionPane.showMessageDialog(null, "DemogPeriods_6: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_6: " + sX_DemogPeriods_6);
					}
        		} 
			else
				{
				if (thisValue0 > 5 && Error == 0)
					{
					System.out.println("DemogPeriods_6 must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_6 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// DemogPeriods_7
			int Init_Reg1_7 = 0;
			int End_Reg1_7 = 0;
			Init_Reg1_7 = 0;
			End_Reg1_7 = 0;
			String sX_Reg1_7 = TextMultDemogPeriods_Reg1_7.getText();
			if (sX_Reg1_7.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_7.length(); i++) // check integer
    					{
        				char c = sX_Reg1_7.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_7, initial population size incorrect: " + sX_Reg1_7);
								JOptionPane.showMessageDialog(null, "DemogPeriods_7, initial population size incorrect: " + sX_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_7 = Integer.parseInt(sX_Reg1_7);
					if (Init_Reg1_7 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriods_7, initial population size cannot be null or negative: " + Init_Reg1_7);
						JOptionPane.showMessageDialog(null, "DemogPeriods_7, initial population size cannot be null or negative: " + Init_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_7, initial population size: " + sX_Reg1_7);
					}
        		} 
			else
				{
				if (thisValue0 > 6 && Error == 0)
					{
					System.out.println("DemogPeriods_7, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_7, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_7 = TextMultDemogPeriods_Reg2_7.getText();
			if (sX_Reg2_7.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_7.length(); i++) // check integer
    					{
        				char c = sX_Reg2_7.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_7, final population size incorrect: " + sX_Reg2_7);
								JOptionPane.showMessageDialog(null, "DemogPeriods_7, final population size incorrect: " + sX_Reg2_7, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_7 = Integer.parseInt(sX_Reg2_7);
					if (End_Reg1_7 <= 0)
						{
						System.out.println("DemogPeriods_7, final population size cannot be null or negative: " + End_Reg1_7);
						JOptionPane.showMessageDialog(null, "DemogPeriods_7, final population size cannot be null or negative: " + End_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_7, final population size: " + sX_Reg2_7);
					}
        		} 
			else
				{
				if (thisValue0 > 6 && Error == 0)
					{
					System.out.println("DemogPeriods_7, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_7, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_DemogPeriods_7 = TextMultDemogPeriodsProteinEvolverABC_7.getText();
			int Control_7 = 0;
			if (sX_DemogPeriods_7.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DemogPeriods_7.length(); i++) // check integer
    					{
        				char c = sX_DemogPeriods_7.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_7 = Control_7 + 1; // ok
        					}
        				}
					}
				if (Error == 0)
					{
					if (Control_7 < 2 && Error == 0)
						{
						System.out.println("DemogPeriods_7: Incorrect time");
						JOptionPane.showMessageDialog(null, "DemogPeriods_7: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_7: " + sX_DemogPeriods_7);
					}
        		} 
			else
				{
				if (thisValue0 > 6 && Error == 0)
					{
					System.out.println("DemogPeriods_7 must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_7 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// DemogPeriods_8
			int Init_Reg1_8 = 0;
			int End_Reg1_8 = 0;
			Init_Reg1_8 = 0;
			End_Reg1_8 = 0;
			String sX_Reg1_8 = TextMultDemogPeriods_Reg1_8.getText();
			if (sX_Reg1_8.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_8.length(); i++) // check integer
    					{
        				char c = sX_Reg1_8.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_8, initial population size incorrect: " + sX_Reg1_8);
								JOptionPane.showMessageDialog(null, "DemogPeriods_8, initial population size incorrect: " + sX_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_8 = Integer.parseInt(sX_Reg1_8);
					if (Init_Reg1_8 <= 0)
						{
						System.out.println("DemogPeriods_8, initial population size cannot be null or negative: " + Init_Reg1_8);
						JOptionPane.showMessageDialog(null, "DemogPeriods_8, initial population size cannot be null or negative: " + Init_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_8, initial population size: " + sX_Reg1_8);
					}
        		} 
			else
				{
				if (thisValue0 > 7 && Error == 0)
					{
					System.out.println("DemogPeriods_8, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_8, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_8 = TextMultDemogPeriods_Reg2_8.getText();
			if (sX_Reg2_8.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_8.length(); i++) // check integer
    					{
        				char c = sX_Reg2_8.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_8, final population size incorrect: " + sX_Reg2_8);
								JOptionPane.showMessageDialog(null, "DemogPeriods_8, final population size incorrect: " + sX_Reg2_8, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_8 = Integer.parseInt(sX_Reg2_8);
					if (End_Reg1_8 <= 0)
						{
						System.out.println("DemogPeriods_8, final population size cannot be null or negative: " + End_Reg1_8);
						JOptionPane.showMessageDialog(null, "DemogPeriods_8, final population size cannot be null or negative: " + End_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_8, final population size: " + sX_Reg2_8);
					}
        		} 
			else
				{
				if (thisValue0 > 7 && Error == 0)
					{
					System.out.println("DemogPeriods_8, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_8, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_DemogPeriods_8 = TextMultDemogPeriodsProteinEvolverABC_8.getText();
			int Control_8 = 0;
			if (sX_DemogPeriods_8.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DemogPeriods_8.length(); i++) // check integer
    					{
        				char c = sX_DemogPeriods_8.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_8 = Control_8 + 1; // ok
        					}
						}
					}
				if (Error == 0)
					{
					if (Control_8 < 2 && Error == 0)
						{
						System.out.println("DemogPeriods_8: Incorrect time");
						JOptionPane.showMessageDialog(null, "DemogPeriods_8: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_8: " + sX_DemogPeriods_8);
					}
        		} 
			else
				{
				if (thisValue0 > 7 && Error == 0)
					{
					System.out.println("DemogPeriods_8 must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_8 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// DemogPeriods_9
			int Init_Reg1_9 = 0;
			int End_Reg1_9 = 0;
			Init_Reg1_9 = 0;
			End_Reg1_9 = 0;
			String sX_Reg1_9 = TextMultDemogPeriods_Reg1_9.getText();
			if (sX_Reg1_9.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_9.length(); i++) // check integer
    					{
        				char c = sX_Reg1_9.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_9, initial population size incorrect: " + sX_Reg1_9);
								JOptionPane.showMessageDialog(null, "DemogPeriods_9, initial population size incorrect: " + sX_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_9 = Integer.parseInt(sX_Reg1_9);
					if (Init_Reg1_9 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriods_9, initial population size cannot be null or negative: " + Init_Reg1_9);
						JOptionPane.showMessageDialog(null, "DemogPeriods_9, initial population size cannot be null or negative: " + Init_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_9, initial population size: " + sX_Reg1_9);
					}
        		} 
			else
				{
				if (thisValue0 > 8 && Error == 0)
					{
					System.out.println("DemogPeriods_9, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_9, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_9 = TextMultDemogPeriods_Reg2_9.getText();
			if (sX_Reg2_9.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_9.length(); i++) // check integer
    					{
        				char c = sX_Reg2_9.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_9, final population size incorrect: " + sX_Reg2_9);
								JOptionPane.showMessageDialog(null, "DemogPeriods_9, final population size incorrect: " + sX_Reg2_9, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_9 = Integer.parseInt(sX_Reg2_9);
					if (End_Reg1_9 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriods_9, final population size cannot be null or negative: " + End_Reg1_9);
						JOptionPane.showMessageDialog(null, "DemogPeriods_9, final population size cannot be null or negative: " + End_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_9, final population size: " + sX_Reg2_9);
					}
        		} 
			else
				{
				if (thisValue0 > 8 && Error == 0)
					{
					System.out.println("DemogPeriods_9, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_9, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_DemogPeriods_9 = TextMultDemogPeriodsProteinEvolverABC_9.getText();
			int Control_9 = 0;
			if (sX_DemogPeriods_9.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DemogPeriods_9.length(); i++) // check integer
    					{
        				char c = sX_DemogPeriods_9.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_9 = Control_9 + 1; // ok
        					}
						}
					}
				if (Error == 0)
					{
					if (Control_9 < 2 && Error == 0)
						{
						System.out.println("DemogPeriods_9: Incorrect time");
						JOptionPane.showMessageDialog(null, "DemogPeriods_9: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_9: " + sX_DemogPeriods_9);
					}
        		} 
			else
				{
				if (thisValue0 > 8 && Error == 0)
					{
					System.out.println("DemogPeriods_9 must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_9 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
				
			// DemogPeriods_10
			int Init_Reg1_10 = 0;
			int End_Reg1_10 = 0;
			Init_Reg1_10 = 0;
			End_Reg1_10 = 0;
			String sX_Reg1_10 = TextMultDemogPeriods_Reg1_10.getText();
			if (sX_Reg1_10.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_10.length(); i++) // check integer
    					{
        				char c = sX_Reg1_10.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_10, initial population size incorrect: " + sX_Reg1_10);
								JOptionPane.showMessageDialog(null, "DemogPeriods_10, initial population size incorrect: " + sX_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_10 = Integer.parseInt(sX_Reg1_10);
					if (Init_Reg1_10 <= 0)
						{
						System.out.println("DemogPeriods_10, initial population size cannot be null or negative: " + Init_Reg1_10);
						JOptionPane.showMessageDialog(null, "DemogPeriods_10, initial population size cannot be null or negative: " + Init_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_10, initial population size: " + sX_Reg1_10);
					}
        		} 
			else
				{
				if (thisValue0 > 9 && Error == 0)
					{
					System.out.println("DemogPeriods_10, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_10, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_10 = TextMultDemogPeriods_Reg2_10.getText();
			if (sX_Reg2_10.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_10.length(); i++) // check integer
    					{
        				char c = sX_Reg2_10.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriods_10, final population size incorrect: " + sX_Reg2_10);
								JOptionPane.showMessageDialog(null, "DemogPeriods_10, final population size incorrect: " + sX_Reg2_10, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_10 = Integer.parseInt(sX_Reg2_10);
					if (End_Reg1_10 <= 0)
						{
						System.out.println("DemogPeriods_10, final population size cannot be null or negative: " + End_Reg1_10);
						JOptionPane.showMessageDialog(null, "DemogPeriods_10, final population size cannot be null or negative: " + End_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_10, final population size: " + sX_Reg2_10);
					}
        		} 
			else
				{
				if (thisValue0 > 9 && Error == 0)
					{
					System.out.println("DemogPeriods_10, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_10, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_DemogPeriods_10 = TextMultDemogPeriodsProteinEvolverABC_10.getText();
			int Control_10 = 0;
			if (sX_DemogPeriods_10.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_DemogPeriods_10.length(); i++) // check integer
    					{
        				char c = sX_DemogPeriods_10.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_10 = Control_10 + 1; // ok
        					}
						}
					}
				if (Error == 0)
					{
					if (Control_10 < 2 && Error == 0)
						{
						System.out.println("DemogPeriods_10: Incorrect time");
						JOptionPane.showMessageDialog(null, "DemogPeriods_10: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriods_10: " + sX_DemogPeriods_10);
					}
        		} 
			else
				{
				if (thisValue0 > 9 && Error == 0)
					{
					System.out.println("DemogPeriods_10 must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriods_10 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				

		// Checking			
			if (Error == 0)
				{
				String Here1_1 = TextMultDemogPeriods_Reg1_1.getText();
				String Here2_1 = TextMultDemogPeriods_Reg2_1.getText();
				String Here3_1 = TextMultDemogPeriodsProteinEvolverABC_1.getText();
				ProteinEvolverABC_InputDemogPeriods_Mult1 =  Here1_1 + " " + Here2_1 + " " + Here3_1;
				
				String Here1_2 = TextMultDemogPeriods_Reg1_2.getText();
				String Here2_2 = TextMultDemogPeriods_Reg2_2.getText();
				String Here3_2 = TextMultDemogPeriodsProteinEvolverABC_2.getText();
				ProteinEvolverABC_InputDemogPeriods_Mult2 = Here1_2 + " " + Here2_2 + " " + Here3_2;
				
				String Here1_3 = TextMultDemogPeriods_Reg1_3.getText();
				String Here2_3 = TextMultDemogPeriods_Reg2_3.getText();
				String Here3_3 = TextMultDemogPeriodsProteinEvolverABC_3.getText();
				ProteinEvolverABC_InputDemogPeriods_Mult3 = Here1_3 + " " + Here2_3 + " " + Here3_3;
				
				String Here1_4 = TextMultDemogPeriods_Reg1_4.getText();
				String Here2_4 = TextMultDemogPeriods_Reg2_4.getText();
				String Here3_4 = TextMultDemogPeriodsProteinEvolverABC_4.getText();
				ProteinEvolverABC_InputDemogPeriods_Mult4 = Here1_4 + " " + Here2_4 + " " + Here3_4;
				
				String Here1_5 = TextMultDemogPeriods_Reg1_5.getText();
				String Here2_5 = TextMultDemogPeriods_Reg2_5.getText();
				String Here3_5 = TextMultDemogPeriodsProteinEvolverABC_5.getText();
				ProteinEvolverABC_InputDemogPeriods_Mult5 = Here1_5 + " " + Here2_5 + " " + Here3_5;
				
				String Here1_6 = TextMultDemogPeriods_Reg1_6.getText();
				String Here2_6 = TextMultDemogPeriods_Reg2_6.getText();
				String Here3_6 = TextMultDemogPeriodsProteinEvolverABC_6.getText();
				ProteinEvolverABC_InputDemogPeriods_Mult6 = Here1_6 + " " + Here2_6 + " " + Here3_6;
				
				String Here1_7 = TextMultDemogPeriods_Reg1_7.getText();
				String Here2_7 = TextMultDemogPeriods_Reg2_7.getText();
				String Here3_7 = TextMultDemogPeriodsProteinEvolverABC_7.getText();
				ProteinEvolverABC_InputDemogPeriods_Mult7 = Here1_7 + " " + Here2_7 + " " + Here3_7;
				
				String Here1_8 = TextMultDemogPeriods_Reg1_8.getText();
				String Here2_8 = TextMultDemogPeriods_Reg2_8.getText();
				String Here3_8 = TextMultDemogPeriodsProteinEvolverABC_8.getText();
				ProteinEvolverABC_InputDemogPeriods_Mult8 = Here1_8 + " " + Here2_8 + " " + Here3_8;
				
				String Here1_9 = TextMultDemogPeriods_Reg1_9.getText();
				String Here2_9 = TextMultDemogPeriods_Reg2_9.getText();
				String Here3_9 = TextMultDemogPeriodsProteinEvolverABC_9.getText();
				ProteinEvolverABC_InputDemogPeriods_Mult9 = Here1_9 + " " + Here2_9 + " " + Here3_9;
				
				String Here1_10 = TextMultDemogPeriods_Reg1_10.getText();
				String Here2_10 = TextMultDemogPeriods_Reg2_10.getText();
				String Here3_10 = TextMultDemogPeriodsProteinEvolverABC_10.getText();
				ProteinEvolverABC_InputDemogPeriods_Mult10 = Here1_10 + " " + Here2_10 + " " + Here3_10;
				
				System.out.println("DemogPeriods_1: " + ProteinEvolverABC_InputDemogPeriods_Mult1);
				System.out.println("DemogPeriods_2: " + ProteinEvolverABC_InputDemogPeriods_Mult2);
				System.out.println("DemogPeriods_3: " + ProteinEvolverABC_InputDemogPeriods_Mult3);
				System.out.println("DemogPeriods_4: " + ProteinEvolverABC_InputDemogPeriods_Mult4);
				System.out.println("DemogPeriods_5: " + ProteinEvolverABC_InputDemogPeriods_Mult5);
				System.out.println("DemogPeriods_6: " + ProteinEvolverABC_InputDemogPeriods_Mult6);
				System.out.println("DemogPeriods_7: " + ProteinEvolverABC_InputDemogPeriods_Mult7);
				System.out.println("DemogPeriods_8: " + ProteinEvolverABC_InputDemogPeriods_Mult8);
				System.out.println("DemogPeriods_9: " + ProteinEvolverABC_InputDemogPeriods_Mult9);
				System.out.println("DemogPeriods_10: " + ProteinEvolverABC_InputDemogPeriods_Mult10);
				
				if (thisValue0 == 0)
					{
					System.out.println("Strange error in DemogPeriods. thisValue0 = " + thisValue0);
					JOptionPane.showMessageDialog(null, "Strange error in DemogPeriods. thisValue0 = " + thisValue0 ," ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				if (thisValue0 == 1)
					{
					System.out.println("More than 1 DemogPeriod is required to use DemogPeriods");
					JOptionPane.showMessageDialog(null, "More than 1 DemogPeriod is required to use DemogPeriods", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				if (thisValue0 == 2 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriods = "DemographicPeriods=1 " + sX0 + " " + ProteinEvolverABC_InputDemogPeriods_Mult1 + " " + ProteinEvolverABC_InputDemogPeriods_Mult2;
					}
				if (thisValue0 == 3 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriods = "DemographicPeriods=1 " + sX0 + " " + ProteinEvolverABC_InputDemogPeriods_Mult1 + " " + ProteinEvolverABC_InputDemogPeriods_Mult2 + " " + ProteinEvolverABC_InputDemogPeriods_Mult3;
					}
				if (thisValue0 == 4 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriods = "DemographicPeriods=1 " + sX0 + " " + ProteinEvolverABC_InputDemogPeriods_Mult1 + " " + ProteinEvolverABC_InputDemogPeriods_Mult2 + " " + ProteinEvolverABC_InputDemogPeriods_Mult3 + " " + ProteinEvolverABC_InputDemogPeriods_Mult4;
					}
				if (thisValue0 == 5 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriods = "DemographicPeriods=1 " + sX0 + " " + ProteinEvolverABC_InputDemogPeriods_Mult1 + " " + ProteinEvolverABC_InputDemogPeriods_Mult2 + " " + ProteinEvolverABC_InputDemogPeriods_Mult3 + " " + ProteinEvolverABC_InputDemogPeriods_Mult4 + " " + ProteinEvolverABC_InputDemogPeriods_Mult5;
					}
				if (thisValue0 == 6 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriods = "DemographicPeriods=1 " + sX0 + " " + ProteinEvolverABC_InputDemogPeriods_Mult1 + " " + ProteinEvolverABC_InputDemogPeriods_Mult2 + " " + ProteinEvolverABC_InputDemogPeriods_Mult3 + " " + ProteinEvolverABC_InputDemogPeriods_Mult4 + " " + ProteinEvolverABC_InputDemogPeriods_Mult5 + " " + ProteinEvolverABC_InputDemogPeriods_Mult6;
					}
				if (thisValue0 == 7 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriods = "DemographicPeriods=1 " + sX0 + " " + ProteinEvolverABC_InputDemogPeriods_Mult1 + " " + ProteinEvolverABC_InputDemogPeriods_Mult2 + " " + ProteinEvolverABC_InputDemogPeriods_Mult3 + " " + ProteinEvolverABC_InputDemogPeriods_Mult4 + " " + ProteinEvolverABC_InputDemogPeriods_Mult5 + " " + ProteinEvolverABC_InputDemogPeriods_Mult6 + " " + ProteinEvolverABC_InputDemogPeriods_Mult7;
					}
				if (thisValue0 == 8 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriods = "DemographicPeriods=1 " + sX0 + " " + ProteinEvolverABC_InputDemogPeriods_Mult1 + " " + ProteinEvolverABC_InputDemogPeriods_Mult2 + " " + ProteinEvolverABC_InputDemogPeriods_Mult3 + " " + ProteinEvolverABC_InputDemogPeriods_Mult4 + " " + ProteinEvolverABC_InputDemogPeriods_Mult5 + " " + ProteinEvolverABC_InputDemogPeriods_Mult6 + " " + ProteinEvolverABC_InputDemogPeriods_Mult7 + " " + ProteinEvolverABC_InputDemogPeriods_Mult8;
					}
				if (thisValue0 == 9 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriods = "DemographicPeriods=1 " + sX0 + " " + ProteinEvolverABC_InputDemogPeriods_Mult1 + " " + ProteinEvolverABC_InputDemogPeriods_Mult2 + " " + ProteinEvolverABC_InputDemogPeriods_Mult3 + " " + ProteinEvolverABC_InputDemogPeriods_Mult4 + " " + ProteinEvolverABC_InputDemogPeriods_Mult5 + " " + ProteinEvolverABC_InputDemogPeriods_Mult6 + " " + ProteinEvolverABC_InputDemogPeriods_Mult7 + " " + ProteinEvolverABC_InputDemogPeriods_Mult8 + " " + ProteinEvolverABC_InputDemogPeriods_Mult9;
					}
				if (thisValue0 == 10 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriods = "DemographicPeriods=1 " + sX0 + " " + ProteinEvolverABC_InputDemogPeriods_Mult1 + " " + ProteinEvolverABC_InputDemogPeriods_Mult2 + " " + ProteinEvolverABC_InputDemogPeriods_Mult3 + " " + ProteinEvolverABC_InputDemogPeriods_Mult4 + " " + ProteinEvolverABC_InputDemogPeriods_Mult5 + " " + ProteinEvolverABC_InputDemogPeriods_Mult6 + " " + ProteinEvolverABC_InputDemogPeriods_Mult7 + " " + ProteinEvolverABC_InputDemogPeriods_Mult8 + " " + ProteinEvolverABC_InputDemogPeriods_Mult9 + " " + ProteinEvolverABC_InputDemogPeriods_Mult10;
					}
	
				
				if (Error == 0)
					{
					SavedMultDemogPeriods = 1;
					label4eee.setText("Demographic periods were saved");
					label4eee.setVisible(true); // Dated tips saved
					System.out.println("ProteinEvolverABC_DemogPeriods: " + ProteinEvolverABC_DemogPeriods);
					MultDemogPeriodsWindow.setVisible(false);
					MultDemogPeriodsWindow.dispose();
					System.out.println("SavedMultDemogPeriods: " + SavedMultDemogPeriods);
					}
				}

			}
		}

	

	
	// runButtonMultDemogPeriodsStructPop_CTEExitHandler button
	public class runButtonMultDemogPeriodsStructPop_CTEExitHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			VariablePopSize.setSelectedItem("No");
			TextGrowthRateProteinEvolverABC.setVisible(false);
			TextGrowthRateProteinEvolverABC.setText("");
			label4eee.setText("");
			label4eee.setVisible(false); // Demog not saved
			ProteinEvolverABC_DemogPeriodsStructPop_CTE = "#DemographicsSpeciesTree_ConstantPops=2 7 1000 500 900 800 1300 1000 700";
			ProteinEvolverABC_DemogPeriodsStructPop_VARY = "#DemographicsSpeciesTree_VariablePops=3 7 1000 1200 500 600 900 1000 100 200 800 900 2000 1900 900";
			
			MultDemogPeriodsStructPop_CTEWindow.setVisible(false);
			MultDemogPeriodsStructPop_CTEWindow.dispose();
			System.out.println("Do not constant demographics per branch in population/species tree: " + ProteinEvolverABC_DemogPeriodsStructPop_CTE);
			}
		}

	
	// runButtonMultDemogPeriodsStructPop_CTESaveNextHandler button
	public class runButtonMultDemogPeriodsStructPop_CTESaveNextHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			Error = 0;
			
			// Number Of DemogPeriodsStructPop_CTE
			String sX0 = TextNumberOfMultDemogPeriodsStructPop_CTEProteinEvolverABC.getText();
			int thisValue0 = 0;
			if (sX0.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX0.length(); i++) // check integer
    					{
        				char c = sX0.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Number of branches is incorrect: " + sX0);
								JOptionPane.showMessageDialog(null, "Number of branches is incorrect: " + sX0, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					thisValue0 = Integer.parseInt(sX0);
					if (thisValue0 <= 0)
						{
						System.out.println("Number of branches cannot be null or negative: " + thisValue0);
						JOptionPane.showMessageDialog(null, "Number of branches cannot be null or negative: " + thisValue0, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Number of DemogPeriodsStructPop_CTE: " + sX0);
					}
        		} 
			else
				{
				System.out.println("Number of branches must be introduced");
				JOptionPane.showMessageDialog(null, "Number of branches must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			


			// DemogPeriodsStructPop_CTE_1
			int Init_Reg1_1 = 0;
			int End_Reg1_1 = 0;
			Init_Reg1_1 = 0;
			End_Reg1_1 = 0;
			String sX_Reg1_1 = TextMultDemogPeriodsStructPop_CTE_Reg1_1.getText();
			if (sX_Reg1_1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_1.length(); i++) // check integer
    					{
        				char c = sX_Reg1_1.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_CTE_1, population size incorrect: " + sX_Reg1_1);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_1, population size incorrect: " + sX_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_1 = Integer.parseInt(sX_Reg1_1);
					if (Init_Reg1_1 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_CTE_1, population size cannot be null or negative: " + Init_Reg1_1);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_1, population size cannot be null or negative: " + Init_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_CTE_1, population size: " + sX_Reg1_1);
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_CTE_1, population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_1, population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
								
			
			// DemogPeriodsStructPop_CTE_2
			int Init_Reg1_2 = 0;
			int End_Reg1_2 = 0;
			Init_Reg1_2 = 0;
			End_Reg1_2 = 0;
			String sX_Reg1_2 = TextMultDemogPeriodsStructPop_CTE_Reg1_2.getText();
			if (sX_Reg1_2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_2.length(); i++) // check integer
    					{
        				char c = sX_Reg1_2.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_CTE_2, population size incorrect: " + sX_Reg1_2);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_2, population size incorrect: " + sX_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_2 = Integer.parseInt(sX_Reg1_2);
					if (Init_Reg1_2 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_CTE_2, population size cannot be null or negative: " + Init_Reg1_2);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_2, population size cannot be null or negative: " + Init_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_CTE_2, population size: " + sX_Reg1_2);
					}
        		} 
			else
				{
				if (thisValue0 > 1 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_CTE_2, population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_2, population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			
			// DemogPeriodsStructPop_CTE_3
			int Init_Reg1_3 = 0;
			int End_Reg1_3 = 0;
			Init_Reg1_3 = 0;
			End_Reg1_3 = 0;
			String sX_Reg1_3 = TextMultDemogPeriodsStructPop_CTE_Reg1_3.getText();
			if (sX_Reg1_3.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_3.length(); i++) // check integer
    					{
        				char c = sX_Reg1_3.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_CTE_3, population size incorrect: " + sX_Reg1_3);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_3, population size incorrect: " + sX_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_3 = Integer.parseInt(sX_Reg1_3);
					if (Init_Reg1_3 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_CTE_3, population size cannot be null or negative: " + Init_Reg1_3);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_3, population size cannot be null or negative: " + Init_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_CTE_3, population size: " + sX_Reg1_3);
					}
        		} 
			else
				{
				if (thisValue0 > 2 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_CTE_3, population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_3, population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}					
		
			// DemogPeriodsStructPop_CTE_4
			int Init_Reg1_4 = 0;
			int End_Reg1_4 = 0;
			Init_Reg1_4 = 0;
			End_Reg1_4 = 0;
			String sX_Reg1_4 = TextMultDemogPeriodsStructPop_CTE_Reg1_4.getText();
			if (sX_Reg1_4.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_4.length(); i++) // check integer
    					{
        				char c = sX_Reg1_4.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_CTE_4, population size incorrect: " + sX_Reg1_4);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_4, population size incorrect: " + sX_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_4 = Integer.parseInt(sX_Reg1_4);
					if (Init_Reg1_4 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_CTE_4, population size cannot be null or negative: " + Init_Reg1_4);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_4, population size cannot be null or negative: " + Init_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_CTE_4, population size: " + sX_Reg1_4);
					}
        		} 
			else
				{
				if (thisValue0 > 3 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_CTE_4, population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_4, population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
									
	
		// DemogPeriodsStructPop_CTE_5
			int Init_Reg1_5 = 0;
			int End_Reg1_5 = 0;
			Init_Reg1_5 = 0;
			End_Reg1_5 = 0;
			String sX_Reg1_5 = TextMultDemogPeriodsStructPop_CTE_Reg1_5.getText();
			if (sX_Reg1_5.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_5.length(); i++) // check integer
    					{
        				char c = sX_Reg1_5.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_CTE_5, population size incorrect: " + sX_Reg1_5);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_5, population size incorrect: " + sX_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_5 = Integer.parseInt(sX_Reg1_5);
					if (Init_Reg1_5 <= 0)
						{
						System.out.println("DemogPeriodsStructPop_CTE_5, population size cannot be null or negative: " + Init_Reg1_5);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_5, population size cannot be null or negative: " + Init_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_CTE_5, population size: " + sX_Reg1_5);
					}
        		} 
			else
				{
				if (thisValue0 > 4 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_CTE_5, population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_5, population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}			

			// DemogPeriodsStructPop_CTE_6
			int Init_Reg1_6 = 0;
			int End_Reg1_6 = 0;
			Init_Reg1_6 = 0;
			End_Reg1_6 = 0;
			String sX_Reg1_6 = TextMultDemogPeriodsStructPop_CTE_Reg1_6.getText();
			if (sX_Reg1_6.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_6.length(); i++) // check integer
    					{
        				char c = sX_Reg1_6.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_CTE_6, population size incorrect: " + sX_Reg1_6);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_6, population size incorrect: " + sX_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_6 = Integer.parseInt(sX_Reg1_6);
					if (Init_Reg1_6 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_CTE_6, population size cannot be null or negative: " + Init_Reg1_6);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_6, population size cannot be null or negative: " + Init_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_CTE_6, population size: " + sX_Reg1_6);
					}
        		} 
			else
				{
				if (thisValue0 > 5 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_CTE_6, population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_6, population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
							
		

			// DemogPeriodsStructPop_CTE_7
			int Init_Reg1_7 = 0;
			int End_Reg1_7 = 0;
			Init_Reg1_7 = 0;
			End_Reg1_7 = 0;
			String sX_Reg1_7 = TextMultDemogPeriodsStructPop_CTE_Reg1_7.getText();
			if (sX_Reg1_7.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_7.length(); i++) // check integer
    					{
        				char c = sX_Reg1_7.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_CTE_7, population size incorrect: " + sX_Reg1_7);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_7, population size incorrect: " + sX_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_7 = Integer.parseInt(sX_Reg1_7);
					if (Init_Reg1_7 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_CTE_7, population size cannot be null or negative: " + Init_Reg1_7);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_7, population size cannot be null or negative: " + Init_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_CTE_7, population size: " + sX_Reg1_7);
					}
        		} 
			else
				{
				if (thisValue0 > 6 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_CTE_7, population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_7, population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
							

			// DemogPeriodsStructPop_CTE_8
			int Init_Reg1_8 = 0;
			int End_Reg1_8 = 0;
			Init_Reg1_8 = 0;
			End_Reg1_8 = 0;
			String sX_Reg1_8 = TextMultDemogPeriodsStructPop_CTE_Reg1_8.getText();
			if (sX_Reg1_8.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_8.length(); i++) // check integer
    					{
        				char c = sX_Reg1_8.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_CTE_8, population size incorrect: " + sX_Reg1_8);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_8, population size incorrect: " + sX_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_8 = Integer.parseInt(sX_Reg1_8);
					if (Init_Reg1_8 <= 0)
						{
						System.out.println("DemogPeriodsStructPop_CTE_8, population size cannot be null or negative: " + Init_Reg1_8);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_8, population size cannot be null or negative: " + Init_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_CTE_8, population size: " + sX_Reg1_8);
					}
        		} 
			else
				{
				if (thisValue0 > 7 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_CTE_8, population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_8, population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
	
			// DemogPeriodsStructPop_CTE_9
			int Init_Reg1_9 = 0;
			int End_Reg1_9 = 0;
			Init_Reg1_9 = 0;
			End_Reg1_9 = 0;
			String sX_Reg1_9 = TextMultDemogPeriodsStructPop_CTE_Reg1_9.getText();
			if (sX_Reg1_9.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_9.length(); i++) // check integer
    					{
        				char c = sX_Reg1_9.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_CTE_9, population size incorrect: " + sX_Reg1_9);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_9, population size incorrect: " + sX_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_9 = Integer.parseInt(sX_Reg1_9);
					if (Init_Reg1_9 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_CTE_9, population size cannot be null or negative: " + Init_Reg1_9);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_9, population size cannot be null or negative: " + Init_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_CTE_9, population size: " + sX_Reg1_9);
					}
        		} 
			else
				{
				if (thisValue0 > 8 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_CTE_9, population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_9, population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
								
				
			// DemogPeriodsStructPop_CTE_10
			int Init_Reg1_10 = 0;
			int End_Reg1_10 = 0;
			Init_Reg1_10 = 0;
			End_Reg1_10 = 0;
			String sX_Reg1_10 = TextMultDemogPeriodsStructPop_CTE_Reg1_10.getText();
			if (sX_Reg1_10.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_10.length(); i++) // check integer
    					{
        				char c = sX_Reg1_10.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_CTE_10, population size incorrect: " + sX_Reg1_10);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_10, population size incorrect: " + sX_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_10 = Integer.parseInt(sX_Reg1_10);
					if (Init_Reg1_10 <= 0)
						{
						System.out.println("DemogPeriodsStructPop_CTE_10, population size cannot be null or negative: " + Init_Reg1_10);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_10, population size cannot be null or negative: " + Init_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_CTE_10, population size: " + sX_Reg1_10);
					}
        		} 
			else
				{
				if (thisValue0 > 9 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_CTE_10, population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_CTE_10, population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


		// Checking	
			if (Error == 0)
				{
				int NumberOfRealBranches2 = (NumberOfConvDemes*2) + 1;
				if (thisValue0 != NumberOfRealBranches2)
					{
					System.out.println("The number of branches should be equal to the number of branches of the specified population/species tree (2*NumberOfConvergences + 1): " + NumberOfRealBranches2);
					JOptionPane.showMessageDialog(null, "The number of branches should be equal to the number of branches of the specified population/species tree (2*NumberOfConvergences + 1):" + NumberOfRealBranches2, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		
			if (Error == 0)
				{
				String Here1_1 = TextMultDemogPeriodsStructPop_CTE_Reg1_1.getText();
				
				String Here1_2 = TextMultDemogPeriodsStructPop_CTE_Reg1_2.getText();
				
				String Here1_3 = TextMultDemogPeriodsStructPop_CTE_Reg1_3.getText();
				
				String Here1_4 = TextMultDemogPeriodsStructPop_CTE_Reg1_4.getText();
				
				String Here1_5 = TextMultDemogPeriodsStructPop_CTE_Reg1_5.getText();
				
				String Here1_6 = TextMultDemogPeriodsStructPop_CTE_Reg1_6.getText();
				
				String Here1_7 = TextMultDemogPeriodsStructPop_CTE_Reg1_7.getText();
				
				String Here1_8 = TextMultDemogPeriodsStructPop_CTE_Reg1_8.getText();
				
				String Here1_9 = TextMultDemogPeriodsStructPop_CTE_Reg1_9.getText();
				
				String Here1_10 = TextMultDemogPeriodsStructPop_CTE_Reg1_10.getText();
								
				if (thisValue0 == 0)
					{
					System.out.println("Strange error in DemogPeriodsStructPop_CTE. thisValue0 = " + thisValue0);
					JOptionPane.showMessageDialog(null, "Strange error in DemogPeriodsStructPop_CTE. thisValue0 = " + thisValue0 ," ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				if (thisValue0 == 1)
					{
					System.out.println("More than 1 DemogPeriod is required");
					JOptionPane.showMessageDialog(null, "More than 1 DemogPeriod is required", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				if (thisValue0 == 2 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_CTE = "DemographicsSpeciesTree_ConstantPops=2 " + sX0 + " " + Here1_1 + " " + Here1_2;
					}
				if (thisValue0 == 3 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_CTE = "DemographicsSpeciesTree_ConstantPops=2 " + sX0 + " " + Here1_1 + " " + Here1_2 + " " + Here1_3;
					}
				if (thisValue0 == 4 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_CTE = "DemographicsSpeciesTree_ConstantPops=2 " + sX0 + " " + Here1_1 + " " + Here1_2 + " " + Here1_3 + " " + Here1_4;
					}
				if (thisValue0 == 5 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_CTE = "DemographicsSpeciesTree_ConstantPops=2 " + sX0 + " " + Here1_1 + " " + Here1_2 + " " + Here1_3 + " " + Here1_4 + " " + Here1_5;
					}
				if (thisValue0 == 6 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_CTE = "DemographicsSpeciesTree_ConstantPops=2 " + sX0 + " " + Here1_1 + " " + Here1_2 + " " + Here1_3 + " " + Here1_4 + " " + Here1_5 + " " + Here1_6;
					}
				if (thisValue0 == 7 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_CTE = "DemographicsSpeciesTree_ConstantPops=2 " + sX0 + " " + Here1_1 + " " + Here1_2 + " " + Here1_3 + " " + Here1_4 + " " + Here1_5 + " " + Here1_6 + " " + Here1_7;
					}
				if (thisValue0 == 8 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_CTE = "DemographicsSpeciesTree_ConstantPops=2 " + sX0 + " " + Here1_1 + " " + Here1_2 + " " + Here1_3 + " " + Here1_4 + " " + Here1_5 + " " + Here1_6 + " " + Here1_7 + " " + Here1_8;
					}
				if (thisValue0 == 9 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_CTE = "DemographicsSpeciesTree_ConstantPops=2 " + sX0 + " " + Here1_1 + " " + Here1_2 + " " + Here1_3 + " " + Here1_4 + " " + Here1_5 + " " + Here1_6 + " " + Here1_7 + " " + Here1_8 + " " + Here1_9;
					}
				if (thisValue0 == 10 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_CTE = "DemographicsSpeciesTree_ConstantPops=2 " + sX0 + " " + Here1_1 + " " + Here1_2 + " " + Here1_3 + " " + Here1_4 + " " + Here1_5 + " " + Here1_6 + " " + Here1_7 + " " + Here1_8 + " " + Here1_9 + " " + Here1_10;
					}
	
				
				if (Error == 0)
					{
					SavedMultDemogPeriodsStructPop_CTE = 1;
					label4eee.setText("Branch-demographics (constant) saved");
					label4eee.setVisible(true); // Dated tips saved
					System.out.println("ProteinEvolverABC_DemogPeriodsStructPop_CTE: " + ProteinEvolverABC_DemogPeriodsStructPop_CTE);
					MultDemogPeriodsStructPop_CTEWindow.setVisible(false);
					MultDemogPeriodsStructPop_CTEWindow.dispose();
					System.out.println("SavedMultDemogPeriodsStructPop_CTE: " + SavedMultDemogPeriodsStructPop_CTE);
					}
				}

			}
		}







	// runButtonMultDemogPeriodsStructPop_VARYExitHandler button
	public class runButtonMultDemogPeriodsStructPop_VARYExitHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			VariablePopSize.setSelectedItem("No");
			TextGrowthRateProteinEvolverABC.setVisible(false);
			TextGrowthRateProteinEvolverABC.setText("");
			label4eee.setText("");
			label4eee.setVisible(false); // Demog not saved
			ProteinEvolverABC_DemogPeriodsStructPop_VARY = "#DemographicsSpeciesTree_VariablePops=3 7 1000 1200 500 600 900 1000 100 200 800 900 2000 1900 900";
			
			MultDemogPeriodsStructPop_VARYWindow.setVisible(false);
			MultDemogPeriodsStructPop_VARYWindow.dispose();
			System.out.println("Do not VARIABLE demographics per branch in population/species tree: " + ProteinEvolverABC_DemogPeriodsStructPop_VARY);
			}
		}

	

	// runButtonMultDemogPeriodsStructPop_VARYSaveNextHandler button
	public class runButtonMultDemogPeriodsStructPop_VARYSaveNextHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			Error = 0;
	
			// Number Of DemogPeriodsStructPop_VARY
			String sX0 = TextNumberOfMultDemogPeriodsStructPop_VARYProteinEvolverABC.getText();
			int thisValue0 = 0;
			if (sX0.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX0.length(); i++) // check integer
    					{
        				char c = sX0.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Number of branches is incorrect: " + sX0);
								JOptionPane.showMessageDialog(null, "Number of branches is incorrect: " + sX0, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					thisValue0 = Integer.parseInt(sX0);
					if (thisValue0 <= 0)
						{
						System.out.println("Number of branches cannot be null or negative: " + thisValue0);
						JOptionPane.showMessageDialog(null, "Number of branches cannot be null or negative: " + thisValue0, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Number of DemogPeriodsStructPop_VARY: " + sX0);
					}
        		} 
			else
				{
				System.out.println("Number of branches must be introduced");
				JOptionPane.showMessageDialog(null, "Number of branches must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			


			// DemogPeriodsStructPop_VARY_1
			int Init_Reg1_1 = 0;
			int End_Reg1_1 = 0;
			Init_Reg1_1 = 0;
			End_Reg1_1 = 0;
			String sX_Reg1_1 = TextMultDemogPeriodsStructPop_VARY_Reg1_1.getText();
			if (sX_Reg1_1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_1.length(); i++) // check integer
    					{
        				char c = sX_Reg1_1.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_1, initial population size incorrect: " + sX_Reg1_1);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_1, initial population size incorrect: " + sX_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_1 = Integer.parseInt(sX_Reg1_1);
					if (Init_Reg1_1 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_1, initial population size cannot be null or negative: " + Init_Reg1_1);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_1, initial population size cannot be null or negative: " + Init_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_1, initial population size: " + sX_Reg1_1);
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_1, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_1, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_1 = TextMultDemogPeriodsStructPop_VARY_Reg2_1.getText();
			if (sX_Reg2_1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_1.length(); i++) // check integer
    					{
        				char c = sX_Reg2_1.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_1, final population size incorrect: " + sX_Reg2_1);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_1, final population size incorrect: " + sX_Reg2_1, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_1 = Integer.parseInt(sX_Reg2_1);
					if (End_Reg1_1 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_1, final population size cannot be null or negative: " + End_Reg1_1);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_1, final population size cannot be null or negative: " + End_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_1, final population size: " + sX_Reg2_1);
					}
        		} 
			else
				{
				if (thisValue0 > 1 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_1, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_1, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			
			// DemogPeriodsStructPop_VARY_2
			int Init_Reg1_2 = 0;
			int End_Reg1_2 = 0;
			Init_Reg1_2 = 0;
			End_Reg1_2 = 0;
			String sX_Reg1_2 = TextMultDemogPeriodsStructPop_VARY_Reg1_2.getText();
			if (sX_Reg1_2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_2.length(); i++) // check integer
    					{
        				char c = sX_Reg1_2.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_2, initial population size incorrect: " + sX_Reg1_2);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_2, initial population size incorrect: " + sX_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_2 = Integer.parseInt(sX_Reg1_2);
					if (Init_Reg1_2 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_2, initial population size cannot be null or negative: " + Init_Reg1_2);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_2, initial population size cannot be null or negative: " + Init_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_2, initial population size: " + sX_Reg1_2);
					}
        		} 
			else
				{
				if (thisValue0 > 1 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_2, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_2, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_2 = TextMultDemogPeriodsStructPop_VARY_Reg2_2.getText();
			if (sX_Reg2_2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_2.length(); i++) // check integer
    					{
        				char c = sX_Reg2_2.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_2, final population size incorrect: " + sX_Reg2_2);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_2, final population size incorrect: " + sX_Reg2_2, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_2 = Integer.parseInt(sX_Reg2_2);
					if (End_Reg1_2 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_2, final population size cannot be null or negative: " + End_Reg1_2);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_2, final population size cannot be null or negative: " + End_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_2, final population size: " + sX_Reg2_2);
					}
        		} 
			else
				{
				if (thisValue0 > 2 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_2, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_2, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
						
			
			// DemogPeriodsStructPop_VARY_3
			int Init_Reg1_3 = 0;
			int End_Reg1_3 = 0;
			Init_Reg1_3 = 0;
			End_Reg1_3 = 0;
			String sX_Reg1_3 = TextMultDemogPeriodsStructPop_VARY_Reg1_3.getText();
			if (sX_Reg1_3.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_3.length(); i++) // check integer
    					{
        				char c = sX_Reg1_3.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_3, initial population size incorrect: " + sX_Reg1_3);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_3, initial population size incorrect: " + sX_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_3 = Integer.parseInt(sX_Reg1_3);
					if (Init_Reg1_3 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_3, initial population size cannot be null or negative: " + Init_Reg1_3);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_3, initial population size cannot be null or negative: " + Init_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_3, initial population size: " + sX_Reg1_3);
					}
        		} 
			else
				{
				if (thisValue0 > 2 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_3, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_3, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_3 = TextMultDemogPeriodsStructPop_VARY_Reg2_3.getText();
			if (sX_Reg2_3.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_3.length(); i++) // check integer
    					{
        				char c = sX_Reg2_3.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_3, final population size incorrect: " + sX_Reg2_3);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_3, final population size incorrect: " + sX_Reg2_3, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_3 = Integer.parseInt(sX_Reg2_3);
					if (End_Reg1_3 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_3, final population size cannot be null or negative: " + End_Reg1_3);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_3, final population size cannot be null or negative: " + End_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_3, final population size: " + sX_Reg2_3);
					}
        		} 
			else
				{
				if (thisValue0 > 3 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_3, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_3, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
					
		
			// DemogPeriodsStructPop_VARY_4
			int Init_Reg1_4 = 0;
			int End_Reg1_4 = 0;
			Init_Reg1_4 = 0;
			End_Reg1_4 = 0;
			String sX_Reg1_4 = TextMultDemogPeriodsStructPop_VARY_Reg1_4.getText();
			if (sX_Reg1_4.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_4.length(); i++) // check integer
    					{
        				char c = sX_Reg1_4.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_4, initial population size incorrect: " + sX_Reg1_4);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_4, initial population size incorrect: " + sX_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_4 = Integer.parseInt(sX_Reg1_4);
					if (Init_Reg1_4 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_4, initial population size cannot be null or negative: " + Init_Reg1_4);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_4, initial population size cannot be null or negative: " + Init_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_4, initial population size: " + sX_Reg1_4);
					}
        		} 
			else
				{
				if (thisValue0 > 3 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_4, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_4, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_4 = TextMultDemogPeriodsStructPop_VARY_Reg2_4.getText();
			if (sX_Reg2_4.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_4.length(); i++) // check integer
    					{
        				char c = sX_Reg2_4.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_4, final population size incorrect: " + sX_Reg2_4);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_4, final population size incorrect: " + sX_Reg2_4, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_4 = Integer.parseInt(sX_Reg2_4);
					if (End_Reg1_4 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_4, final population size cannot be null or negative: " + End_Reg1_4);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_4, final population size cannot be null or negative: " + End_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_4, final population size: " + sX_Reg2_4);
					}
        		} 
			else
				{
				if (thisValue0 > 4 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_4, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_4, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
					
	
		// DemogPeriodsStructPop_VARY_5
			int Init_Reg1_5 = 0;
			int End_Reg1_5 = 0;
			Init_Reg1_5 = 0;
			End_Reg1_5 = 0;
			String sX_Reg1_5 = TextMultDemogPeriodsStructPop_VARY_Reg1_5.getText();
			if (sX_Reg1_5.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_5.length(); i++) // check integer
    					{
        				char c = sX_Reg1_5.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_5, initial population size incorrect: " + sX_Reg1_5);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_5, initial population size incorrect: " + sX_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_5 = Integer.parseInt(sX_Reg1_5);
					if (Init_Reg1_5 <= 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_5, initial population size cannot be null or negative: " + Init_Reg1_5);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_5, initial population size cannot be null or negative: " + Init_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_5, initial population size: " + sX_Reg1_5);
					}
        		} 
			else
				{
				if (thisValue0 > 4 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_5, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_5, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_5 = TextMultDemogPeriodsStructPop_VARY_Reg2_5.getText();
			if (sX_Reg2_5.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_5.length(); i++) // check integer
    					{
        				char c = sX_Reg2_5.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_5, final population size incorrect: " + sX_Reg2_5);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_5, final population size incorrect: " + sX_Reg2_5, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_5 = Integer.parseInt(sX_Reg2_5);
					if (End_Reg1_5 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_5, final population size cannot be null or negative: " + End_Reg1_5);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_5, final population size cannot be null or negative: " + End_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_5, final population size: " + sX_Reg2_5);
					}
        		} 
			else
				{
				if (thisValue0 > 5 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_5, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_5, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			

			// DemogPeriodsStructPop_VARY_6
			int Init_Reg1_6 = 0;
			int End_Reg1_6 = 0;
			Init_Reg1_6 = 0;
			End_Reg1_6 = 0;
			String sX_Reg1_6 = TextMultDemogPeriodsStructPop_VARY_Reg1_6.getText();
			if (sX_Reg1_6.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_6.length(); i++) // check integer
    					{
        				char c = sX_Reg1_6.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_6, initial population size incorrect: " + sX_Reg1_6);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_6, initial population size incorrect: " + sX_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_6 = Integer.parseInt(sX_Reg1_6);
					if (Init_Reg1_6 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_6, initial population size cannot be null or negative: " + Init_Reg1_6);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_6, initial population size cannot be null or negative: " + Init_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_6, initial population size: " + sX_Reg1_6);
					}
        		} 
			else
				{
				if (thisValue0 > 5 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_6, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_6, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_6 = TextMultDemogPeriodsStructPop_VARY_Reg2_6.getText();
			if (sX_Reg2_6.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_6.length(); i++) // check integer
    					{
        				char c = sX_Reg2_6.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_6, final population size incorrect: " + sX_Reg2_6);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_6, final population size incorrect: " + sX_Reg2_6, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_6 = Integer.parseInt(sX_Reg2_6);
					if (End_Reg1_6 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_6, final population size cannot be null or negative: " + End_Reg1_6);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_6, final population size cannot be null or negative: " + End_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_6, final population size: " + sX_Reg2_6);
					}
        		} 
			else
				{
				if (thisValue0 > 6 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_6, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_6, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
		

			// DemogPeriodsStructPop_VARY_7
			int Init_Reg1_7 = 0;
			int End_Reg1_7 = 0;
			Init_Reg1_7 = 0;
			End_Reg1_7 = 0;
			String sX_Reg1_7 = TextMultDemogPeriodsStructPop_VARY_Reg1_7.getText();
			if (sX_Reg1_7.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_7.length(); i++) // check integer
    					{
        				char c = sX_Reg1_7.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_7, initial population size incorrect: " + sX_Reg1_7);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_7, initial population size incorrect: " + sX_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_7 = Integer.parseInt(sX_Reg1_7);
					if (Init_Reg1_7 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_7, initial population size cannot be null or negative: " + Init_Reg1_7);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_7, initial population size cannot be null or negative: " + Init_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_7, initial population size: " + sX_Reg1_7);
					}
        		} 
			else
				{
				if (thisValue0 > 6 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_7, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_7, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_7 = TextMultDemogPeriodsStructPop_VARY_Reg2_7.getText();
			if (sX_Reg2_7.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_7.length(); i++) // check integer
    					{
        				char c = sX_Reg2_7.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_7, final population size incorrect: " + sX_Reg2_7);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_7, final population size incorrect: " + sX_Reg2_7, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_7 = Integer.parseInt(sX_Reg2_7);
					if (End_Reg1_7 <= 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_7, final population size cannot be null or negative: " + End_Reg1_7);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_7, final population size cannot be null or negative: " + End_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_7, final population size: " + sX_Reg2_7);
					}
        		} 
			else
				{
				if (thisValue0 > 7 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_7, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_7, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			

			// DemogPeriodsStructPop_VARY_8
			int Init_Reg1_8 = 0;
			int End_Reg1_8 = 0;
			Init_Reg1_8 = 0;
			End_Reg1_8 = 0;
			String sX_Reg1_8 = TextMultDemogPeriodsStructPop_VARY_Reg1_8.getText();
			if (sX_Reg1_8.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_8.length(); i++) // check integer
    					{
        				char c = sX_Reg1_8.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_8, initial population size incorrect: " + sX_Reg1_8);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_8, initial population size incorrect: " + sX_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_8 = Integer.parseInt(sX_Reg1_8);
					if (Init_Reg1_8 <= 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_8, initial population size cannot be null or negative: " + Init_Reg1_8);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_8, initial population size cannot be null or negative: " + Init_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_8, initial population size: " + sX_Reg1_8);
					}
        		} 
			else
				{
				if (thisValue0 > 7 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_8, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_8, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_8 = TextMultDemogPeriodsStructPop_VARY_Reg2_8.getText();
			if (sX_Reg2_8.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_8.length(); i++) // check integer
    					{
        				char c = sX_Reg2_8.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_8, final population size incorrect: " + sX_Reg2_8);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_8, final population size incorrect: " + sX_Reg2_8, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_8 = Integer.parseInt(sX_Reg2_8);
					if (End_Reg1_8 <= 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_8, final population size cannot be null or negative: " + End_Reg1_8);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_8, final population size cannot be null or negative: " + End_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_8, final population size: " + sX_Reg2_8);
					}
        		} 
			else
				{
				if (thisValue0 > 8 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_8, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_8, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			

			// DemogPeriodsStructPop_VARY_9
			int Init_Reg1_9 = 0;
			int End_Reg1_9 = 0;
			Init_Reg1_9 = 0;
			End_Reg1_9 = 0;
			String sX_Reg1_9 = TextMultDemogPeriodsStructPop_VARY_Reg1_9.getText();
			if (sX_Reg1_9.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_9.length(); i++) // check integer
    					{
        				char c = sX_Reg1_9.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_9, initial population size incorrect: " + sX_Reg1_9);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_9, initial population size incorrect: " + sX_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_9 = Integer.parseInt(sX_Reg1_9);
					if (Init_Reg1_9 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_9, initial population size cannot be null or negative: " + Init_Reg1_9);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_9, initial population size cannot be null or negative: " + Init_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_9, initial population size: " + sX_Reg1_9);
					}
        		} 
			else
				{
				if (thisValue0 > 8 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_9, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_9, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_9 = TextMultDemogPeriodsStructPop_VARY_Reg2_9.getText();
			if (sX_Reg2_9.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_9.length(); i++) // check integer
    					{
        				char c = sX_Reg2_9.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_9, final population size incorrect: " + sX_Reg2_9);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_9, final population size incorrect: " + sX_Reg2_9, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_9 = Integer.parseInt(sX_Reg2_9);
					if (End_Reg1_9 <= 0 && Error == 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_9, final population size cannot be null or negative: " + End_Reg1_9);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_9, final population size cannot be null or negative: " + End_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_9, final population size: " + sX_Reg2_9);
					}
        		} 
			else
				{
				if (thisValue0 > 9 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_9, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_9, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
				
				
			// DemogPeriodsStructPop_VARY_10
			int Init_Reg1_10 = 0;
			int End_Reg1_10 = 0;
			Init_Reg1_10 = 0;
			End_Reg1_10 = 0;
			String sX_Reg1_10 = TextMultDemogPeriodsStructPop_VARY_Reg1_10.getText();
			if (sX_Reg1_10.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_10.length(); i++) // check integer
    					{
        				char c = sX_Reg1_10.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_10, initial population size incorrect: " + sX_Reg1_10);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_10, initial population size incorrect: " + sX_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_10 = Integer.parseInt(sX_Reg1_10);
					if (Init_Reg1_10 <= 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_10, initial population size cannot be null or negative: " + Init_Reg1_10);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_10, initial population size cannot be null or negative: " + Init_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_10, initial population size: " + sX_Reg1_10);
					}
        		} 
			else
				{
				if (thisValue0 > 9 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_10, initial population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_10, initial population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

// this is not necessary				
/*			String sX_Reg2_10 = TextMultDemogPeriodsStructPop_VARY_Reg2_10.getText();
			if (sX_Reg2_10.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_10.length(); i++) // check integer
    					{
        				char c = sX_Reg2_10.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("DemogPeriodsStructPop_VARY_10, final population size incorrect: " + sX_Reg2_10);
								JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_10, final population size incorrect: " + sX_Reg2_10, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_10 = Integer.parseInt(sX_Reg2_10);
					if (End_Reg1_10 <= 0)
						{
						System.out.println("DemogPeriodsStructPop_VARY_10, final population size cannot be null or negative: " + End_Reg1_10);
						JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_10, final population size cannot be null or negative: " + End_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("DemogPeriodsStructPop_VARY_10, final population size: " + sX_Reg2_10);
					}
        		} 
			else
				{
				if (thisValue0 > 10 && Error == 0)
					{
					System.out.println("DemogPeriodsStructPop_VARY_10, final population size must be introduced");
					JOptionPane.showMessageDialog(null, "DemogPeriodsStructPop_VARY_10, final population size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
*/							

		// Checking	
			if (Error == 0)
				{
				int NumberOfRealBranches = (NumberOfConvDemes*2) + 1;
				if (thisValue0 != NumberOfRealBranches)
					{
					System.out.println("The number of branches should be equal to the number of branches of the specified population/species tree (2*NumberOfConvergences + 1): " + NumberOfRealBranches);
					JOptionPane.showMessageDialog(null, "The number of branches should be equal to the number of branches of the specified population/species tree (2*NumberOfConvergences + 1):" + NumberOfRealBranches, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		
			if (Error == 0)
				{
				String Here1_1 = TextMultDemogPeriodsStructPop_VARY_Reg1_1.getText();
				String Here2_1 = TextMultDemogPeriodsStructPop_VARY_Reg2_1.getText();
				
				String Here1_2 = TextMultDemogPeriodsStructPop_VARY_Reg1_2.getText();
				String Here2_2 = TextMultDemogPeriodsStructPop_VARY_Reg2_2.getText();
				
				String Here1_3 = TextMultDemogPeriodsStructPop_VARY_Reg1_3.getText();
				String Here2_3 = TextMultDemogPeriodsStructPop_VARY_Reg2_3.getText();
				
				String Here1_4 = TextMultDemogPeriodsStructPop_VARY_Reg1_4.getText();
				String Here2_4 = TextMultDemogPeriodsStructPop_VARY_Reg2_4.getText();
				
				String Here1_5 = TextMultDemogPeriodsStructPop_VARY_Reg1_5.getText();
				String Here2_5 = TextMultDemogPeriodsStructPop_VARY_Reg2_5.getText();
				
				String Here1_6 = TextMultDemogPeriodsStructPop_VARY_Reg1_6.getText();
				String Here2_6 = TextMultDemogPeriodsStructPop_VARY_Reg2_6.getText();
				
				String Here1_7 = TextMultDemogPeriodsStructPop_VARY_Reg1_7.getText();
				String Here2_7 = TextMultDemogPeriodsStructPop_VARY_Reg2_7.getText();
				
				String Here1_8 = TextMultDemogPeriodsStructPop_VARY_Reg1_8.getText();
				String Here2_8 = TextMultDemogPeriodsStructPop_VARY_Reg2_8.getText();
				
				String Here1_9 = TextMultDemogPeriodsStructPop_VARY_Reg1_9.getText();
				String Here2_9 = TextMultDemogPeriodsStructPop_VARY_Reg2_9.getText();
				
				String Here1_10 = TextMultDemogPeriodsStructPop_VARY_Reg1_10.getText();
				String Here2_10 = TextMultDemogPeriodsStructPop_VARY_Reg2_10.getText();
				
				
				if (thisValue0 == 0)
					{
					System.out.println("Strange error in DemogPeriodsStructPop_VARY. thisValue0 = " + thisValue0);
					JOptionPane.showMessageDialog(null, "Strange error in DemogPeriodsStructPop_VARY. thisValue0 = " + thisValue0 ," ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				if (thisValue0 == 1)
					{
					System.out.println("More than 1 DemogPeriod is required");
					JOptionPane.showMessageDialog(null, "More than 1 DemogPeriod is required", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				if (thisValue0 == 2 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_VARY = "DemographicsSpeciesTree_VariablePops=3 " + sX0 + " " + Here1_1 + " " + Here2_1 + " " + Here1_2;
					}
				if (thisValue0 == 3 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_VARY = "DemographicsSpeciesTree_VariablePops=3 " + sX0 + " " + Here1_1 + " " + Here2_1 + " " + Here1_2 + " " + Here2_2 + " " + Here1_3;
					}
				if (thisValue0 == 4 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_VARY = "DemographicsSpeciesTree_VariablePops=3 " + sX0 + " " + Here1_1 + " " + Here2_1 + " " + Here1_2 + " " + Here2_2 + " " + Here1_3 + " " + Here2_3 + " " + Here1_4;
					}
				if (thisValue0 == 5 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_VARY = "DemographicsSpeciesTree_VariablePops=3 " + sX0 + " " + Here1_1 + " " + Here2_1 + " " + Here1_2 + " " + Here2_2 + " " + Here1_3 + " " + Here2_3 + " " + Here1_4 + " " + Here2_4 + " " + Here1_5;
					}
				if (thisValue0 == 6 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_VARY = "DemographicsSpeciesTree_VariablePops=3 " + sX0 + " " + Here1_1 + " " + Here2_1 + " " + Here1_2 + " " + Here2_2 + " " + Here1_3 + " " + Here2_3 + " " + Here1_4 + " " + Here2_4 + " " + Here1_5 + " " + Here2_5 + " " + Here1_6;
					}
				if (thisValue0 == 7 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_VARY = "DemographicsSpeciesTree_VariablePops=3 " + sX0 + " " + Here1_1 + " " + Here2_1 + " " + Here1_2 + " " + Here2_2 + " " + Here1_3 + " " + Here2_3 + " " + Here1_4 + " " + Here2_4 + " " + Here1_5 + " " + Here2_5 + " " + Here1_6 + " " + Here2_6 + " " + Here1_7;
					}
				if (thisValue0 == 8 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_VARY = "DemographicsSpeciesTree_VariablePops=3 " + sX0 + " " + Here1_1 + " " + Here2_1 + " " + Here1_2 + " " + Here2_2 + " " + Here1_3 + " " + Here2_3 + " " + Here1_4 + " " + Here2_4 + " " + Here1_5 + " " + Here2_5 + " " + Here1_6 + " " + Here2_6 + " " + Here1_7 + " " + Here2_7 + " " + Here1_8;
					}
				if (thisValue0 == 9 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_VARY = "DemographicsSpeciesTree_VariablePops=3 " + sX0 + " " + Here1_1 + " " + Here2_1 + " " + Here1_2 + " " + Here2_2 + " " + Here1_3 + " " + Here2_3 + " " + Here1_4 + " " + Here2_4 + " " + Here1_5 + " " + Here2_5 + " " + Here1_6 + " " + Here2_6 + " " + Here1_7 + " " + Here2_7 + " " + Here1_8 + " " + Here2_8 + " " + Here1_9;
					}
				if (thisValue0 == 10 && Error == 0)
					{
					ProteinEvolverABC_DemogPeriodsStructPop_VARY = "DemographicsSpeciesTree_VariablePops=3 " + sX0 + " " + Here1_1 + " " + Here2_1 + " " + Here1_2 + " " + Here2_2 + " " + Here1_3 + " " + Here2_3 + " " + Here1_4 + " " + Here2_4 + " " + Here1_5 + " " + Here2_5 + " " + Here1_6 + " " + Here2_6 + " " + Here1_7 + " " + Here2_7 + " " + Here1_8 + " " + Here2_8 + " " + Here1_9 + " " + Here2_9 + " " + Here1_10;
					}
	
				
				if (Error == 0)
					{
					SavedMultDemogPeriodsStructPop_VARY = 1;
					label4eee.setText("Branch-demographics (Ni Nf) saved");
					label4eee.setVisible(true); // Dated tips saved
					System.out.println("ProteinEvolverABC_DemogPeriodsStructPop_VARY: " + ProteinEvolverABC_DemogPeriodsStructPop_VARY);
					MultDemogPeriodsStructPop_VARYWindow.setVisible(false);
					MultDemogPeriodsStructPop_VARYWindow.dispose();
					System.out.println("SavedMultDemogPeriodsStructPop_VARY: " + SavedMultDemogPeriodsStructPop_VARY);
					}
				}

			}
		}




	// runButtonMultIslandExitHandler button
	public class runButtonMultIslandExitHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			MigrationModels.setSelectedItem("No");
			ProteinEvolverABC_IslandModel = "#MigrationModel=1 4 12 10 3 4";
			ProteinEvolverABC_SteppStoneModel = "#MigrationModel=2 4 12 10 3 4";
 			ProteinEvolverABC_ContIslandModel = "#MigrationModel=3 4 12 10 3 4";
			label4eeeIsland.setVisible(false);
			label4eeeIsland.setText("");
			label4eeeSteppStone.setVisible(false);
			label4eeeSteppStone.setText("");
			label4eeeContIsland.setVisible(false);
			label4eeeContIsland.setText("");
			NumberOfDemes = 0;

			label4l.setVisible(false);
			TextMigrationRateProteinEvolverABC.setVisible(false);
			TextMigrationRateProteinEvolverABC.setText("");
			label4ll.setVisible(false);
			ConvergenceDemesProteinEvolverABC_No.setSelected(true);
			ConvergenceDemesProteinEvolverABC_No.setVisible(false);
			ConvergenceDemesProteinEvolverABC_Yes.setVisible(false);
			
			MultIslandWindow.setVisible(false);
			MultIslandWindow.dispose();
			System.out.println("Do not Island model: " + ProteinEvolverABC_IslandModel);
			}
		}

	

	// runButtonMultIslandSaveNextHandler button
	public class runButtonMultIslandSaveNextHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			Error = 0;
			
			String ProteinEvolverABC_InputIsland_Mult1 = "";
			String ProteinEvolverABC_InputIsland_Mult2 = "";
			String ProteinEvolverABC_InputIsland_Mult3 = "";
			String ProteinEvolverABC_InputIsland_Mult4 = "";
			String ProteinEvolverABC_InputIsland_Mult5 = "";
			String ProteinEvolverABC_InputIsland_Mult6 = "";
			String ProteinEvolverABC_InputIsland_Mult7 = "";
			String ProteinEvolverABC_InputIsland_Mult8 = "";
			String ProteinEvolverABC_InputIsland_Mult9 = "";
			String ProteinEvolverABC_InputIsland_Mult10 = "";
			String ProteinEvolverABC_InputIsland_Mult11 = "";
			String ProteinEvolverABC_InputIsland_Mult12 = "";
			String ProteinEvolverABC_InputIsland_Mult13 = "";
			String ProteinEvolverABC_InputIsland_Mult14 = "";
			String ProteinEvolverABC_InputIsland_Mult15 = "";
			String ProteinEvolverABC_InputIsland_Mult16 = "";
			String ProteinEvolverABC_InputIsland_Mult17 = "";
			String ProteinEvolverABC_InputIsland_Mult18 = "";
			String ProteinEvolverABC_InputIsland_Mult19 = "";
			String ProteinEvolverABC_InputIsland_Mult20 = "";

			// Number of demes
			String sX0 = TextNumberOfMultIslandProteinEvolverABC.getText();
			int thisValue0 = 0;
			if (sX0.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX0.length(); i++) // check integer
    					{
        				char c = sX0.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Number of demes is incorrect: " + sX0);
								JOptionPane.showMessageDialog(null, "Number of demes is incorrect: " + sX0, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					thisValue0 = Integer.parseInt(sX0);
					if (thisValue0 <= 0)
						{
						System.out.println("Number of demes cannot be null or negative: " + thisValue0);
						JOptionPane.showMessageDialog(null, "Number of demes cannot be null or negative: " + thisValue0, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Number of demes: " + sX0);
					}
        		} 
			else
				{
				System.out.println("Number of demes must be introduced");
				JOptionPane.showMessageDialog(null, "Number of demes must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			
			int Counter = 0;


			// Island_1
			int Init_Reg1_1 = 0;
			String sX_Reg1_1 = TextMultIsland_Reg1_1.getText();
			if (sX_Reg1_1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_1.length(); i++) // check integer
    					{
        				char c = sX_Reg1_1.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_1, sample size incorrect: " + sX_Reg1_1);
								JOptionPane.showMessageDialog(null, "Island_1, sample size incorrect: " + sX_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_1 = Integer.parseInt(sX_Reg1_1);
					if (Init_Reg1_1 <= 0 && Error == 0)
						{
						System.out.println("Island_1, sample size cannot be null or negative: " + Init_Reg1_1);
						JOptionPane.showMessageDialog(null, "Island_1, sample size cannot be null or negative: " + Init_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_1, sample size: " + sX_Reg1_1);
					Counter = Counter + Init_Reg1_1;
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("Island_1, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_1, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			// Island_2
			int Init_Reg1_2 = 0;
			String sX_Reg1_2 = TextMultIsland_Reg1_2.getText();
			if (sX_Reg1_2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_2.length(); i++) // check integer
    					{
        				char c = sX_Reg1_2.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_2, sample size incorrect: " + sX_Reg1_2);
								JOptionPane.showMessageDialog(null, "Island_2, sample size incorrect: " + sX_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_2 = Integer.parseInt(sX_Reg1_2);
					if (Init_Reg1_2 <= 0 && Error == 0)
						{
						System.out.println("Island_2, sample size cannot be null or negative: " + Init_Reg1_2);
						JOptionPane.showMessageDialog(null, "Island_2, sample size cannot be null or negative: " + Init_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_2, sample size: " + sX_Reg1_2);
					Counter = Counter + Init_Reg1_2;
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("Island_2, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_2, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// Island_3
			int Init_Reg1_3 = 0;
			String sX_Reg1_3 = TextMultIsland_Reg1_3.getText();
			if (sX_Reg1_3.trim().length() != 0 && thisValue0 > 2) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_3.length(); i++) // check integer
    					{
        				char c = sX_Reg1_3.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_3, sample size incorrect: " + sX_Reg1_3);
								JOptionPane.showMessageDialog(null, "Island_3, sample size incorrect: " + sX_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_3 = Integer.parseInt(sX_Reg1_3);
					if (Init_Reg1_3 <= 0 && Error == 0)
						{
						System.out.println("Island_3, sample size cannot be null or negative: " + Init_Reg1_3);
						JOptionPane.showMessageDialog(null, "Island_3, sample size cannot be null or negative: " + Init_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_3, sample size: " + sX_Reg1_3);
					Counter = Counter + Init_Reg1_3;
					}
        		} 
			else
				{
				if (thisValue0 > 2 && Error == 0)
					{
					System.out.println("Island_3, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_3, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// Island_4
			int Init_Reg1_4 = 0;
			String sX_Reg1_4 = TextMultIsland_Reg1_4.getText();
			if (sX_Reg1_4.trim().length() != 0 && thisValue0 > 3) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_4.length(); i++) // check integer
    					{
        				char c = sX_Reg1_4.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_4, sample size incorrect: " + sX_Reg1_4);
								JOptionPane.showMessageDialog(null, "Island_4, sample size incorrect: " + sX_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_4 = Integer.parseInt(sX_Reg1_4);
					if (Init_Reg1_4 <= 0 && Error == 0)
						{
						System.out.println("Island_4, sample size cannot be null or negative: " + Init_Reg1_4);
						JOptionPane.showMessageDialog(null, "Island_4, sample size cannot be null or negative: " + Init_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_4, sample size: " + sX_Reg1_4);
					Counter = Counter + Init_Reg1_4;
					}
        		} 
			else
				{
				if (thisValue0 > 3 && Error == 0)
					{
					System.out.println("Island_4, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_4, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// Island_5
			int Init_Reg1_5 = 0;
			String sX_Reg1_5 = TextMultIsland_Reg1_5.getText();
			if (sX_Reg1_5.trim().length() != 0 && thisValue0 > 4) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_5.length(); i++) // check integer
    					{
        				char c = sX_Reg1_5.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_5, sample size incorrect: " + sX_Reg1_5);
								JOptionPane.showMessageDialog(null, "Island_5, sample size incorrect: " + sX_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_5 = Integer.parseInt(sX_Reg1_5);
					if (Init_Reg1_5 <= 0 && Error == 0)
						{
						System.out.println("Island_5, sample size cannot be null or negative: " + Init_Reg1_5);
						JOptionPane.showMessageDialog(null, "Island_5, sample size cannot be null or negative: " + Init_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_5, sample size: " + sX_Reg1_5);
					Counter = Counter + Init_Reg1_5;
					}
        		} 
			else
				{
				if (thisValue0 > 4 && Error == 0)
					{
					System.out.println("Island_5, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_5, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// Island_6
			int Init_Reg1_6 = 0;
			String sX_Reg1_6 = TextMultIsland_Reg1_6.getText();
			if (sX_Reg1_6.trim().length() != 0 && thisValue0 > 5) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_6.length(); i++) // check integer
    					{
        				char c = sX_Reg1_6.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_6, sample size incorrect: " + sX_Reg1_6);
								JOptionPane.showMessageDialog(null, "Island_6, sample size incorrect: " + sX_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_6 = Integer.parseInt(sX_Reg1_6);
					if (Init_Reg1_6 <= 0 && Error == 0)
						{
						System.out.println("Island_6, sample size cannot be null or negative: " + Init_Reg1_6);
						JOptionPane.showMessageDialog(null, "Island_6, sample size cannot be null or negative: " + Init_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_6, sample size: " + sX_Reg1_6);
					Counter = Counter + Init_Reg1_6;
					}
        		} 
			else
				{
				if (thisValue0 > 5 && Error == 0)
					{
					System.out.println("Island_6, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_6, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// Island_7
			int Init_Reg1_7 = 0;
			String sX_Reg1_7 = TextMultIsland_Reg1_7.getText();
			if (sX_Reg1_7.trim().length() != 0 && thisValue0 > 6) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_7.length(); i++) // check integer
    					{
        				char c = sX_Reg1_7.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_7, sample size incorrect: " + sX_Reg1_7);
								JOptionPane.showMessageDialog(null, "Island_7, sample size incorrect: " + sX_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_7 = Integer.parseInt(sX_Reg1_7);
					if (Init_Reg1_7 <= 0 && Error == 0)
						{
						System.out.println("Island_7, sample size cannot be null or negative: " + Init_Reg1_7);
						JOptionPane.showMessageDialog(null, "Island_7, sample size cannot be null or negative: " + Init_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_7, sample size: " + sX_Reg1_7);
					Counter = Counter + Init_Reg1_7;
					}
        		} 
			else
				{
				if (thisValue0 > 6 && Error == 0)
					{
					System.out.println("Island_7, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_7, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// Island_8
			int Init_Reg1_8 = 0;
			String sX_Reg1_8 = TextMultIsland_Reg1_8.getText();
			if (sX_Reg1_8.trim().length() != 0 && thisValue0 > 7) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_8.length(); i++) // check integer
    					{
        				char c = sX_Reg1_8.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_8, sample size incorrect: " + sX_Reg1_8);
								JOptionPane.showMessageDialog(null, "Island_8, sample size incorrect: " + sX_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_8 = Integer.parseInt(sX_Reg1_8);
					if (Init_Reg1_8 <= 0 && Error == 0)
						{
						System.out.println("Island_8, sample size cannot be null or negative: " + Init_Reg1_8);
						JOptionPane.showMessageDialog(null, "Island_8, sample size cannot be null or negative: " + Init_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_8, sample size: " + sX_Reg1_8);
					Counter = Counter + Init_Reg1_8;
					}
        		} 
			else
				{
				if (thisValue0 > 7 && Error == 0)
					{
					System.out.println("Island_8, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_8, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// Island_9
			int Init_Reg1_9 = 0;
			String sX_Reg1_9 = TextMultIsland_Reg1_9.getText();
			if (sX_Reg1_9.trim().length() != 0 && thisValue0 > 8) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_9.length(); i++) // check integer
    					{
        				char c = sX_Reg1_9.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_9, sample size incorrect: " + sX_Reg1_9);
								JOptionPane.showMessageDialog(null, "Island_9, sample size incorrect: " + sX_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_9 = Integer.parseInt(sX_Reg1_9);
					if (Init_Reg1_9 <= 0 && Error == 0)
						{
						System.out.println("Island_9, sample size cannot be null or negative: " + Init_Reg1_9);
						JOptionPane.showMessageDialog(null, "Island_9, sample size cannot be null or negative: " + Init_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_9, sample size: " + sX_Reg1_9);
					Counter = Counter + Init_Reg1_9;
					}
        		} 
			else
				{
				if (thisValue0 > 8 && Error == 0)
					{
					System.out.println("Island_9, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_9, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// Island_10
			int Init_Reg1_10 = 0;
			String sX_Reg1_10 = TextMultIsland_Reg1_10.getText();
			if (sX_Reg1_10.trim().length() != 0 && thisValue0 > 9) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_10.length(); i++) // check integer
    					{
        				char c = sX_Reg1_10.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_10, sample size incorrect: " + sX_Reg1_10);
								JOptionPane.showMessageDialog(null, "Island_10, sample size incorrect: " + sX_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_10 = Integer.parseInt(sX_Reg1_10);
					if (Init_Reg1_10 <= 0 && Error == 0)
						{
						System.out.println("Island_10, sample size cannot be null or negative: " + Init_Reg1_10);
						JOptionPane.showMessageDialog(null, "Island_10, sample size cannot be null or negative: " + Init_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_10, sample size: " + sX_Reg1_10);
					Counter = Counter + Init_Reg1_10;
					}
        		} 
			else
				{
				if (thisValue0 > 9 && Error == 0)
					{
					System.out.println("Island_10, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_10, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// Island_11
			int Init_Reg1_11 = 0;
			String sX_Reg1_11 = TextMultIsland_Reg1_11.getText();
			if (sX_Reg1_11.trim().length() != 0 && thisValue0 > 10) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_11.length(); i++) // check integer
    					{
        				char c = sX_Reg1_11.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_11, sample size incorrect: " + sX_Reg1_11);
								JOptionPane.showMessageDialog(null, "Island_11, sample size incorrect: " + sX_Reg1_11, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_11 = Integer.parseInt(sX_Reg1_11);
					if (Init_Reg1_11 <= 0 && Error == 0)
						{
						System.out.println("Island_11, sample size cannot be null or negative: " + Init_Reg1_11);
						JOptionPane.showMessageDialog(null, "Island_11, sample size cannot be null or negative: " + Init_Reg1_11, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_11, sample size: " + sX_Reg1_11);
					Counter = Counter + Init_Reg1_11;
					}
        		} 
			else
				{
				if (thisValue0 > 10 && Error == 0)
					{
					System.out.println("Island_11, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_11, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// Island_12
			int Init_Reg1_12 = 0;
			String sX_Reg1_12 = TextMultIsland_Reg1_12.getText();
			if (sX_Reg1_12.trim().length() != 0 && thisValue0 > 11) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_12.length(); i++) // check integer
    					{
        				char c = sX_Reg1_12.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_12, sample size incorrect: " + sX_Reg1_12);
								JOptionPane.showMessageDialog(null, "Island_12, sample size incorrect: " + sX_Reg1_12, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_12 = Integer.parseInt(sX_Reg1_12);
					if (Init_Reg1_12 <= 0 && Error == 0)
						{
						System.out.println("Island_12, sample size cannot be null or negative: " + Init_Reg1_12);
						JOptionPane.showMessageDialog(null, "Island_12, sample size cannot be null or negative: " + Init_Reg1_12, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_12, sample size: " + sX_Reg1_12);
					Counter = Counter + Init_Reg1_12;
					}
        		} 
			else
				{
				if (thisValue0 > 11 && Error == 0)
					{
					System.out.println("Island_12, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_12, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// Island_13
			int Init_Reg1_13 = 0;
			String sX_Reg1_13 = TextMultIsland_Reg1_13.getText();
			if (sX_Reg1_13.trim().length() != 0 && thisValue0 > 12) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_13.length(); i++) // check integer
    					{
        				char c = sX_Reg1_13.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_13, sample size incorrect: " + sX_Reg1_13);
								JOptionPane.showMessageDialog(null, "Island_13, sample size incorrect: " + sX_Reg1_13, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_13 = Integer.parseInt(sX_Reg1_13);
					if (Init_Reg1_13 <= 0 && Error == 0)
						{
						System.out.println("Island_13, sample size cannot be null or negative: " + Init_Reg1_13);
						JOptionPane.showMessageDialog(null, "Island_13, sample size cannot be null or negative: " + Init_Reg1_13, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_13, sample size: " + sX_Reg1_13);
					Counter = Counter + Init_Reg1_13;
					}
        		} 
			else
				{
				if (thisValue0 > 12 && Error == 0)
					{
					System.out.println("Island_13, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_13, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// Island_14
			int Init_Reg1_14 = 0;
			String sX_Reg1_14 = TextMultIsland_Reg1_14.getText();
			if (sX_Reg1_14.trim().length() != 0 && thisValue0 > 13) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_14.length(); i++) // check integer
    					{
        				char c = sX_Reg1_14.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_14, sample size incorrect: " + sX_Reg1_14);
								JOptionPane.showMessageDialog(null, "Island_14, sample size incorrect: " + sX_Reg1_14, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_14 = Integer.parseInt(sX_Reg1_14);
					if (Init_Reg1_14 <= 0 && Error == 0)
						{
						System.out.println("Island_14, sample size cannot be null or negative: " + Init_Reg1_14);
						JOptionPane.showMessageDialog(null, "Island_14, sample size cannot be null or negative: " + Init_Reg1_14, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_14, sample size: " + sX_Reg1_14);
					Counter = Counter + Init_Reg1_14;
					}
        		} 
			else
				{
				if (thisValue0 > 13 && Error == 0)
					{
					System.out.println("Island_14, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_14, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

			// Island_15
			int Init_Reg1_15 = 0;
			String sX_Reg1_15 = TextMultIsland_Reg1_15.getText();
			if (sX_Reg1_15.trim().length() != 0 && thisValue0 > 14) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_15.length(); i++) // check integer
    					{
        				char c = sX_Reg1_15.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_15, sample size incorrect: " + sX_Reg1_15);
								JOptionPane.showMessageDialog(null, "Island_15, sample size incorrect: " + sX_Reg1_15, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_15 = Integer.parseInt(sX_Reg1_15);
					if (Init_Reg1_15 <= 0 && Error == 0)
						{
						System.out.println("Island_15, sample size cannot be null or negative: " + Init_Reg1_15);
						JOptionPane.showMessageDialog(null, "Island_15, sample size cannot be null or negative: " + Init_Reg1_15, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_15, sample size: " + sX_Reg1_15);
					Counter = Counter + Init_Reg1_15;
					}
        		} 
			else
				{
				if (thisValue0 > 14 && Error == 0)
					{
					System.out.println("Island_15, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_15, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

			// Island_16
			int Init_Reg1_16 = 0;
			String sX_Reg1_16 = TextMultIsland_Reg1_16.getText();
			if (sX_Reg1_16.trim().length() != 0 && thisValue0 > 15) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_16.length(); i++) // check integer
    					{
        				char c = sX_Reg1_16.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_16, sample size incorrect: " + sX_Reg1_16);
								JOptionPane.showMessageDialog(null, "Island_16, sample size incorrect: " + sX_Reg1_16, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_16 = Integer.parseInt(sX_Reg1_16);
					if (Init_Reg1_16 <= 0 && Error == 0)
						{
						System.out.println("Island_16, sample size cannot be null or negative: " + Init_Reg1_16);
						JOptionPane.showMessageDialog(null, "Island_16, sample size cannot be null or negative: " + Init_Reg1_16, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_16, sample size: " + sX_Reg1_16);
					Counter = Counter + Init_Reg1_16;
					}
        		} 
			else
				{
				if (thisValue0 > 15 && Error == 0)
					{
					System.out.println("Island_16, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_16, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

			// Island_17
			int Init_Reg1_17 = 0;
			String sX_Reg1_17 = TextMultIsland_Reg1_17.getText();
			if (sX_Reg1_17.trim().length() != 0 && thisValue0 > 16) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_17.length(); i++) // check integer
    					{
        				char c = sX_Reg1_17.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_17, sample size incorrect: " + sX_Reg1_17);
								JOptionPane.showMessageDialog(null, "Island_17, sample size incorrect: " + sX_Reg1_17, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_17 = Integer.parseInt(sX_Reg1_17);
					if (Init_Reg1_17 <= 0 && Error == 0)
						{
						System.out.println("Island_17, sample size cannot be null or negative: " + Init_Reg1_17);
						JOptionPane.showMessageDialog(null, "Island_17, sample size cannot be null or negative: " + Init_Reg1_17, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_17, sample size: " + sX_Reg1_17);
					Counter = Counter + Init_Reg1_17;
					}
        		} 
			else
				{
				if (thisValue0 > 16 && Error == 0)
					{
					System.out.println("Island_17, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_17, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

			// Island_18
			int Init_Reg1_18 = 0;
			String sX_Reg1_18 = TextMultIsland_Reg1_18.getText();
			if (sX_Reg1_18.trim().length() != 0 && thisValue0 > 17) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_18.length(); i++) // check integer
    					{
        				char c = sX_Reg1_18.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_18, sample size incorrect: " + sX_Reg1_18);
								JOptionPane.showMessageDialog(null, "Island_18, sample size incorrect: " + sX_Reg1_18, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_18 = Integer.parseInt(sX_Reg1_18);
					if (Init_Reg1_18 <= 0 && Error == 0)
						{
						System.out.println("Island_18, sample size cannot be null or negative: " + Init_Reg1_18);
						JOptionPane.showMessageDialog(null, "Island_18, sample size cannot be null or negative: " + Init_Reg1_18, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_18, sample size: " + sX_Reg1_18);
					Counter = Counter + Init_Reg1_18;
					}
        		} 
			else
				{
				if (thisValue0 > 17 && Error == 0)
					{
					System.out.println("Island_18, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_18, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

			// Island_19
			int Init_Reg1_19 = 0;
			String sX_Reg1_19 = TextMultIsland_Reg1_19.getText();
			if (sX_Reg1_19.trim().length() != 0 && thisValue0 > 18) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_19.length(); i++) // check integer
    					{
        				char c = sX_Reg1_19.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_19, sample size incorrect: " + sX_Reg1_19);
								JOptionPane.showMessageDialog(null, "Island_19, sample size incorrect: " + sX_Reg1_19, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_19 = Integer.parseInt(sX_Reg1_19);
					if (Init_Reg1_19 <= 0 && Error == 0)
						{
						System.out.println("Island_19, sample size cannot be null or negative: " + Init_Reg1_19);
						JOptionPane.showMessageDialog(null, "Island_19, sample size cannot be null or negative: " + Init_Reg1_19, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_19, sample size: " + sX_Reg1_19);
					Counter = Counter + Init_Reg1_19;
					}
        		} 
			else
				{
				if (thisValue0 > 18 && Error == 0)
					{
					System.out.println("Island_19, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_19, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// Island_20
			int Init_Reg1_20 = 0;
			String sX_Reg1_20 = TextMultIsland_Reg1_20.getText();
			if (sX_Reg1_20.trim().length() != 0 && thisValue0 > 19) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_20.length(); i++) // check integer
    					{
        				char c = sX_Reg1_20.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Island_20, sample size incorrect: " + sX_Reg1_20);
								JOptionPane.showMessageDialog(null, "Island_20, sample size incorrect: " + sX_Reg1_20, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_20 = Integer.parseInt(sX_Reg1_20);
					if (Init_Reg1_20 <= 0 && Error == 0)
						{
						System.out.println("Island_20, sample size cannot be null or negative: " + Init_Reg1_20);
						JOptionPane.showMessageDialog(null, "Island_20, sample size cannot be null or negative: " + Init_Reg1_20, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Island_20, sample size: " + sX_Reg1_20);
					Counter = Counter + Init_Reg1_20;
					}
        		} 
			else
				{
				if (thisValue0 > 19 && Error == 0)
					{
					System.out.println("Island_20, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "Island_20, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			

		// We need sample size here to check
			if (Counter != SampleSize && Error == 0)
				{
				System.out.println("The number of samples in demes: " + Counter + " should be equal to the sample size: " + SampleSize);
				JOptionPane.showMessageDialog(null, "The number of samples in demes should be equal to the sample size: " + SampleSize, " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}
		

		// Checking			
			if (Error == 0)
				{
				String Here1_1 = TextMultIsland_Reg1_1.getText();
				ProteinEvolverABC_InputIsland_Mult1 =  Here1_1;
				
				String Here1_2 = TextMultIsland_Reg1_2.getText();
				ProteinEvolverABC_InputIsland_Mult2 = Here1_2;
				
				String Here1_3 = TextMultIsland_Reg1_3.getText();
				ProteinEvolverABC_InputIsland_Mult3 = Here1_3;
				
				String Here1_4 = TextMultIsland_Reg1_4.getText();
				ProteinEvolverABC_InputIsland_Mult4 = Here1_4;
				
				String Here1_5 = TextMultIsland_Reg1_5.getText();
				ProteinEvolverABC_InputIsland_Mult5 = Here1_5;
				
				String Here1_6 = TextMultIsland_Reg1_6.getText();
				ProteinEvolverABC_InputIsland_Mult6 = Here1_6;
				
				String Here1_7 = TextMultIsland_Reg1_7.getText();
				ProteinEvolverABC_InputIsland_Mult7 = Here1_7;
				
				String Here1_8 = TextMultIsland_Reg1_8.getText();
				ProteinEvolverABC_InputIsland_Mult8 = Here1_8;
				
				String Here1_9 = TextMultIsland_Reg1_9.getText();
				ProteinEvolverABC_InputIsland_Mult9 = Here1_9;
				
				String Here1_10 = TextMultIsland_Reg1_10.getText();
				ProteinEvolverABC_InputIsland_Mult10 = Here1_10;

				String Here1_11 = TextMultIsland_Reg1_11.getText();
				ProteinEvolverABC_InputIsland_Mult11 = Here1_11;

				String Here1_12 = TextMultIsland_Reg1_12.getText();
				ProteinEvolverABC_InputIsland_Mult12 = Here1_12;

				String Here1_13 = TextMultIsland_Reg1_13.getText();
				ProteinEvolverABC_InputIsland_Mult13 = Here1_13;

				String Here1_14 = TextMultIsland_Reg1_14.getText();
				ProteinEvolverABC_InputIsland_Mult14 = Here1_14;

				String Here1_15 = TextMultIsland_Reg1_15.getText();
				ProteinEvolverABC_InputIsland_Mult15 = Here1_15;

				String Here1_16 = TextMultIsland_Reg1_16.getText();
				ProteinEvolverABC_InputIsland_Mult16 = Here1_16;

				String Here1_17 = TextMultIsland_Reg1_17.getText();
				ProteinEvolverABC_InputIsland_Mult17 = Here1_17;

				String Here1_18 = TextMultIsland_Reg1_18.getText();
				ProteinEvolverABC_InputIsland_Mult18 = Here1_18;

				String Here1_19 = TextMultIsland_Reg1_19.getText();
				ProteinEvolverABC_InputIsland_Mult19 = Here1_19;

				String Here1_20 = TextMultIsland_Reg1_20.getText();
				ProteinEvolverABC_InputIsland_Mult20 = Here1_20;
				
				System.out.println("Island_1: " + ProteinEvolverABC_InputIsland_Mult1);
				System.out.println("Island_2: " + ProteinEvolverABC_InputIsland_Mult2);
				System.out.println("Island_3: " + ProteinEvolverABC_InputIsland_Mult3);
				System.out.println("Island_4: " + ProteinEvolverABC_InputIsland_Mult4);
				System.out.println("Island_5: " + ProteinEvolverABC_InputIsland_Mult5);
				System.out.println("Island_6: " + ProteinEvolverABC_InputIsland_Mult6);
				System.out.println("Island_7: " + ProteinEvolverABC_InputIsland_Mult7);
				System.out.println("Island_8: " + ProteinEvolverABC_InputIsland_Mult8);
				System.out.println("Island_9: " + ProteinEvolverABC_InputIsland_Mult9);
				System.out.println("Island_10: " + ProteinEvolverABC_InputIsland_Mult10);
				System.out.println("Island_11: " + ProteinEvolverABC_InputIsland_Mult11);
				System.out.println("Island_12: " + ProteinEvolverABC_InputIsland_Mult12);
				System.out.println("Island_13: " + ProteinEvolverABC_InputIsland_Mult13);
				System.out.println("Island_14: " + ProteinEvolverABC_InputIsland_Mult14);
				System.out.println("Island_15: " + ProteinEvolverABC_InputIsland_Mult15);
				System.out.println("Island_16: " + ProteinEvolverABC_InputIsland_Mult16);
				System.out.println("Island_17: " + ProteinEvolverABC_InputIsland_Mult17);
				System.out.println("Island_18: " + ProteinEvolverABC_InputIsland_Mult18);
				System.out.println("Island_19: " + ProteinEvolverABC_InputIsland_Mult19);
				System.out.println("Island_20: " + ProteinEvolverABC_InputIsland_Mult20);
				
				if (thisValue0 == 0)
					{
					System.out.println("Strange error in Island model. thisValue0 = " + thisValue0);
					JOptionPane.showMessageDialog(null, "Strange error in Island model. thisValue0 = " + thisValue0 ," ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				if (thisValue0 == 1)
					{
					System.out.println("More than 1 deme is required to use Island model");
					JOptionPane.showMessageDialog(null, "More than 1 deme is required to use Island model", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				if (thisValue0 == 2 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2;
					}
				if (thisValue0 == 3 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3;
					}
				if (thisValue0 == 4 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4;
					}
				if (thisValue0 == 5 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5;
					}
				if (thisValue0 == 6 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5 + " " + ProteinEvolverABC_InputIsland_Mult6;
					}
				if (thisValue0 == 7 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5 + " " + ProteinEvolverABC_InputIsland_Mult6 + " " + ProteinEvolverABC_InputIsland_Mult7;
					}
				if (thisValue0 == 8 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5 + " " + ProteinEvolverABC_InputIsland_Mult6 + " " + ProteinEvolverABC_InputIsland_Mult7 + " " + ProteinEvolverABC_InputIsland_Mult8;
					}
				if (thisValue0 == 9 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5 + " " + ProteinEvolverABC_InputIsland_Mult6 + " " + ProteinEvolverABC_InputIsland_Mult7 + " " + ProteinEvolverABC_InputIsland_Mult8 + " " + ProteinEvolverABC_InputIsland_Mult9;
					}
				if (thisValue0 == 10 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5 + " " + ProteinEvolverABC_InputIsland_Mult6 + " " + ProteinEvolverABC_InputIsland_Mult7 + " " + ProteinEvolverABC_InputIsland_Mult8 + " " + ProteinEvolverABC_InputIsland_Mult9 + " " + ProteinEvolverABC_InputIsland_Mult10;
					}
				if (thisValue0 == 11 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5 + " " + ProteinEvolverABC_InputIsland_Mult6 + " " + ProteinEvolverABC_InputIsland_Mult7 + " " + ProteinEvolverABC_InputIsland_Mult8 + " " + ProteinEvolverABC_InputIsland_Mult9 + " " + ProteinEvolverABC_InputIsland_Mult10 + " " + ProteinEvolverABC_InputIsland_Mult11;
					}
				if (thisValue0 == 12 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5 + " " + ProteinEvolverABC_InputIsland_Mult6 + " " + ProteinEvolverABC_InputIsland_Mult7 + " " + ProteinEvolverABC_InputIsland_Mult8 + " " + ProteinEvolverABC_InputIsland_Mult9 + " " + ProteinEvolverABC_InputIsland_Mult10 + " " + ProteinEvolverABC_InputIsland_Mult11 + " " + ProteinEvolverABC_InputIsland_Mult12;
					}
				if (thisValue0 == 13 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5 + " " + ProteinEvolverABC_InputIsland_Mult6 + " " + ProteinEvolverABC_InputIsland_Mult7 + " " + ProteinEvolverABC_InputIsland_Mult8 + " " + ProteinEvolverABC_InputIsland_Mult9 + " " + ProteinEvolverABC_InputIsland_Mult10 + " " + ProteinEvolverABC_InputIsland_Mult11 + " " + ProteinEvolverABC_InputIsland_Mult12 + " " + ProteinEvolverABC_InputIsland_Mult13;
					}
				if (thisValue0 == 14 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5 + " " + ProteinEvolverABC_InputIsland_Mult6 + " " + ProteinEvolverABC_InputIsland_Mult7 + " " + ProteinEvolverABC_InputIsland_Mult8 + " " + ProteinEvolverABC_InputIsland_Mult9 + " " + ProteinEvolverABC_InputIsland_Mult10 + " " + ProteinEvolverABC_InputIsland_Mult11 + " " + ProteinEvolverABC_InputIsland_Mult12 + " " + ProteinEvolverABC_InputIsland_Mult13 + " " + ProteinEvolverABC_InputIsland_Mult14;
					}
				if (thisValue0 == 15 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5 + " " + ProteinEvolverABC_InputIsland_Mult6 + " " + ProteinEvolverABC_InputIsland_Mult7 + " " + ProteinEvolverABC_InputIsland_Mult8 + " " + ProteinEvolverABC_InputIsland_Mult9 + " " + ProteinEvolverABC_InputIsland_Mult10 + " " + ProteinEvolverABC_InputIsland_Mult11 + " " + ProteinEvolverABC_InputIsland_Mult12 + " " + ProteinEvolverABC_InputIsland_Mult13 + " " + ProteinEvolverABC_InputIsland_Mult14 + " " + ProteinEvolverABC_InputIsland_Mult15;
					}
				if (thisValue0 == 16 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5 + " " + ProteinEvolverABC_InputIsland_Mult6 + " " + ProteinEvolverABC_InputIsland_Mult7 + " " + ProteinEvolverABC_InputIsland_Mult8 + " " + ProteinEvolverABC_InputIsland_Mult9 + " " + ProteinEvolverABC_InputIsland_Mult10 + " " + ProteinEvolverABC_InputIsland_Mult11 + " " + ProteinEvolverABC_InputIsland_Mult12 + " " + ProteinEvolverABC_InputIsland_Mult13 + " " + ProteinEvolverABC_InputIsland_Mult14 + " " + ProteinEvolverABC_InputIsland_Mult15 + " " + ProteinEvolverABC_InputIsland_Mult16;
					}
				if (thisValue0 == 17 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5 + " " + ProteinEvolverABC_InputIsland_Mult6 + " " + ProteinEvolverABC_InputIsland_Mult7 + " " + ProteinEvolverABC_InputIsland_Mult8 + " " + ProteinEvolverABC_InputIsland_Mult9 + " " + ProteinEvolverABC_InputIsland_Mult10 + " " + ProteinEvolverABC_InputIsland_Mult11 + " " + ProteinEvolverABC_InputIsland_Mult12 + " " + ProteinEvolverABC_InputIsland_Mult13 + " " + ProteinEvolverABC_InputIsland_Mult14 + " " + ProteinEvolverABC_InputIsland_Mult15 + " " + ProteinEvolverABC_InputIsland_Mult16 + " " + ProteinEvolverABC_InputIsland_Mult17;
					}
				if (thisValue0 == 18 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5 + " " + ProteinEvolverABC_InputIsland_Mult6 + " " + ProteinEvolverABC_InputIsland_Mult7 + " " + ProteinEvolverABC_InputIsland_Mult8 + " " + ProteinEvolverABC_InputIsland_Mult9 + " " + ProteinEvolverABC_InputIsland_Mult10 + " " + ProteinEvolverABC_InputIsland_Mult11 + " " + ProteinEvolverABC_InputIsland_Mult12 + " " + ProteinEvolverABC_InputIsland_Mult13 + " " + ProteinEvolverABC_InputIsland_Mult14 + " " + ProteinEvolverABC_InputIsland_Mult15 + " " + ProteinEvolverABC_InputIsland_Mult16 + " " + ProteinEvolverABC_InputIsland_Mult17 + " " + ProteinEvolverABC_InputIsland_Mult18;
					}
				if (thisValue0 == 19 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5 + " " + ProteinEvolverABC_InputIsland_Mult6 + " " + ProteinEvolverABC_InputIsland_Mult7 + " " + ProteinEvolverABC_InputIsland_Mult8 + " " + ProteinEvolverABC_InputIsland_Mult9 + " " + ProteinEvolverABC_InputIsland_Mult10 + " " + ProteinEvolverABC_InputIsland_Mult11 + " " + ProteinEvolverABC_InputIsland_Mult12 + " " + ProteinEvolverABC_InputIsland_Mult13 + " " + ProteinEvolverABC_InputIsland_Mult14 + " " + ProteinEvolverABC_InputIsland_Mult15 + " " + ProteinEvolverABC_InputIsland_Mult16 + " " + ProteinEvolverABC_InputIsland_Mult17 + " " + ProteinEvolverABC_InputIsland_Mult18 + " " + ProteinEvolverABC_InputIsland_Mult19;
					}
				if (thisValue0 == 20 && Error == 0)
					{
					ProteinEvolverABC_IslandModel = "MigrationModel=1 " + sX0 + " " + ProteinEvolverABC_InputIsland_Mult1 + " " + ProteinEvolverABC_InputIsland_Mult2 + " " + ProteinEvolverABC_InputIsland_Mult3 + " " + ProteinEvolverABC_InputIsland_Mult4 + " " + ProteinEvolverABC_InputIsland_Mult5 + " " + ProteinEvolverABC_InputIsland_Mult6 + " " + ProteinEvolverABC_InputIsland_Mult7 + " " + ProteinEvolverABC_InputIsland_Mult8 + " " + ProteinEvolverABC_InputIsland_Mult9 + " " + ProteinEvolverABC_InputIsland_Mult10 + " " + ProteinEvolverABC_InputIsland_Mult11 + " " + ProteinEvolverABC_InputIsland_Mult12 + " " + ProteinEvolverABC_InputIsland_Mult13 + " " + ProteinEvolverABC_InputIsland_Mult14 + " " + ProteinEvolverABC_InputIsland_Mult15 + " " + ProteinEvolverABC_InputIsland_Mult16 + " " + ProteinEvolverABC_InputIsland_Mult17 + " " + ProteinEvolverABC_InputIsland_Mult18 + " " + ProteinEvolverABC_InputIsland_Mult19 + " " + ProteinEvolverABC_InputIsland_Mult20;
					}
	
				
				if (Error == 0)
					{
					SavedMultIsland = 1;
					label4eeeIsland.setText("Island model was saved");
					label4eeeIsland.setVisible(true); // Dated tips saved
					System.out.println("ProteinEvolverABC_IslandModel: " + ProteinEvolverABC_IslandModel);
					MultIslandWindow.setVisible(false);
					MultIslandWindow.dispose();
					System.out.println("SavedMultIsland: " + SavedMultIsland);
					NumberOfDemes = thisValue0;
					}
				}

			}
		}




	// runButtonMultSteppStoneExitHandler button
	public class runButtonMultSteppStoneExitHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			MigrationModels.setSelectedItem("No");
			ProteinEvolverABC_IslandModel = "#MigrationModel=1 4 12 10 3 4";
			ProteinEvolverABC_SteppStoneModel = "#MigrationModel=2 4 12 10 3 4";
			ProteinEvolverABC_ContIslandModel = "#MigrationModel=3 4 12 10 3 4";
			label4eeeIsland.setVisible(false);
			label4eeeIsland.setText("");
			label4eeeSteppStone.setVisible(false);
			label4eeeSteppStone.setText("");
			label4eeeContIsland.setVisible(false);
			label4eeeContIsland.setText("");
			NumberOfDemes = 0;

			label4l.setVisible(false);
			TextMigrationRateProteinEvolverABC.setVisible(false);
			TextMigrationRateProteinEvolverABC.setText("");
			label4ll.setVisible(false);
			ConvergenceDemesProteinEvolverABC_No.setSelected(true);
			ConvergenceDemesProteinEvolverABC_No.setVisible(false);
			ConvergenceDemesProteinEvolverABC_Yes.setVisible(false);
			
			MultSteppStoneWindow.setVisible(false);
			MultSteppStoneWindow.dispose();
			System.out.println("Do not SteppStone model: " + ProteinEvolverABC_SteppStoneModel);
			}
		}

	

	// runButtonMultSteppStoneSaveNextHandler button
	public class runButtonMultSteppStoneSaveNextHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			Error = 0;
			
			String ProteinEvolverABC_InputSteppStone_Mult1 = "";
			String ProteinEvolverABC_InputSteppStone_Mult2 = "";
			String ProteinEvolverABC_InputSteppStone_Mult3 = "";
			String ProteinEvolverABC_InputSteppStone_Mult4 = "";
			String ProteinEvolverABC_InputSteppStone_Mult5 = "";
			String ProteinEvolverABC_InputSteppStone_Mult6 = "";
			String ProteinEvolverABC_InputSteppStone_Mult7 = "";
			String ProteinEvolverABC_InputSteppStone_Mult8 = "";
			String ProteinEvolverABC_InputSteppStone_Mult9 = "";
			String ProteinEvolverABC_InputSteppStone_Mult10 = "";
			String ProteinEvolverABC_InputSteppStone_Mult11 = "";
			String ProteinEvolverABC_InputSteppStone_Mult12 = "";
			String ProteinEvolverABC_InputSteppStone_Mult13 = "";
			String ProteinEvolverABC_InputSteppStone_Mult14 = "";
			String ProteinEvolverABC_InputSteppStone_Mult15 = "";
			String ProteinEvolverABC_InputSteppStone_Mult16 = "";
			String ProteinEvolverABC_InputSteppStone_Mult17 = "";
			String ProteinEvolverABC_InputSteppStone_Mult18 = "";
			String ProteinEvolverABC_InputSteppStone_Mult19 = "";
			String ProteinEvolverABC_InputSteppStone_Mult20 = "";

			// Number of demes
			String sX0 = TextNumberOfMultSteppStoneProteinEvolverABC.getText();
			int thisValue0 = 0;
			if (sX0.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX0.length(); i++) // check integer
    					{
        				char c = sX0.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Number of demes is incorrect: " + sX0);
								JOptionPane.showMessageDialog(null, "Number of demes is incorrect: " + sX0, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					thisValue0 = Integer.parseInt(sX0);
					if (thisValue0 <= 0)
						{
						System.out.println("Number of demes cannot be null or negative: " + thisValue0);
						JOptionPane.showMessageDialog(null, "Number of demes cannot be null or negative: " + thisValue0, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Number of demes: " + sX0);
					}
        		} 
			else
				{
				System.out.println("Number of demes must be introduced");
				JOptionPane.showMessageDialog(null, "Number of demes must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			
			int Counter = 0;


			// SteppStone_1
			int Init_Reg1_1 = 0;
			String sX_Reg1_1 = TextMultSteppStone_Reg1_1.getText();
			if (sX_Reg1_1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_1.length(); i++) // check integer
    					{
        				char c = sX_Reg1_1.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_1, sample size incorrect: " + sX_Reg1_1);
								JOptionPane.showMessageDialog(null, "SteppStone_1, sample size incorrect: " + sX_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_1 = Integer.parseInt(sX_Reg1_1);
					if (Init_Reg1_1 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_1, sample size cannot be null or negative: " + Init_Reg1_1);
						JOptionPane.showMessageDialog(null, "SteppStone_1, sample size cannot be null or negative: " + Init_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_1, sample size: " + sX_Reg1_1);
					Counter = Counter + Init_Reg1_1;
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("SteppStone_1, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_1, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			// SteppStone_2
			int Init_Reg1_2 = 0;
			String sX_Reg1_2 = TextMultSteppStone_Reg1_2.getText();
			if (sX_Reg1_2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_2.length(); i++) // check integer
    					{
        				char c = sX_Reg1_2.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_2, sample size incorrect: " + sX_Reg1_2);
								JOptionPane.showMessageDialog(null, "SteppStone_2, sample size incorrect: " + sX_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_2 = Integer.parseInt(sX_Reg1_2);
					if (Init_Reg1_2 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_2, sample size cannot be null or negative: " + Init_Reg1_2);
						JOptionPane.showMessageDialog(null, "SteppStone_2, sample size cannot be null or negative: " + Init_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_2, sample size: " + sX_Reg1_2);
					Counter = Counter + Init_Reg1_2;
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("SteppStone_2, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_2, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// SteppStone_3
			int Init_Reg1_3 = 0;
			String sX_Reg1_3 = TextMultSteppStone_Reg1_3.getText();
			if (sX_Reg1_3.trim().length() != 0 && thisValue0 > 2) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_3.length(); i++) // check integer
    					{
        				char c = sX_Reg1_3.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_3, sample size incorrect: " + sX_Reg1_3);
								JOptionPane.showMessageDialog(null, "SteppStone_3, sample size incorrect: " + sX_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_3 = Integer.parseInt(sX_Reg1_3);
					if (Init_Reg1_3 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_3, sample size cannot be null or negative: " + Init_Reg1_3);
						JOptionPane.showMessageDialog(null, "SteppStone_3, sample size cannot be null or negative: " + Init_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_3, sample size: " + sX_Reg1_3);
					Counter = Counter + Init_Reg1_3;
					}
        		} 
			else
				{
				if (thisValue0 > 2 && Error == 0)
					{
					System.out.println("SteppStone_3, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_3, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// SteppStone_4
			int Init_Reg1_4 = 0;
			String sX_Reg1_4 = TextMultSteppStone_Reg1_4.getText();
			if (sX_Reg1_4.trim().length() != 0 && thisValue0 > 3) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_4.length(); i++) // check integer
    					{
        				char c = sX_Reg1_4.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_4, sample size incorrect: " + sX_Reg1_4);
								JOptionPane.showMessageDialog(null, "SteppStone_4, sample size incorrect: " + sX_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_4 = Integer.parseInt(sX_Reg1_4);
					if (Init_Reg1_4 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_4, sample size cannot be null or negative: " + Init_Reg1_4);
						JOptionPane.showMessageDialog(null, "SteppStone_4, sample size cannot be null or negative: " + Init_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_4, sample size: " + sX_Reg1_4);
					Counter = Counter + Init_Reg1_4;
					}
        		} 
			else
				{
				if (thisValue0 > 3 && Error == 0)
					{
					System.out.println("SteppStone_4, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_4, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// SteppStone_5
			int Init_Reg1_5 = 0;
			String sX_Reg1_5 = TextMultSteppStone_Reg1_5.getText();
			if (sX_Reg1_5.trim().length() != 0 && thisValue0 > 4) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_5.length(); i++) // check integer
    					{
        				char c = sX_Reg1_5.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_5, sample size incorrect: " + sX_Reg1_5);
								JOptionPane.showMessageDialog(null, "SteppStone_5, sample size incorrect: " + sX_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_5 = Integer.parseInt(sX_Reg1_5);
					if (Init_Reg1_5 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_5, sample size cannot be null or negative: " + Init_Reg1_5);
						JOptionPane.showMessageDialog(null, "SteppStone_5, sample size cannot be null or negative: " + Init_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_5, sample size: " + sX_Reg1_5);
					Counter = Counter + Init_Reg1_5;
					}
        		} 
			else
				{
				if (thisValue0 > 4 && Error == 0)
					{
					System.out.println("SteppStone_5, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_5, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// SteppStone_6
			int Init_Reg1_6 = 0;
			String sX_Reg1_6 = TextMultSteppStone_Reg1_6.getText();
			if (sX_Reg1_6.trim().length() != 0 && thisValue0 > 5) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_6.length(); i++) // check integer
    					{
        				char c = sX_Reg1_6.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_6, sample size incorrect: " + sX_Reg1_6);
								JOptionPane.showMessageDialog(null, "SteppStone_6, sample size incorrect: " + sX_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_6 = Integer.parseInt(sX_Reg1_6);
					if (Init_Reg1_6 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_6, sample size cannot be null or negative: " + Init_Reg1_6);
						JOptionPane.showMessageDialog(null, "SteppStone_6, sample size cannot be null or negative: " + Init_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_6, sample size: " + sX_Reg1_6);
					Counter = Counter + Init_Reg1_6;
					}
        		} 
			else
				{
				if (thisValue0 > 5 && Error == 0)
					{
					System.out.println("SteppStone_6, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_6, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// SteppStone_7
			int Init_Reg1_7 = 0;
			String sX_Reg1_7 = TextMultSteppStone_Reg1_7.getText();
			if (sX_Reg1_7.trim().length() != 0 && thisValue0 > 6) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_7.length(); i++) // check integer
    					{
        				char c = sX_Reg1_7.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_7, sample size incorrect: " + sX_Reg1_7);
								JOptionPane.showMessageDialog(null, "SteppStone_7, sample size incorrect: " + sX_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_7 = Integer.parseInt(sX_Reg1_7);
					if (Init_Reg1_7 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_7, sample size cannot be null or negative: " + Init_Reg1_7);
						JOptionPane.showMessageDialog(null, "SteppStone_7, sample size cannot be null or negative: " + Init_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_7, sample size: " + sX_Reg1_7);
					Counter = Counter + Init_Reg1_7;
					}
        		} 
			else
				{
				if (thisValue0 > 6 && Error == 0)
					{
					System.out.println("SteppStone_7, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_7, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// SteppStone_8
			int Init_Reg1_8 = 0;
			String sX_Reg1_8 = TextMultSteppStone_Reg1_8.getText();
			if (sX_Reg1_8.trim().length() != 0 && thisValue0 > 7) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_8.length(); i++) // check integer
    					{
        				char c = sX_Reg1_8.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_8, sample size incorrect: " + sX_Reg1_8);
								JOptionPane.showMessageDialog(null, "SteppStone_8, sample size incorrect: " + sX_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_8 = Integer.parseInt(sX_Reg1_8);
					if (Init_Reg1_8 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_8, sample size cannot be null or negative: " + Init_Reg1_8);
						JOptionPane.showMessageDialog(null, "SteppStone_8, sample size cannot be null or negative: " + Init_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_8, sample size: " + sX_Reg1_8);
					Counter = Counter + Init_Reg1_8;
					}
        		} 
			else
				{
				if (thisValue0 > 7 && Error == 0)
					{
					System.out.println("SteppStone_8, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_8, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// SteppStone_9
			int Init_Reg1_9 = 0;
			String sX_Reg1_9 = TextMultSteppStone_Reg1_9.getText();
			if (sX_Reg1_9.trim().length() != 0 && thisValue0 > 8) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_9.length(); i++) // check integer
    					{
        				char c = sX_Reg1_9.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_9, sample size incorrect: " + sX_Reg1_9);
								JOptionPane.showMessageDialog(null, "SteppStone_9, sample size incorrect: " + sX_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_9 = Integer.parseInt(sX_Reg1_9);
					if (Init_Reg1_9 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_9, sample size cannot be null or negative: " + Init_Reg1_9);
						JOptionPane.showMessageDialog(null, "SteppStone_9, sample size cannot be null or negative: " + Init_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_9, sample size: " + sX_Reg1_9);
					Counter = Counter + Init_Reg1_9;
					}
        		} 
			else
				{
				if (thisValue0 > 8 && Error == 0)
					{
					System.out.println("SteppStone_9, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_9, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// SteppStone_10
			int Init_Reg1_10 = 0;
			String sX_Reg1_10 = TextMultSteppStone_Reg1_10.getText();
			if (sX_Reg1_10.trim().length() != 0 && thisValue0 > 9) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_10.length(); i++) // check integer
    					{
        				char c = sX_Reg1_10.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_10, sample size incorrect: " + sX_Reg1_10);
								JOptionPane.showMessageDialog(null, "SteppStone_10, sample size incorrect: " + sX_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_10 = Integer.parseInt(sX_Reg1_10);
					if (Init_Reg1_10 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_10, sample size cannot be null or negative: " + Init_Reg1_10);
						JOptionPane.showMessageDialog(null, "SteppStone_10, sample size cannot be null or negative: " + Init_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_10, sample size: " + sX_Reg1_10);
					Counter = Counter + Init_Reg1_10;
					}
        		} 
			else
				{
				if (thisValue0 > 9 && Error == 0)
					{
					System.out.println("SteppStone_10, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_10, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// SteppStone_11
			int Init_Reg1_11 = 0;
			String sX_Reg1_11 = TextMultSteppStone_Reg1_11.getText();
			if (sX_Reg1_11.trim().length() != 0 && thisValue0 > 10) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_11.length(); i++) // check integer
    					{
        				char c = sX_Reg1_11.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_11, sample size incorrect: " + sX_Reg1_11);
								JOptionPane.showMessageDialog(null, "SteppStone_11, sample size incorrect: " + sX_Reg1_11, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_11 = Integer.parseInt(sX_Reg1_11);
					if (Init_Reg1_11 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_11, sample size cannot be null or negative: " + Init_Reg1_11);
						JOptionPane.showMessageDialog(null, "SteppStone_11, sample size cannot be null or negative: " + Init_Reg1_11, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_11, sample size: " + sX_Reg1_11);
					Counter = Counter + Init_Reg1_11;
					}
        		} 
			else
				{
				if (thisValue0 > 10 && Error == 0)
					{
					System.out.println("SteppStone_11, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_11, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// SteppStone_12
			int Init_Reg1_12 = 0;
			String sX_Reg1_12 = TextMultSteppStone_Reg1_12.getText();
			if (sX_Reg1_12.trim().length() != 0 && thisValue0 > 11) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_12.length(); i++) // check integer
    					{
        				char c = sX_Reg1_12.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_12, sample size incorrect: " + sX_Reg1_12);
								JOptionPane.showMessageDialog(null, "SteppStone_12, sample size incorrect: " + sX_Reg1_12, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_12 = Integer.parseInt(sX_Reg1_12);
					if (Init_Reg1_12 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_12, sample size cannot be null or negative: " + Init_Reg1_12);
						JOptionPane.showMessageDialog(null, "SteppStone_12, sample size cannot be null or negative: " + Init_Reg1_12, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_12, sample size: " + sX_Reg1_12);
					Counter = Counter + Init_Reg1_12;
					}
        		} 
			else
				{
				if (thisValue0 > 11 && Error == 0)
					{
					System.out.println("SteppStone_12, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_12, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// SteppStone_13
			int Init_Reg1_13 = 0;
			String sX_Reg1_13 = TextMultSteppStone_Reg1_13.getText();
			if (sX_Reg1_13.trim().length() != 0 && thisValue0 > 12) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_13.length(); i++) // check integer
    					{
        				char c = sX_Reg1_13.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_13, sample size incorrect: " + sX_Reg1_13);
								JOptionPane.showMessageDialog(null, "SteppStone_13, sample size incorrect: " + sX_Reg1_13, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_13 = Integer.parseInt(sX_Reg1_13);
					if (Init_Reg1_13 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_13, sample size cannot be null or negative: " + Init_Reg1_13);
						JOptionPane.showMessageDialog(null, "SteppStone_13, sample size cannot be null or negative: " + Init_Reg1_13, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_13, sample size: " + sX_Reg1_13);
					Counter = Counter + Init_Reg1_13;
					}
        		} 
			else
				{
				if (thisValue0 > 12 && Error == 0)
					{
					System.out.println("SteppStone_13, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_13, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// SteppStone_14
			int Init_Reg1_14 = 0;
			String sX_Reg1_14 = TextMultSteppStone_Reg1_14.getText();
			if (sX_Reg1_14.trim().length() != 0 && thisValue0 > 13) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_14.length(); i++) // check integer
    					{
        				char c = sX_Reg1_14.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_14, sample size incorrect: " + sX_Reg1_14);
								JOptionPane.showMessageDialog(null, "SteppStone_14, sample size incorrect: " + sX_Reg1_14, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_14 = Integer.parseInt(sX_Reg1_14);
					if (Init_Reg1_14 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_14, sample size cannot be null or negative: " + Init_Reg1_14);
						JOptionPane.showMessageDialog(null, "SteppStone_14, sample size cannot be null or negative: " + Init_Reg1_14, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_14, sample size: " + sX_Reg1_14);
					Counter = Counter + Init_Reg1_14;
					}
        		} 
			else
				{
				if (thisValue0 > 13 && Error == 0)
					{
					System.out.println("SteppStone_14, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_14, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

			// SteppStone_15
			int Init_Reg1_15 = 0;
			String sX_Reg1_15 = TextMultSteppStone_Reg1_15.getText();
			if (sX_Reg1_15.trim().length() != 0 && thisValue0 > 14) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_15.length(); i++) // check integer
    					{
        				char c = sX_Reg1_15.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_15, sample size incorrect: " + sX_Reg1_15);
								JOptionPane.showMessageDialog(null, "SteppStone_15, sample size incorrect: " + sX_Reg1_15, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_15 = Integer.parseInt(sX_Reg1_15);
					if (Init_Reg1_15 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_15, sample size cannot be null or negative: " + Init_Reg1_15);
						JOptionPane.showMessageDialog(null, "SteppStone_15, sample size cannot be null or negative: " + Init_Reg1_15, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_15, sample size: " + sX_Reg1_15);
					Counter = Counter + Init_Reg1_15;
					}
        		} 
			else
				{
				if (thisValue0 > 14 && Error == 0)
					{
					System.out.println("SteppStone_15, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_15, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

			// SteppStone_16
			int Init_Reg1_16 = 0;
			String sX_Reg1_16 = TextMultSteppStone_Reg1_16.getText();
			if (sX_Reg1_16.trim().length() != 0 && thisValue0 > 15) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_16.length(); i++) // check integer
    					{
        				char c = sX_Reg1_16.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_16, sample size incorrect: " + sX_Reg1_16);
								JOptionPane.showMessageDialog(null, "SteppStone_16, sample size incorrect: " + sX_Reg1_16, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_16 = Integer.parseInt(sX_Reg1_16);
					if (Init_Reg1_16 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_16, sample size cannot be null or negative: " + Init_Reg1_16);
						JOptionPane.showMessageDialog(null, "SteppStone_16, sample size cannot be null or negative: " + Init_Reg1_16, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_16, sample size: " + sX_Reg1_16);
					Counter = Counter + Init_Reg1_16;
					}
        		} 
			else
				{
				if (thisValue0 > 15 && Error == 0)
					{
					System.out.println("SteppStone_16, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_16, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

			// SteppStone_17
			int Init_Reg1_17 = 0;
			String sX_Reg1_17 = TextMultSteppStone_Reg1_17.getText();
			if (sX_Reg1_17.trim().length() != 0 && thisValue0 > 16) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_17.length(); i++) // check integer
    					{
        				char c = sX_Reg1_17.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_17, sample size incorrect: " + sX_Reg1_17);
								JOptionPane.showMessageDialog(null, "SteppStone_17, sample size incorrect: " + sX_Reg1_17, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_17 = Integer.parseInt(sX_Reg1_17);
					if (Init_Reg1_17 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_17, sample size cannot be null or negative: " + Init_Reg1_17);
						JOptionPane.showMessageDialog(null, "SteppStone_17, sample size cannot be null or negative: " + Init_Reg1_17, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_17, sample size: " + sX_Reg1_17);
					Counter = Counter + Init_Reg1_17;
					}
        		} 
			else
				{
				if (thisValue0 > 16 && Error == 0)
					{
					System.out.println("SteppStone_17, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_17, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

			// SteppStone_18
			int Init_Reg1_18 = 0;
			String sX_Reg1_18 = TextMultSteppStone_Reg1_18.getText();
			if (sX_Reg1_18.trim().length() != 0 && thisValue0 > 17) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_18.length(); i++) // check integer
    					{
        				char c = sX_Reg1_18.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_18, sample size incorrect: " + sX_Reg1_18);
								JOptionPane.showMessageDialog(null, "SteppStone_18, sample size incorrect: " + sX_Reg1_18, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_18 = Integer.parseInt(sX_Reg1_18);
					if (Init_Reg1_18 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_18, sample size cannot be null or negative: " + Init_Reg1_18);
						JOptionPane.showMessageDialog(null, "SteppStone_18, sample size cannot be null or negative: " + Init_Reg1_18, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_18, sample size: " + sX_Reg1_18);
					Counter = Counter + Init_Reg1_18;
					}
        		} 
			else
				{
				if (thisValue0 > 17 && Error == 0)
					{
					System.out.println("SteppStone_18, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_18, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

			// SteppStone_19
			int Init_Reg1_19 = 0;
			String sX_Reg1_19 = TextMultSteppStone_Reg1_19.getText();
			if (sX_Reg1_19.trim().length() != 0 && thisValue0 > 18) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_19.length(); i++) // check integer
    					{
        				char c = sX_Reg1_19.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_19, sample size incorrect: " + sX_Reg1_19);
								JOptionPane.showMessageDialog(null, "SteppStone_19, sample size incorrect: " + sX_Reg1_19, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_19 = Integer.parseInt(sX_Reg1_19);
					if (Init_Reg1_19 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_19, sample size cannot be null or negative: " + Init_Reg1_19);
						JOptionPane.showMessageDialog(null, "SteppStone_19, sample size cannot be null or negative: " + Init_Reg1_19, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_19, sample size: " + sX_Reg1_19);
					Counter = Counter + Init_Reg1_19;
					}
        		} 
			else
				{
				if (thisValue0 > 18 && Error == 0)
					{
					System.out.println("SteppStone_19, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_19, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// SteppStone_20
			int Init_Reg1_20 = 0;
			String sX_Reg1_20 = TextMultSteppStone_Reg1_20.getText();
			if (sX_Reg1_20.trim().length() != 0 && thisValue0 > 19) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_20.length(); i++) // check integer
    					{
        				char c = sX_Reg1_20.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("SteppStone_20, sample size incorrect: " + sX_Reg1_20);
								JOptionPane.showMessageDialog(null, "SteppStone_20, sample size incorrect: " + sX_Reg1_20, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_20 = Integer.parseInt(sX_Reg1_20);
					if (Init_Reg1_20 <= 0 && Error == 0)
						{
						System.out.println("SteppStone_20, sample size cannot be null or negative: " + Init_Reg1_20);
						JOptionPane.showMessageDialog(null, "SteppStone_20, sample size cannot be null or negative: " + Init_Reg1_20, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("SteppStone_20, sample size: " + sX_Reg1_20);
					Counter = Counter + Init_Reg1_20;
					}
        		} 
			else
				{
				if (thisValue0 > 19 && Error == 0)
					{
					System.out.println("SteppStone_20, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "SteppStone_20, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

						

		// We need sample size here to check
			if (Counter != SampleSize && Error == 0)
				{
				System.out.println("The number of samples in demes: " + Counter + " should be equal to the sample size: " + SampleSize);
				JOptionPane.showMessageDialog(null, "The number of samples in demes should be equal to the sample size: " + SampleSize, " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}

			

		// Checking			
			if (Error == 0)
				{
				String Here1_1 = TextMultSteppStone_Reg1_1.getText();
				ProteinEvolverABC_InputSteppStone_Mult1 =  Here1_1;
				
				String Here1_2 = TextMultSteppStone_Reg1_2.getText();
				ProteinEvolverABC_InputSteppStone_Mult2 = Here1_2;
				
				String Here1_3 = TextMultSteppStone_Reg1_3.getText();
				ProteinEvolverABC_InputSteppStone_Mult3 = Here1_3;
				
				String Here1_4 = TextMultSteppStone_Reg1_4.getText();
				ProteinEvolverABC_InputSteppStone_Mult4 = Here1_4;
				
				String Here1_5 = TextMultSteppStone_Reg1_5.getText();
				ProteinEvolverABC_InputSteppStone_Mult5 = Here1_5;
				
				String Here1_6 = TextMultSteppStone_Reg1_6.getText();
				ProteinEvolverABC_InputSteppStone_Mult6 = Here1_6;
				
				String Here1_7 = TextMultSteppStone_Reg1_7.getText();
				ProteinEvolverABC_InputSteppStone_Mult7 = Here1_7;
				
				String Here1_8 = TextMultSteppStone_Reg1_8.getText();
				ProteinEvolverABC_InputSteppStone_Mult8 = Here1_8;
				
				String Here1_9 = TextMultSteppStone_Reg1_9.getText();
				ProteinEvolverABC_InputSteppStone_Mult9 = Here1_9;
				
				String Here1_10 = TextMultSteppStone_Reg1_10.getText();
				ProteinEvolverABC_InputSteppStone_Mult10 = Here1_10;

				String Here1_11 = TextMultSteppStone_Reg1_11.getText();
				ProteinEvolverABC_InputSteppStone_Mult11 = Here1_11;

				String Here1_12 = TextMultSteppStone_Reg1_12.getText();
				ProteinEvolverABC_InputSteppStone_Mult12 = Here1_12;

				String Here1_13 = TextMultSteppStone_Reg1_13.getText();
				ProteinEvolverABC_InputSteppStone_Mult13 = Here1_13;

				String Here1_14 = TextMultSteppStone_Reg1_14.getText();
				ProteinEvolverABC_InputSteppStone_Mult14 = Here1_14;

				String Here1_15 = TextMultSteppStone_Reg1_15.getText();
				ProteinEvolverABC_InputSteppStone_Mult15 = Here1_15;

				String Here1_16 = TextMultSteppStone_Reg1_16.getText();
				ProteinEvolverABC_InputSteppStone_Mult16 = Here1_16;

				String Here1_17 = TextMultSteppStone_Reg1_17.getText();
				ProteinEvolverABC_InputSteppStone_Mult17 = Here1_17;

				String Here1_18 = TextMultSteppStone_Reg1_18.getText();
				ProteinEvolverABC_InputSteppStone_Mult18 = Here1_18;

				String Here1_19 = TextMultSteppStone_Reg1_19.getText();
				ProteinEvolverABC_InputSteppStone_Mult19 = Here1_19;

				String Here1_20 = TextMultSteppStone_Reg1_20.getText();
				ProteinEvolverABC_InputSteppStone_Mult20 = Here1_20;
				
				System.out.println("SteppStone_1: " + ProteinEvolverABC_InputSteppStone_Mult1);
				System.out.println("SteppStone_2: " + ProteinEvolverABC_InputSteppStone_Mult2);
				System.out.println("SteppStone_3: " + ProteinEvolverABC_InputSteppStone_Mult3);
				System.out.println("SteppStone_4: " + ProteinEvolverABC_InputSteppStone_Mult4);
				System.out.println("SteppStone_5: " + ProteinEvolverABC_InputSteppStone_Mult5);
				System.out.println("SteppStone_6: " + ProteinEvolverABC_InputSteppStone_Mult6);
				System.out.println("SteppStone_7: " + ProteinEvolverABC_InputSteppStone_Mult7);
				System.out.println("SteppStone_8: " + ProteinEvolverABC_InputSteppStone_Mult8);
				System.out.println("SteppStone_9: " + ProteinEvolverABC_InputSteppStone_Mult9);
				System.out.println("SteppStone_10: " + ProteinEvolverABC_InputSteppStone_Mult10);
				System.out.println("SteppStone_11: " + ProteinEvolverABC_InputSteppStone_Mult11);
				System.out.println("SteppStone_12: " + ProteinEvolverABC_InputSteppStone_Mult12);
				System.out.println("SteppStone_13: " + ProteinEvolverABC_InputSteppStone_Mult13);
				System.out.println("SteppStone_14: " + ProteinEvolverABC_InputSteppStone_Mult14);
				System.out.println("SteppStone_15: " + ProteinEvolverABC_InputSteppStone_Mult15);
				System.out.println("SteppStone_16: " + ProteinEvolverABC_InputSteppStone_Mult16);
				System.out.println("SteppStone_17: " + ProteinEvolverABC_InputSteppStone_Mult17);
				System.out.println("SteppStone_18: " + ProteinEvolverABC_InputSteppStone_Mult18);
				System.out.println("SteppStone_19: " + ProteinEvolverABC_InputSteppStone_Mult19);
				System.out.println("SteppStone_20: " + ProteinEvolverABC_InputSteppStone_Mult20);
				
				if (thisValue0 == 0)
					{
					System.out.println("Strange error in SteppStone model. thisValue0 = " + thisValue0);
					JOptionPane.showMessageDialog(null, "Strange error in SteppStone model. thisValue0 = " + thisValue0 ," ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				if (thisValue0 == 1)
					{
					System.out.println("More than 1 deme is required to use SteppStone model");
					JOptionPane.showMessageDialog(null, "More than 1 deme is required to use SteppStone model", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				if (thisValue0 == 2 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2;
					}
				if (thisValue0 == 3 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3;
					}
				if (thisValue0 == 4 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4;
					}
				if (thisValue0 == 5 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5;
					}
				if (thisValue0 == 6 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5 + " " + ProteinEvolverABC_InputSteppStone_Mult6;
					}
				if (thisValue0 == 7 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5 + " " + ProteinEvolverABC_InputSteppStone_Mult6 + " " + ProteinEvolverABC_InputSteppStone_Mult7;
					}
				if (thisValue0 == 8 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5 + " " + ProteinEvolverABC_InputSteppStone_Mult6 + " " + ProteinEvolverABC_InputSteppStone_Mult7 + " " + ProteinEvolverABC_InputSteppStone_Mult8;
					}
				if (thisValue0 == 9 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5 + " " + ProteinEvolverABC_InputSteppStone_Mult6 + " " + ProteinEvolverABC_InputSteppStone_Mult7 + " " + ProteinEvolverABC_InputSteppStone_Mult8 + " " + ProteinEvolverABC_InputSteppStone_Mult9;
					}
				if (thisValue0 == 10 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5 + " " + ProteinEvolverABC_InputSteppStone_Mult6 + " " + ProteinEvolverABC_InputSteppStone_Mult7 + " " + ProteinEvolverABC_InputSteppStone_Mult8 + " " + ProteinEvolverABC_InputSteppStone_Mult9 + " " + ProteinEvolverABC_InputSteppStone_Mult10;
					}
				if (thisValue0 == 11 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5 + " " + ProteinEvolverABC_InputSteppStone_Mult6 + " " + ProteinEvolverABC_InputSteppStone_Mult7 + " " + ProteinEvolverABC_InputSteppStone_Mult8 + " " + ProteinEvolverABC_InputSteppStone_Mult9 + " " + ProteinEvolverABC_InputSteppStone_Mult10 + " " + ProteinEvolverABC_InputSteppStone_Mult11;
					}
				if (thisValue0 == 12 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5 + " " + ProteinEvolverABC_InputSteppStone_Mult6 + " " + ProteinEvolverABC_InputSteppStone_Mult7 + " " + ProteinEvolverABC_InputSteppStone_Mult8 + " " + ProteinEvolverABC_InputSteppStone_Mult9 + " " + ProteinEvolverABC_InputSteppStone_Mult10 + " " + ProteinEvolverABC_InputSteppStone_Mult11 + " " + ProteinEvolverABC_InputSteppStone_Mult12;
					}
				if (thisValue0 == 13 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5 + " " + ProteinEvolverABC_InputSteppStone_Mult6 + " " + ProteinEvolverABC_InputSteppStone_Mult7 + " " + ProteinEvolverABC_InputSteppStone_Mult8 + " " + ProteinEvolverABC_InputSteppStone_Mult9 + " " + ProteinEvolverABC_InputSteppStone_Mult10 + " " + ProteinEvolverABC_InputSteppStone_Mult11 + " " + ProteinEvolverABC_InputSteppStone_Mult12 + " " + ProteinEvolverABC_InputSteppStone_Mult13;
					}
				if (thisValue0 == 14 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5 + " " + ProteinEvolverABC_InputSteppStone_Mult6 + " " + ProteinEvolverABC_InputSteppStone_Mult7 + " " + ProteinEvolverABC_InputSteppStone_Mult8 + " " + ProteinEvolverABC_InputSteppStone_Mult9 + " " + ProteinEvolverABC_InputSteppStone_Mult10 + " " + ProteinEvolverABC_InputSteppStone_Mult11 + " " + ProteinEvolverABC_InputSteppStone_Mult12 + " " + ProteinEvolverABC_InputSteppStone_Mult13 + " " + ProteinEvolverABC_InputSteppStone_Mult14;
					}
				if (thisValue0 == 15 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5 + " " + ProteinEvolverABC_InputSteppStone_Mult6 + " " + ProteinEvolverABC_InputSteppStone_Mult7 + " " + ProteinEvolverABC_InputSteppStone_Mult8 + " " + ProteinEvolverABC_InputSteppStone_Mult9 + " " + ProteinEvolverABC_InputSteppStone_Mult10 + " " + ProteinEvolverABC_InputSteppStone_Mult11 + " " + ProteinEvolverABC_InputSteppStone_Mult12 + " " + ProteinEvolverABC_InputSteppStone_Mult13 + " " + ProteinEvolverABC_InputSteppStone_Mult14 + " " + ProteinEvolverABC_InputSteppStone_Mult15;
					}
				if (thisValue0 == 16 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5 + " " + ProteinEvolverABC_InputSteppStone_Mult6 + " " + ProteinEvolverABC_InputSteppStone_Mult7 + " " + ProteinEvolverABC_InputSteppStone_Mult8 + " " + ProteinEvolverABC_InputSteppStone_Mult9 + " " + ProteinEvolverABC_InputSteppStone_Mult10 + " " + ProteinEvolverABC_InputSteppStone_Mult11 + " " + ProteinEvolverABC_InputSteppStone_Mult12 + " " + ProteinEvolverABC_InputSteppStone_Mult13 + " " + ProteinEvolverABC_InputSteppStone_Mult14 + " " + ProteinEvolverABC_InputSteppStone_Mult15 + " " + ProteinEvolverABC_InputSteppStone_Mult16;
					}
				if (thisValue0 == 17 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5 + " " + ProteinEvolverABC_InputSteppStone_Mult6 + " " + ProteinEvolverABC_InputSteppStone_Mult7 + " " + ProteinEvolverABC_InputSteppStone_Mult8 + " " + ProteinEvolverABC_InputSteppStone_Mult9 + " " + ProteinEvolverABC_InputSteppStone_Mult10 + " " + ProteinEvolverABC_InputSteppStone_Mult11 + " " + ProteinEvolverABC_InputSteppStone_Mult12 + " " + ProteinEvolverABC_InputSteppStone_Mult13 + " " + ProteinEvolverABC_InputSteppStone_Mult14 + " " + ProteinEvolverABC_InputSteppStone_Mult15 + " " + ProteinEvolverABC_InputSteppStone_Mult16 + " " + ProteinEvolverABC_InputSteppStone_Mult17;
					}
				if (thisValue0 == 18 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5 + " " + ProteinEvolverABC_InputSteppStone_Mult6 + " " + ProteinEvolverABC_InputSteppStone_Mult7 + " " + ProteinEvolverABC_InputSteppStone_Mult8 + " " + ProteinEvolverABC_InputSteppStone_Mult9 + " " + ProteinEvolverABC_InputSteppStone_Mult10 + " " + ProteinEvolverABC_InputSteppStone_Mult11 + " " + ProteinEvolverABC_InputSteppStone_Mult12 + " " + ProteinEvolverABC_InputSteppStone_Mult13 + " " + ProteinEvolverABC_InputSteppStone_Mult14 + " " + ProteinEvolverABC_InputSteppStone_Mult15 + " " + ProteinEvolverABC_InputSteppStone_Mult16 + " " + ProteinEvolverABC_InputSteppStone_Mult17 + " " + ProteinEvolverABC_InputSteppStone_Mult18;
					}
				if (thisValue0 == 19 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5 + " " + ProteinEvolverABC_InputSteppStone_Mult6 + " " + ProteinEvolverABC_InputSteppStone_Mult7 + " " + ProteinEvolverABC_InputSteppStone_Mult8 + " " + ProteinEvolverABC_InputSteppStone_Mult9 + " " + ProteinEvolverABC_InputSteppStone_Mult10 + " " + ProteinEvolverABC_InputSteppStone_Mult11 + " " + ProteinEvolverABC_InputSteppStone_Mult12 + " " + ProteinEvolverABC_InputSteppStone_Mult13 + " " + ProteinEvolverABC_InputSteppStone_Mult14 + " " + ProteinEvolverABC_InputSteppStone_Mult15 + " " + ProteinEvolverABC_InputSteppStone_Mult16 + " " + ProteinEvolverABC_InputSteppStone_Mult17 + " " + ProteinEvolverABC_InputSteppStone_Mult18 + " " + ProteinEvolverABC_InputSteppStone_Mult19;
					}
				if (thisValue0 == 20 && Error == 0)
					{
					ProteinEvolverABC_SteppStoneModel = "MigrationModel=2 " + sX0 + " " + ProteinEvolverABC_InputSteppStone_Mult1 + " " + ProteinEvolverABC_InputSteppStone_Mult2 + " " + ProteinEvolverABC_InputSteppStone_Mult3 + " " + ProteinEvolverABC_InputSteppStone_Mult4 + " " + ProteinEvolverABC_InputSteppStone_Mult5 + " " + ProteinEvolverABC_InputSteppStone_Mult6 + " " + ProteinEvolverABC_InputSteppStone_Mult7 + " " + ProteinEvolverABC_InputSteppStone_Mult8 + " " + ProteinEvolverABC_InputSteppStone_Mult9 + " " + ProteinEvolverABC_InputSteppStone_Mult10 + " " + ProteinEvolverABC_InputSteppStone_Mult11 + " " + ProteinEvolverABC_InputSteppStone_Mult12 + " " + ProteinEvolverABC_InputSteppStone_Mult13 + " " + ProteinEvolverABC_InputSteppStone_Mult14 + " " + ProteinEvolverABC_InputSteppStone_Mult15 + " " + ProteinEvolverABC_InputSteppStone_Mult16 + " " + ProteinEvolverABC_InputSteppStone_Mult17 + " " + ProteinEvolverABC_InputSteppStone_Mult18 + " " + ProteinEvolverABC_InputSteppStone_Mult19 + " " + ProteinEvolverABC_InputSteppStone_Mult20;
					}
	
				
				if (Error == 0)
					{
					SavedMultSteppStone = 1;
					NumberOfDemes = thisValue0;
					label4eeeSteppStone.setText("Stepping-stone model was saved");
					label4eeeSteppStone.setVisible(true); // Dated tips saved
					System.out.println("ProteinEvolverABC_SteppStoneModel: " + ProteinEvolverABC_SteppStoneModel);
					MultSteppStoneWindow.setVisible(false);
					MultSteppStoneWindow.dispose();
					System.out.println("SavedMultSteppStone: " + SavedMultSteppStone);
					}
				}

			}
		}


	

	// runButtonMultContIslandExitHandler button
	public class runButtonMultContIslandExitHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			MigrationModels.setSelectedItem("No");
			ProteinEvolverABC_IslandModel = "#MigrationModel=1 4 12 10 3 4";
			ProteinEvolverABC_SteppStoneModel = "#MigrationModel=2 4 12 10 3 4";
			ProteinEvolverABC_ContIslandModel = "#MigrationModel=3 4 12 10 3 4";
			label4eeeIsland.setVisible(false);
			label4eeeIsland.setText("");
			label4eeeSteppStone.setVisible(false);
			label4eeeSteppStone.setText("");
			label4eeeContIsland.setVisible(false);
			label4eeeContIsland.setText("");
			NumberOfDemes = 0;

			label4l.setVisible(false);
			TextMigrationRateProteinEvolverABC.setVisible(false);
			TextMigrationRateProteinEvolverABC.setText("");
			label4ll.setVisible(false);
			ConvergenceDemesProteinEvolverABC_No.setSelected(true);
			ConvergenceDemesProteinEvolverABC_No.setVisible(false);
			ConvergenceDemesProteinEvolverABC_Yes.setVisible(false);
			
			MultContIslandWindow.setVisible(false);
			MultContIslandWindow.dispose();
			System.out.println("Do not ContIsland model: " + ProteinEvolverABC_ContIslandModel);
			}
		}

	

	// runButtonMultContIslandSaveNextHandler button
	public class runButtonMultContIslandSaveNextHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			Error = 0;
			
			String ProteinEvolverABC_InputContIsland_Mult1 = "";
			String ProteinEvolverABC_InputContIsland_Mult2 = "";
			String ProteinEvolverABC_InputContIsland_Mult3 = "";
			String ProteinEvolverABC_InputContIsland_Mult4 = "";
			String ProteinEvolverABC_InputContIsland_Mult5 = "";
			String ProteinEvolverABC_InputContIsland_Mult6 = "";
			String ProteinEvolverABC_InputContIsland_Mult7 = "";
			String ProteinEvolverABC_InputContIsland_Mult8 = "";
			String ProteinEvolverABC_InputContIsland_Mult9 = "";
			String ProteinEvolverABC_InputContIsland_Mult10 = "";
			String ProteinEvolverABC_InputContIsland_Mult11 = "";
			String ProteinEvolverABC_InputContIsland_Mult12 = "";
			String ProteinEvolverABC_InputContIsland_Mult13 = "";
			String ProteinEvolverABC_InputContIsland_Mult14 = "";
			String ProteinEvolverABC_InputContIsland_Mult15 = "";
			String ProteinEvolverABC_InputContIsland_Mult16 = "";
			String ProteinEvolverABC_InputContIsland_Mult17 = "";
			String ProteinEvolverABC_InputContIsland_Mult18 = "";
			String ProteinEvolverABC_InputContIsland_Mult19 = "";
			String ProteinEvolverABC_InputContIsland_Mult20 = "";

			// Number of demes
			String sX0 = TextNumberOfMultContIslandProteinEvolverABC.getText();
			int thisValue0 = 0;
			if (sX0.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX0.length(); i++) // check integer
    					{
        				char c = sX0.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Number of demes is incorrect: " + sX0);
								JOptionPane.showMessageDialog(null, "Number of demes is incorrect: " + sX0, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					thisValue0 = Integer.parseInt(sX0);
					if (thisValue0 <= 0)
						{
						System.out.println("Number of demes cannot be null or negative: " + thisValue0);
						JOptionPane.showMessageDialog(null, "Number of demes cannot be null or negative: " + thisValue0, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Number of demes: " + sX0);
					}
        		} 
			else
				{
				System.out.println("Number of demes must be introduced");
				JOptionPane.showMessageDialog(null, "Number of demes must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}
			
			int Counter = 0;


			// ContIsland_1
			int Init_Reg1_1 = 0;
			String sX_Reg1_1 = TextMultContIsland_Reg1_1.getText();
			if (sX_Reg1_1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_1.length(); i++) // check integer
    					{
        				char c = sX_Reg1_1.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_1, sample size incorrect: " + sX_Reg1_1);
								JOptionPane.showMessageDialog(null, "ContIsland_1, sample size incorrect: " + sX_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_1 = Integer.parseInt(sX_Reg1_1);
					if (Init_Reg1_1 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_1, sample size cannot be null or negative: " + Init_Reg1_1);
						JOptionPane.showMessageDialog(null, "ContIsland_1, sample size cannot be null or negative: " + Init_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_1, sample size: " + sX_Reg1_1);
					Counter = Counter + Init_Reg1_1;
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("ContIsland_1, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_1, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			// ContIsland_2
			int Init_Reg1_2 = 0;
			String sX_Reg1_2 = TextMultContIsland_Reg1_2.getText();
			if (sX_Reg1_2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_2.length(); i++) // check integer
    					{
        				char c = sX_Reg1_2.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_2, sample size incorrect: " + sX_Reg1_2);
								JOptionPane.showMessageDialog(null, "ContIsland_2, sample size incorrect: " + sX_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_2 = Integer.parseInt(sX_Reg1_2);
					if (Init_Reg1_2 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_2, sample size cannot be null or negative: " + Init_Reg1_2);
						JOptionPane.showMessageDialog(null, "ContIsland_2, sample size cannot be null or negative: " + Init_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_2, sample size: " + sX_Reg1_2);
					Counter = Counter + Init_Reg1_2;
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("ContIsland_2, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_2, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// ContIsland_3
			int Init_Reg1_3 = 0;
			String sX_Reg1_3 = TextMultContIsland_Reg1_3.getText();
			if (sX_Reg1_3.trim().length() != 0 && thisValue0 > 2) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_3.length(); i++) // check integer
    					{
        				char c = sX_Reg1_3.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_3, sample size incorrect: " + sX_Reg1_3);
								JOptionPane.showMessageDialog(null, "ContIsland_3, sample size incorrect: " + sX_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_3 = Integer.parseInt(sX_Reg1_3);
					if (Init_Reg1_3 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_3, sample size cannot be null or negative: " + Init_Reg1_3);
						JOptionPane.showMessageDialog(null, "ContIsland_3, sample size cannot be null or negative: " + Init_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_3, sample size: " + sX_Reg1_3);
					Counter = Counter + Init_Reg1_3;
					}
        		} 
			else
				{
				if (thisValue0 > 2 && Error == 0)
					{
					System.out.println("ContIsland_3, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_3, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// ContIsland_4
			int Init_Reg1_4 = 0;
			String sX_Reg1_4 = TextMultContIsland_Reg1_4.getText();
			if (sX_Reg1_4.trim().length() != 0 && thisValue0 > 3) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_4.length(); i++) // check integer
    					{
        				char c = sX_Reg1_4.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_4, sample size incorrect: " + sX_Reg1_4);
								JOptionPane.showMessageDialog(null, "ContIsland_4, sample size incorrect: " + sX_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_4 = Integer.parseInt(sX_Reg1_4);
					if (Init_Reg1_4 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_4, sample size cannot be null or negative: " + Init_Reg1_4);
						JOptionPane.showMessageDialog(null, "ContIsland_4, sample size cannot be null or negative: " + Init_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_4, sample size: " + sX_Reg1_4);
					Counter = Counter + Init_Reg1_4;
					}
        		} 
			else
				{
				if (thisValue0 > 3 && Error == 0)
					{
					System.out.println("ContIsland_4, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_4, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// ContIsland_5
			int Init_Reg1_5 = 0;
			String sX_Reg1_5 = TextMultContIsland_Reg1_5.getText();
			if (sX_Reg1_5.trim().length() != 0 && thisValue0 > 4) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_5.length(); i++) // check integer
    					{
        				char c = sX_Reg1_5.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_5, sample size incorrect: " + sX_Reg1_5);
								JOptionPane.showMessageDialog(null, "ContIsland_5, sample size incorrect: " + sX_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_5 = Integer.parseInt(sX_Reg1_5);
					if (Init_Reg1_5 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_5, sample size cannot be null or negative: " + Init_Reg1_5);
						JOptionPane.showMessageDialog(null, "ContIsland_5, sample size cannot be null or negative: " + Init_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_5, sample size: " + sX_Reg1_5);
					Counter = Counter + Init_Reg1_5;
					}
        		} 
			else
				{
				if (thisValue0 > 4 && Error == 0)
					{
					System.out.println("ContIsland_5, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_5, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// ContIsland_6
			int Init_Reg1_6 = 0;
			String sX_Reg1_6 = TextMultContIsland_Reg1_6.getText();
			if (sX_Reg1_6.trim().length() != 0 && thisValue0 > 5) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_6.length(); i++) // check integer
    					{
        				char c = sX_Reg1_6.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_6, sample size incorrect: " + sX_Reg1_6);
								JOptionPane.showMessageDialog(null, "ContIsland_6, sample size incorrect: " + sX_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_6 = Integer.parseInt(sX_Reg1_6);
					if (Init_Reg1_6 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_6, sample size cannot be null or negative: " + Init_Reg1_6);
						JOptionPane.showMessageDialog(null, "ContIsland_6, sample size cannot be null or negative: " + Init_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_6, sample size: " + sX_Reg1_6);
					Counter = Counter + Init_Reg1_6;
					}
        		} 
			else
				{
				if (thisValue0 > 5 && Error == 0)
					{
					System.out.println("ContIsland_6, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_6, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// ContIsland_7
			int Init_Reg1_7 = 0;
			String sX_Reg1_7 = TextMultContIsland_Reg1_7.getText();
			if (sX_Reg1_7.trim().length() != 0 && thisValue0 > 6) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_7.length(); i++) // check integer
    					{
        				char c = sX_Reg1_7.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_7, sample size incorrect: " + sX_Reg1_7);
								JOptionPane.showMessageDialog(null, "ContIsland_7, sample size incorrect: " + sX_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_7 = Integer.parseInt(sX_Reg1_7);
					if (Init_Reg1_7 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_7, sample size cannot be null or negative: " + Init_Reg1_7);
						JOptionPane.showMessageDialog(null, "ContIsland_7, sample size cannot be null or negative: " + Init_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_7, sample size: " + sX_Reg1_7);
					Counter = Counter + Init_Reg1_7;
					}
        		} 
			else
				{
				if (thisValue0 > 6 && Error == 0)
					{
					System.out.println("ContIsland_7, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_7, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// ContIsland_8
			int Init_Reg1_8 = 0;
			String sX_Reg1_8 = TextMultContIsland_Reg1_8.getText();
			if (sX_Reg1_8.trim().length() != 0 && thisValue0 > 7) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_8.length(); i++) // check integer
    					{
        				char c = sX_Reg1_8.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_8, sample size incorrect: " + sX_Reg1_8);
								JOptionPane.showMessageDialog(null, "ContIsland_8, sample size incorrect: " + sX_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_8 = Integer.parseInt(sX_Reg1_8);
					if (Init_Reg1_8 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_8, sample size cannot be null or negative: " + Init_Reg1_8);
						JOptionPane.showMessageDialog(null, "ContIsland_8, sample size cannot be null or negative: " + Init_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_8, sample size: " + sX_Reg1_8);
					Counter = Counter + Init_Reg1_8;
					}
        		} 
			else
				{
				if (thisValue0 > 7 && Error == 0)
					{
					System.out.println("ContIsland_8, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_8, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// ContIsland_9
			int Init_Reg1_9 = 0;
			String sX_Reg1_9 = TextMultContIsland_Reg1_9.getText();
			if (sX_Reg1_9.trim().length() != 0 && thisValue0 > 8) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_9.length(); i++) // check integer
    					{
        				char c = sX_Reg1_9.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_9, sample size incorrect: " + sX_Reg1_9);
								JOptionPane.showMessageDialog(null, "ContIsland_9, sample size incorrect: " + sX_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_9 = Integer.parseInt(sX_Reg1_9);
					if (Init_Reg1_9 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_9, sample size cannot be null or negative: " + Init_Reg1_9);
						JOptionPane.showMessageDialog(null, "ContIsland_9, sample size cannot be null or negative: " + Init_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_9, sample size: " + sX_Reg1_9);
					Counter = Counter + Init_Reg1_9;
					}
        		} 
			else
				{
				if (thisValue0 > 8 && Error == 0)
					{
					System.out.println("ContIsland_9, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_9, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// ContIsland_10
			int Init_Reg1_10 = 0;
			String sX_Reg1_10 = TextMultContIsland_Reg1_10.getText();
			if (sX_Reg1_10.trim().length() != 0 && thisValue0 > 9) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_10.length(); i++) // check integer
    					{
        				char c = sX_Reg1_10.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_10, sample size incorrect: " + sX_Reg1_10);
								JOptionPane.showMessageDialog(null, "ContIsland_10, sample size incorrect: " + sX_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_10 = Integer.parseInt(sX_Reg1_10);
					if (Init_Reg1_10 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_10, sample size cannot be null or negative: " + Init_Reg1_10);
						JOptionPane.showMessageDialog(null, "ContIsland_10, sample size cannot be null or negative: " + Init_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_10, sample size: " + sX_Reg1_10);
					Counter = Counter + Init_Reg1_10;
					}
        		} 
			else
				{
				if (thisValue0 > 9 && Error == 0)
					{
					System.out.println("ContIsland_10, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_10, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// ContIsland_11
			int Init_Reg1_11 = 0;
			String sX_Reg1_11 = TextMultContIsland_Reg1_11.getText();
			if (sX_Reg1_11.trim().length() != 0 && thisValue0 > 10) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_11.length(); i++) // check integer
    					{
        				char c = sX_Reg1_11.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_11, sample size incorrect: " + sX_Reg1_11);
								JOptionPane.showMessageDialog(null, "ContIsland_11, sample size incorrect: " + sX_Reg1_11, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_11 = Integer.parseInt(sX_Reg1_11);
					if (Init_Reg1_11 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_11, sample size cannot be null or negative: " + Init_Reg1_11);
						JOptionPane.showMessageDialog(null, "ContIsland_11, sample size cannot be null or negative: " + Init_Reg1_11, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_11, sample size: " + sX_Reg1_11);
					Counter = Counter + Init_Reg1_11;
					}
        		} 
			else
				{
				if (thisValue0 > 10 && Error == 0)
					{
					System.out.println("ContIsland_11, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_11, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// ContIsland_12
			int Init_Reg1_12 = 0;
			String sX_Reg1_12 = TextMultContIsland_Reg1_12.getText();
			if (sX_Reg1_12.trim().length() != 0 && thisValue0 > 11) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_12.length(); i++) // check integer
    					{
        				char c = sX_Reg1_12.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_12, sample size incorrect: " + sX_Reg1_12);
								JOptionPane.showMessageDialog(null, "ContIsland_12, sample size incorrect: " + sX_Reg1_12, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_12 = Integer.parseInt(sX_Reg1_12);
					if (Init_Reg1_12 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_12, sample size cannot be null or negative: " + Init_Reg1_12);
						JOptionPane.showMessageDialog(null, "ContIsland_12, sample size cannot be null or negative: " + Init_Reg1_12, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_12, sample size: " + sX_Reg1_12);
					Counter = Counter + Init_Reg1_12;
					}
        		} 
			else
				{
				if (thisValue0 > 11 && Error == 0)
					{
					System.out.println("ContIsland_12, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_12, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// ContIsland_13
			int Init_Reg1_13 = 0;
			String sX_Reg1_13 = TextMultContIsland_Reg1_13.getText();
			if (sX_Reg1_13.trim().length() != 0 && thisValue0 > 12) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_13.length(); i++) // check integer
    					{
        				char c = sX_Reg1_13.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_13, sample size incorrect: " + sX_Reg1_13);
								JOptionPane.showMessageDialog(null, "ContIsland_13, sample size incorrect: " + sX_Reg1_13, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_13 = Integer.parseInt(sX_Reg1_13);
					if (Init_Reg1_13 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_13, sample size cannot be null or negative: " + Init_Reg1_13);
						JOptionPane.showMessageDialog(null, "ContIsland_13, sample size cannot be null or negative: " + Init_Reg1_13, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_13, sample size: " + sX_Reg1_13);
					Counter = Counter + Init_Reg1_13;
					}
        		} 
			else
				{
				if (thisValue0 > 12 && Error == 0)
					{
					System.out.println("ContIsland_13, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_13, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// ContIsland_14
			int Init_Reg1_14 = 0;
			String sX_Reg1_14 = TextMultContIsland_Reg1_14.getText();
			if (sX_Reg1_14.trim().length() != 0 && thisValue0 > 13) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_14.length(); i++) // check integer
    					{
        				char c = sX_Reg1_14.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_14, sample size incorrect: " + sX_Reg1_14);
								JOptionPane.showMessageDialog(null, "ContIsland_14, sample size incorrect: " + sX_Reg1_14, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_14 = Integer.parseInt(sX_Reg1_14);
					if (Init_Reg1_14 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_14, sample size cannot be null or negative: " + Init_Reg1_14);
						JOptionPane.showMessageDialog(null, "ContIsland_14, sample size cannot be null or negative: " + Init_Reg1_14, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_14, sample size: " + sX_Reg1_14);
					Counter = Counter + Init_Reg1_14;
					}
        		} 
			else
				{
				if (thisValue0 > 13 && Error == 0)
					{
					System.out.println("ContIsland_14, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_14, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

			// ContIsland_15
			int Init_Reg1_15 = 0;
			String sX_Reg1_15 = TextMultContIsland_Reg1_15.getText();
			if (sX_Reg1_15.trim().length() != 0 && thisValue0 > 14) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_15.length(); i++) // check integer
    					{
        				char c = sX_Reg1_15.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_15, sample size incorrect: " + sX_Reg1_15);
								JOptionPane.showMessageDialog(null, "ContIsland_15, sample size incorrect: " + sX_Reg1_15, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_15 = Integer.parseInt(sX_Reg1_15);
					if (Init_Reg1_15 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_15, sample size cannot be null or negative: " + Init_Reg1_15);
						JOptionPane.showMessageDialog(null, "ContIsland_15, sample size cannot be null or negative: " + Init_Reg1_15, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_15, sample size: " + sX_Reg1_15);
					Counter = Counter + Init_Reg1_15;
					}
        		} 
			else
				{
				if (thisValue0 > 14 && Error == 0)
					{
					System.out.println("ContIsland_15, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_15, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

			// ContIsland_16
			int Init_Reg1_16 = 0;
			String sX_Reg1_16 = TextMultContIsland_Reg1_16.getText();
			if (sX_Reg1_16.trim().length() != 0 && thisValue0 > 15) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_16.length(); i++) // check integer
    					{
        				char c = sX_Reg1_16.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_16, sample size incorrect: " + sX_Reg1_16);
								JOptionPane.showMessageDialog(null, "ContIsland_16, sample size incorrect: " + sX_Reg1_16, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_16 = Integer.parseInt(sX_Reg1_16);
					if (Init_Reg1_16 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_16, sample size cannot be null or negative: " + Init_Reg1_16);
						JOptionPane.showMessageDialog(null, "ContIsland_16, sample size cannot be null or negative: " + Init_Reg1_16, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_16, sample size: " + sX_Reg1_16);
					Counter = Counter + Init_Reg1_16;
					}
        		} 
			else
				{
				if (thisValue0 > 15 && Error == 0)
					{
					System.out.println("ContIsland_16, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_16, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

			// ContIsland_17
			int Init_Reg1_17 = 0;
			String sX_Reg1_17 = TextMultContIsland_Reg1_17.getText();
			if (sX_Reg1_17.trim().length() != 0 && thisValue0 > 16) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_17.length(); i++) // check integer
    					{
        				char c = sX_Reg1_17.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_17, sample size incorrect: " + sX_Reg1_17);
								JOptionPane.showMessageDialog(null, "ContIsland_17, sample size incorrect: " + sX_Reg1_17, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_17 = Integer.parseInt(sX_Reg1_17);
					if (Init_Reg1_17 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_17, sample size cannot be null or negative: " + Init_Reg1_17);
						JOptionPane.showMessageDialog(null, "ContIsland_17, sample size cannot be null or negative: " + Init_Reg1_17, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_17, sample size: " + sX_Reg1_17);
					Counter = Counter + Init_Reg1_17;
					}
        		} 
			else
				{
				if (thisValue0 > 16 && Error == 0)
					{
					System.out.println("ContIsland_17, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_17, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

			// ContIsland_18
			int Init_Reg1_18 = 0;
			String sX_Reg1_18 = TextMultContIsland_Reg1_18.getText();
			if (sX_Reg1_18.trim().length() != 0 && thisValue0 > 17) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_18.length(); i++) // check integer
    					{
        				char c = sX_Reg1_18.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_18, sample size incorrect: " + sX_Reg1_18);
								JOptionPane.showMessageDialog(null, "ContIsland_18, sample size incorrect: " + sX_Reg1_18, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_18 = Integer.parseInt(sX_Reg1_18);
					if (Init_Reg1_18 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_18, sample size cannot be null or negative: " + Init_Reg1_18);
						JOptionPane.showMessageDialog(null, "ContIsland_18, sample size cannot be null or negative: " + Init_Reg1_18, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_18, sample size: " + sX_Reg1_18);
					Counter = Counter + Init_Reg1_18;
					}
        		} 
			else
				{
				if (thisValue0 > 17 && Error == 0)
					{
					System.out.println("ContIsland_18, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_18, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

			// ContIsland_19
			int Init_Reg1_19 = 0;
			String sX_Reg1_19 = TextMultContIsland_Reg1_19.getText();
			if (sX_Reg1_19.trim().length() != 0 && thisValue0 > 18) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_19.length(); i++) // check integer
    					{
        				char c = sX_Reg1_19.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_19, sample size incorrect: " + sX_Reg1_19);
								JOptionPane.showMessageDialog(null, "ContIsland_19, sample size incorrect: " + sX_Reg1_19, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_19 = Integer.parseInt(sX_Reg1_19);
					if (Init_Reg1_19 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_19, sample size cannot be null or negative: " + Init_Reg1_19);
						JOptionPane.showMessageDialog(null, "ContIsland_19, sample size cannot be null or negative: " + Init_Reg1_19, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_19, sample size: " + sX_Reg1_19);
					Counter = Counter + Init_Reg1_19;
					}
        		} 
			else
				{
				if (thisValue0 > 18 && Error == 0)
					{
					System.out.println("ContIsland_19, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_19, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}

		// ContIsland_20
			int Init_Reg1_20 = 0;
			String sX_Reg1_20 = TextMultContIsland_Reg1_20.getText();
			if (sX_Reg1_20.trim().length() != 0 && thisValue0 > 19) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_20.length(); i++) // check integer
    					{
        				char c = sX_Reg1_20.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("ContIsland_20, sample size incorrect: " + sX_Reg1_20);
								JOptionPane.showMessageDialog(null, "ContIsland_20, sample size incorrect: " + sX_Reg1_20, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_20 = Integer.parseInt(sX_Reg1_20);
					if (Init_Reg1_20 <= 0 && Error == 0)
						{
						System.out.println("ContIsland_20, sample size cannot be null or negative: " + Init_Reg1_20);
						JOptionPane.showMessageDialog(null, "ContIsland_20, sample size cannot be null or negative: " + Init_Reg1_20, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("ContIsland_20, sample size: " + sX_Reg1_20);
					Counter = Counter + Init_Reg1_20;
					}
        		} 
			else
				{
				if (thisValue0 > 19 && Error == 0)
					{
					System.out.println("ContIsland_20, sample size must be introduced");
					JOptionPane.showMessageDialog(null, "ContIsland_20, sample size must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
						

		// We need sample size here to check
			if (Counter != SampleSize && Error == 0)
				{
				System.out.println("The number of samples in demes: " + Counter + " should be equal to the sample size: " + SampleSize);
				JOptionPane.showMessageDialog(null, "The number of samples in demes should be equal to the sample size: " + SampleSize, " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				}

			

		// Checking			
			if (Error == 0)
				{
				String Here1_1 = TextMultContIsland_Reg1_1.getText();
				ProteinEvolverABC_InputContIsland_Mult1 =  Here1_1;
				
				String Here1_2 = TextMultContIsland_Reg1_2.getText();
				ProteinEvolverABC_InputContIsland_Mult2 = Here1_2;
				
				String Here1_3 = TextMultContIsland_Reg1_3.getText();
				ProteinEvolverABC_InputContIsland_Mult3 = Here1_3;
				
				String Here1_4 = TextMultContIsland_Reg1_4.getText();
				ProteinEvolverABC_InputContIsland_Mult4 = Here1_4;
				
				String Here1_5 = TextMultContIsland_Reg1_5.getText();
				ProteinEvolverABC_InputContIsland_Mult5 = Here1_5;
				
				String Here1_6 = TextMultContIsland_Reg1_6.getText();
				ProteinEvolverABC_InputContIsland_Mult6 = Here1_6;
				
				String Here1_7 = TextMultContIsland_Reg1_7.getText();
				ProteinEvolverABC_InputContIsland_Mult7 = Here1_7;
				
				String Here1_8 = TextMultContIsland_Reg1_8.getText();
				ProteinEvolverABC_InputContIsland_Mult8 = Here1_8;
				
				String Here1_9 = TextMultContIsland_Reg1_9.getText();
				ProteinEvolverABC_InputContIsland_Mult9 = Here1_9;
				
				String Here1_10 = TextMultContIsland_Reg1_10.getText();
				ProteinEvolverABC_InputContIsland_Mult10 = Here1_10;

				String Here1_11 = TextMultContIsland_Reg1_11.getText();
				ProteinEvolverABC_InputContIsland_Mult11 = Here1_11;

				String Here1_12 = TextMultContIsland_Reg1_12.getText();
				ProteinEvolverABC_InputContIsland_Mult12 = Here1_12;

				String Here1_13 = TextMultContIsland_Reg1_13.getText();
				ProteinEvolverABC_InputContIsland_Mult13 = Here1_13;

				String Here1_14 = TextMultContIsland_Reg1_14.getText();
				ProteinEvolverABC_InputContIsland_Mult14 = Here1_14;

				String Here1_15 = TextMultContIsland_Reg1_15.getText();
				ProteinEvolverABC_InputContIsland_Mult15 = Here1_15;

				String Here1_16 = TextMultContIsland_Reg1_16.getText();
				ProteinEvolverABC_InputContIsland_Mult16 = Here1_16;

				String Here1_17 = TextMultContIsland_Reg1_17.getText();
				ProteinEvolverABC_InputContIsland_Mult17 = Here1_17;

				String Here1_18 = TextMultContIsland_Reg1_18.getText();
				ProteinEvolverABC_InputContIsland_Mult18 = Here1_18;

				String Here1_19 = TextMultContIsland_Reg1_19.getText();
				ProteinEvolverABC_InputContIsland_Mult19 = Here1_19;

				String Here1_20 = TextMultContIsland_Reg1_20.getText();
				ProteinEvolverABC_InputContIsland_Mult20 = Here1_20;
				
				System.out.println("ContIsland_1: " + ProteinEvolverABC_InputContIsland_Mult1);
				System.out.println("ContIsland_2: " + ProteinEvolverABC_InputContIsland_Mult2);
				System.out.println("ContIsland_3: " + ProteinEvolverABC_InputContIsland_Mult3);
				System.out.println("ContIsland_4: " + ProteinEvolverABC_InputContIsland_Mult4);
				System.out.println("ContIsland_5: " + ProteinEvolverABC_InputContIsland_Mult5);
				System.out.println("ContIsland_6: " + ProteinEvolverABC_InputContIsland_Mult6);
				System.out.println("ContIsland_7: " + ProteinEvolverABC_InputContIsland_Mult7);
				System.out.println("ContIsland_8: " + ProteinEvolverABC_InputContIsland_Mult8);
				System.out.println("ContIsland_9: " + ProteinEvolverABC_InputContIsland_Mult9);
				System.out.println("ContIsland_10: " + ProteinEvolverABC_InputContIsland_Mult10);
				System.out.println("ContIsland_11: " + ProteinEvolverABC_InputContIsland_Mult11);
				System.out.println("ContIsland_12: " + ProteinEvolverABC_InputContIsland_Mult12);
				System.out.println("ContIsland_13: " + ProteinEvolverABC_InputContIsland_Mult13);
				System.out.println("ContIsland_14: " + ProteinEvolverABC_InputContIsland_Mult14);
				System.out.println("ContIsland_15: " + ProteinEvolverABC_InputContIsland_Mult15);
				System.out.println("ContIsland_16: " + ProteinEvolverABC_InputContIsland_Mult16);
				System.out.println("ContIsland_17: " + ProteinEvolverABC_InputContIsland_Mult17);
				System.out.println("ContIsland_18: " + ProteinEvolverABC_InputContIsland_Mult18);
				System.out.println("ContIsland_19: " + ProteinEvolverABC_InputContIsland_Mult19);
				System.out.println("ContIsland_20: " + ProteinEvolverABC_InputContIsland_Mult20);
				
				if (thisValue0 == 0)
					{
					System.out.println("Strange error in ContIsland model. thisValue0 = " + thisValue0);
					JOptionPane.showMessageDialog(null, "Strange error in ContIsland model. thisValue0 = " + thisValue0 ," ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				if (thisValue0 == 1)
					{
					System.out.println("More than 1 deme is required to use ContIsland model");
					JOptionPane.showMessageDialog(null, "More than 1 deme is required to use ContIsland model", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				if (thisValue0 == 2 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2;
					}
				if (thisValue0 == 3 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3;
					}
				if (thisValue0 == 4 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4;
					}
				if (thisValue0 == 5 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5;
					}
				if (thisValue0 == 6 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5 + " " + ProteinEvolverABC_InputContIsland_Mult6;
					}
				if (thisValue0 == 7 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5 + " " + ProteinEvolverABC_InputContIsland_Mult6 + " " + ProteinEvolverABC_InputContIsland_Mult7;
					}
				if (thisValue0 == 8 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5 + " " + ProteinEvolverABC_InputContIsland_Mult6 + " " + ProteinEvolverABC_InputContIsland_Mult7 + " " + ProteinEvolverABC_InputContIsland_Mult8;
					}
				if (thisValue0 == 9 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5 + " " + ProteinEvolverABC_InputContIsland_Mult6 + " " + ProteinEvolverABC_InputContIsland_Mult7 + " " + ProteinEvolverABC_InputContIsland_Mult8 + " " + ProteinEvolverABC_InputContIsland_Mult9;
					}
				if (thisValue0 == 10 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5 + " " + ProteinEvolverABC_InputContIsland_Mult6 + " " + ProteinEvolverABC_InputContIsland_Mult7 + " " + ProteinEvolverABC_InputContIsland_Mult8 + " " + ProteinEvolverABC_InputContIsland_Mult9 + " " + ProteinEvolverABC_InputContIsland_Mult10;
					}
				if (thisValue0 == 11 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5 + " " + ProteinEvolverABC_InputContIsland_Mult6 + " " + ProteinEvolverABC_InputContIsland_Mult7 + " " + ProteinEvolverABC_InputContIsland_Mult8 + " " + ProteinEvolverABC_InputContIsland_Mult9 + " " + ProteinEvolverABC_InputContIsland_Mult10 + " " + ProteinEvolverABC_InputContIsland_Mult11;
					}
				if (thisValue0 == 12 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5 + " " + ProteinEvolverABC_InputContIsland_Mult6 + " " + ProteinEvolverABC_InputContIsland_Mult7 + " " + ProteinEvolverABC_InputContIsland_Mult8 + " " + ProteinEvolverABC_InputContIsland_Mult9 + " " + ProteinEvolverABC_InputContIsland_Mult10 + " " + ProteinEvolverABC_InputContIsland_Mult11 + " " + ProteinEvolverABC_InputContIsland_Mult12;
					}
				if (thisValue0 == 13 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5 + " " + ProteinEvolverABC_InputContIsland_Mult6 + " " + ProteinEvolverABC_InputContIsland_Mult7 + " " + ProteinEvolverABC_InputContIsland_Mult8 + " " + ProteinEvolverABC_InputContIsland_Mult9 + " " + ProteinEvolverABC_InputContIsland_Mult10 + " " + ProteinEvolverABC_InputContIsland_Mult11 + " " + ProteinEvolverABC_InputContIsland_Mult12 + " " + ProteinEvolverABC_InputContIsland_Mult13;
					}
				if (thisValue0 == 14 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5 + " " + ProteinEvolverABC_InputContIsland_Mult6 + " " + ProteinEvolverABC_InputContIsland_Mult7 + " " + ProteinEvolverABC_InputContIsland_Mult8 + " " + ProteinEvolverABC_InputContIsland_Mult9 + " " + ProteinEvolverABC_InputContIsland_Mult10 + " " + ProteinEvolverABC_InputContIsland_Mult11 + " " + ProteinEvolverABC_InputContIsland_Mult12 + " " + ProteinEvolverABC_InputContIsland_Mult13 + " " + ProteinEvolverABC_InputContIsland_Mult14;
					}
				if (thisValue0 == 15 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5 + " " + ProteinEvolverABC_InputContIsland_Mult6 + " " + ProteinEvolverABC_InputContIsland_Mult7 + " " + ProteinEvolverABC_InputContIsland_Mult8 + " " + ProteinEvolverABC_InputContIsland_Mult9 + " " + ProteinEvolverABC_InputContIsland_Mult10 + " " + ProteinEvolverABC_InputContIsland_Mult11 + " " + ProteinEvolverABC_InputContIsland_Mult12 + " " + ProteinEvolverABC_InputContIsland_Mult13 + " " + ProteinEvolverABC_InputContIsland_Mult14 + " " + ProteinEvolverABC_InputContIsland_Mult15;
					}
				if (thisValue0 == 16 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5 + " " + ProteinEvolverABC_InputContIsland_Mult6 + " " + ProteinEvolverABC_InputContIsland_Mult7 + " " + ProteinEvolverABC_InputContIsland_Mult8 + " " + ProteinEvolverABC_InputContIsland_Mult9 + " " + ProteinEvolverABC_InputContIsland_Mult10 + " " + ProteinEvolverABC_InputContIsland_Mult11 + " " + ProteinEvolverABC_InputContIsland_Mult12 + " " + ProteinEvolverABC_InputContIsland_Mult13 + " " + ProteinEvolverABC_InputContIsland_Mult14 + " " + ProteinEvolverABC_InputContIsland_Mult15 + " " + ProteinEvolverABC_InputContIsland_Mult16;
					}
				if (thisValue0 == 17 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5 + " " + ProteinEvolverABC_InputContIsland_Mult6 + " " + ProteinEvolverABC_InputContIsland_Mult7 + " " + ProteinEvolverABC_InputContIsland_Mult8 + " " + ProteinEvolverABC_InputContIsland_Mult9 + " " + ProteinEvolverABC_InputContIsland_Mult10 + " " + ProteinEvolverABC_InputContIsland_Mult11 + " " + ProteinEvolverABC_InputContIsland_Mult12 + " " + ProteinEvolverABC_InputContIsland_Mult13 + " " + ProteinEvolverABC_InputContIsland_Mult14 + " " + ProteinEvolverABC_InputContIsland_Mult15 + " " + ProteinEvolverABC_InputContIsland_Mult16 + " " + ProteinEvolverABC_InputContIsland_Mult17;
					}
				if (thisValue0 == 18 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5 + " " + ProteinEvolverABC_InputContIsland_Mult6 + " " + ProteinEvolverABC_InputContIsland_Mult7 + " " + ProteinEvolverABC_InputContIsland_Mult8 + " " + ProteinEvolverABC_InputContIsland_Mult9 + " " + ProteinEvolverABC_InputContIsland_Mult10 + " " + ProteinEvolverABC_InputContIsland_Mult11 + " " + ProteinEvolverABC_InputContIsland_Mult12 + " " + ProteinEvolverABC_InputContIsland_Mult13 + " " + ProteinEvolverABC_InputContIsland_Mult14 + " " + ProteinEvolverABC_InputContIsland_Mult15 + " " + ProteinEvolverABC_InputContIsland_Mult16 + " " + ProteinEvolverABC_InputContIsland_Mult17 + " " + ProteinEvolverABC_InputContIsland_Mult18;
					}
				if (thisValue0 == 19 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5 + " " + ProteinEvolverABC_InputContIsland_Mult6 + " " + ProteinEvolverABC_InputContIsland_Mult7 + " " + ProteinEvolverABC_InputContIsland_Mult8 + " " + ProteinEvolverABC_InputContIsland_Mult9 + " " + ProteinEvolverABC_InputContIsland_Mult10 + " " + ProteinEvolverABC_InputContIsland_Mult11 + " " + ProteinEvolverABC_InputContIsland_Mult12 + " " + ProteinEvolverABC_InputContIsland_Mult13 + " " + ProteinEvolverABC_InputContIsland_Mult14 + " " + ProteinEvolverABC_InputContIsland_Mult15 + " " + ProteinEvolverABC_InputContIsland_Mult16 + " " + ProteinEvolverABC_InputContIsland_Mult17 + " " + ProteinEvolverABC_InputContIsland_Mult18 + " " + ProteinEvolverABC_InputContIsland_Mult19;
					}
				if (thisValue0 == 20 && Error == 0)
					{
					ProteinEvolverABC_ContIslandModel = "MigrationModel=3 " + sX0 + " " + ProteinEvolverABC_InputContIsland_Mult1 + " " + ProteinEvolverABC_InputContIsland_Mult2 + " " + ProteinEvolverABC_InputContIsland_Mult3 + " " + ProteinEvolverABC_InputContIsland_Mult4 + " " + ProteinEvolverABC_InputContIsland_Mult5 + " " + ProteinEvolverABC_InputContIsland_Mult6 + " " + ProteinEvolverABC_InputContIsland_Mult7 + " " + ProteinEvolverABC_InputContIsland_Mult8 + " " + ProteinEvolverABC_InputContIsland_Mult9 + " " + ProteinEvolverABC_InputContIsland_Mult10 + " " + ProteinEvolverABC_InputContIsland_Mult11 + " " + ProteinEvolverABC_InputContIsland_Mult12 + " " + ProteinEvolverABC_InputContIsland_Mult13 + " " + ProteinEvolverABC_InputContIsland_Mult14 + " " + ProteinEvolverABC_InputContIsland_Mult15 + " " + ProteinEvolverABC_InputContIsland_Mult16 + " " + ProteinEvolverABC_InputContIsland_Mult17 + " " + ProteinEvolverABC_InputContIsland_Mult18 + " " + ProteinEvolverABC_InputContIsland_Mult19 + " " + ProteinEvolverABC_InputContIsland_Mult20;
					}
	
				
				if (Error == 0)
					{
					SavedMultContIsland = 1;
					NumberOfDemes = thisValue0;
					label4eeeContIsland.setText("Continent-island model was saved");
					label4eeeContIsland.setVisible(true); // Dated tips saved
					System.out.println("ProteinEvolverABC_ContIslandModel: " + ProteinEvolverABC_ContIslandModel);
					MultContIslandWindow.setVisible(false);
					MultContIslandWindow.dispose();
					System.out.println("SavedMultContIsland: " + SavedMultContIsland);
					}
				}

			}
		}



	
// runButtonMultPopStructExitHandler button
	public class runButtonMultPopStructExitHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			ConvergenceDemesProteinEvolverABC_No.setSelected(true);
			label4eeeM.setText("");
			label4eeeM.setVisible(false); // Demog not saved
			ProteinEvolverABC_ConvDemes = "#Species/populationsTree=3 1 2 300 3 4 600 5 6 700";
			SavedMultPopStruct = 0;
			
			MultPopStructWindow.setVisible(false);
			MultPopStructWindow.dispose();
			System.out.println("Do not demes tree: " + ProteinEvolverABC_ConvDemes);
			}
		}

	

	// runButtonMultPopStructSaveNextHandler button
	public class runButtonMultPopStructSaveNextHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			Error = 0;
			
			String ProteinEvolverABC_InputPopStruct_Mult1 = "";
			String ProteinEvolverABC_InputPopStruct_Mult2 = "";
			String ProteinEvolverABC_InputPopStruct_Mult3 = "";
			String ProteinEvolverABC_InputPopStruct_Mult4 = "";
			String ProteinEvolverABC_InputPopStruct_Mult5 = "";
			String ProteinEvolverABC_InputPopStruct_Mult6 = "";
			String ProteinEvolverABC_InputPopStruct_Mult7 = "";
			String ProteinEvolverABC_InputPopStruct_Mult8 = "";
			String ProteinEvolverABC_InputPopStruct_Mult9 = "";
			String ProteinEvolverABC_InputPopStruct_Mult10 = "";

			// Number Of PopStruct
			String sX0 = TextNumberOfMultPopStructProteinEvolverABC.getText();
			int thisValue0 = 0;
			if (sX0.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX0.length(); i++) // check integer
    					{
        				char c = sX0.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Number of convergence events is incorrect: " + sX0);
								JOptionPane.showMessageDialog(null, "Number of convergence events is incorrect: " + sX0, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					thisValue0 = Integer.parseInt(sX0);
					if (thisValue0 <= 0)
						{
						System.out.println("Number of convergence events cannot be null or negative: " + thisValue0);
						JOptionPane.showMessageDialog(null, "Number of convergence events cannot be null or negative: " + thisValue0, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Number of convergence events: " + sX0);
					}
        		}
			else
				{
				System.out.println("Number of convergence events must be introduced");
				JOptionPane.showMessageDialog(null, "Number of convergence events must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}


			// PopStruct_1
			int Init_Reg1_1 = 0;
			int End_Reg1_1 = 0;
			Init_Reg1_1 = 0;
			End_Reg1_1 = 0;
			String sX_Reg1_1 = TextMultPopStruct_Reg1_1.getText();
			if (sX_Reg1_1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_1.length(); i++) // check integer
    					{
        				char c = sX_Reg1_1.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_1, initial deme incorrect: " + sX_Reg1_1);
								JOptionPane.showMessageDialog(null, "PopStruct_1, initial deme incorrect: " + sX_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_1 = Integer.parseInt(sX_Reg1_1);
					if (Init_Reg1_1 <= 0 && Error == 0)
						{
						System.out.println("PopStruct_1, initial deme cannot be null or negative: " + Init_Reg1_1);
						JOptionPane.showMessageDialog(null, "PopStruct_1, initial deme cannot be null or negative: " + Init_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_1, initial deme: " + sX_Reg1_1);
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("PopStruct_1, initial deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_1, initial deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_1 = TextMultPopStruct_Reg2_1.getText();
			if (sX_Reg2_1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_1.length(); i++) // check integer
    					{
        				char c = sX_Reg2_1.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_1, final deme incorrect: " + sX_Reg2_1);
								JOptionPane.showMessageDialog(null, "PopStruct_1, final deme incorrect: " + sX_Reg2_1, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_1 = Integer.parseInt(sX_Reg2_1);
					if (End_Reg1_1 <= 0 && Error == 0)
						{
						System.out.println("PopStruct_1, final deme cannot be null or negative: " + End_Reg1_1);
						JOptionPane.showMessageDialog(null, "PopStruct_1, final deme cannot be null or negative: " + End_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_1, final population size: " + sX_Reg2_1);
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("PopStruct_1, final deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_1, final deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_PopStruct_1 = TextMultPopStructProteinEvolverABC_1.getText();
			int Control_1 = 0;
			if (sX_PopStruct_1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_PopStruct_1.length(); i++) // check integer
    					{
        				char c = sX_PopStruct_1.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_1 = Control_1 + 1; // ok
        					}
        				
						}
					}
				if (Error == 0)
					{
					if (Control_1 < 1 && Error == 0)
						{
						System.out.println("PopStruct_1: Incorrect time");
						JOptionPane.showMessageDialog(null, "PopStruct_1: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_1: " + sX_PopStruct_1);
					}
        		} 
			else
				{
				if (thisValue0 > 0 && Error == 0)
					{
					System.out.println("PopStruct_1 must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_1 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			
			// PopStruct_2
			int Init_Reg1_2 = 0;
			int End_Reg1_2 = 0;
			Init_Reg1_2 = 0;
			End_Reg1_2 = 0;
			String sX_Reg1_2 = TextMultPopStruct_Reg1_2.getText();
			if (sX_Reg1_2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_2.length(); i++) // check integer
    					{
        				char c = sX_Reg1_2.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_2, initial deme incorrect: " + sX_Reg1_2);
								JOptionPane.showMessageDialog(null, "PopStruct_2, initial deme incorrect: " + sX_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_2 = Integer.parseInt(sX_Reg1_2);
					if (Init_Reg1_2 <= 0 && Error == 0)
						{
						System.out.println("PopStruct_2, initial deme cannot be null or negative: " + Init_Reg1_2);
						JOptionPane.showMessageDialog(null, "PopStruct_2, initial deme cannot be null or negative: " + Init_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_2, initial population size: " + sX_Reg1_2);
					}
        		} 
			else
				{
				if (thisValue0 > 1 && Error == 0)
					{
					System.out.println("PopStruct_2, initial deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_2, initial deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_2 = TextMultPopStruct_Reg2_2.getText();
			if (sX_Reg2_2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_2.length(); i++) // check integer
    					{
        				char c = sX_Reg2_2.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_2, final deme incorrect: " + sX_Reg2_2);
								JOptionPane.showMessageDialog(null, "PopStruct_2, final deme incorrect: " + sX_Reg2_2, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_2 = Integer.parseInt(sX_Reg2_2);
					if (End_Reg1_2 <= 0 && Error == 0)
						{
						System.out.println("PopStruct_2, final deme cannot be null or negative: " + End_Reg1_2);
						JOptionPane.showMessageDialog(null, "PopStruct_2, final deme cannot be null or negative: " + End_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_2, final deme: " + sX_Reg2_2);
					}
        		} 
			else
				{
				if (thisValue0 > 1 && Error == 0)
					{
					System.out.println("PopStruct_2, final deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_2, final deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_PopStruct_2 = TextMultPopStructProteinEvolverABC_2.getText();
			int Control_2 = 0;
			if (sX_PopStruct_2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_PopStruct_2.length(); i++) // check integer
    					{
        				char c = sX_PopStruct_2.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_2 = Control_2 + 1; // ok
        					}
						}
					}
				if (Error == 0)
					{
					if (Control_2 < 1 && Error == 0)
						{
						System.out.println("PopStruct_2: Incorrect time");
						JOptionPane.showMessageDialog(null, "PopStruct_2: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_2: " + sX_PopStruct_2);
					}
        		} 
			else
				{
				if (thisValue0 > 1 && Error == 0)
					{
					System.out.println("PopStruct_2 must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_2 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			
			// PopStruct_3
			int Init_Reg1_3 = 0;
			int End_Reg1_3 = 0;
			Init_Reg1_3 = 0;
			End_Reg1_3 = 0;
			String sX_Reg1_3 = TextMultPopStruct_Reg1_3.getText();
			if (sX_Reg1_3.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_3.length(); i++) // check integer
    					{
        				char c = sX_Reg1_3.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_3, initial deme incorrect: " + sX_Reg1_3);
								JOptionPane.showMessageDialog(null, "PopStruct_3, initial deme incorrect: " + sX_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_3 = Integer.parseInt(sX_Reg1_3);
					if (Init_Reg1_3 <= 0 && Error == 0)
						{
						System.out.println("PopStruct_3, initial deme cannot be null or negative: " + Init_Reg1_3);
						JOptionPane.showMessageDialog(null, "PopStruct_3, initial deme cannot be null or negative: " + Init_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_3, initial deme: " + sX_Reg1_3);
					}
        		} 
			else
				{
				if (thisValue0 > 2 && Error == 0)
					{
					System.out.println("PopStruct_3, initial deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_3, initial deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_3 = TextMultPopStruct_Reg2_3.getText();
			if (sX_Reg2_3.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_3.length(); i++) // check integer
    					{
        				char c = sX_Reg2_3.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_3, final deme incorrect: " + sX_Reg2_3);
								JOptionPane.showMessageDialog(null, "PopStruct_3, final deme incorrect: " + sX_Reg2_3, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_3 = Integer.parseInt(sX_Reg2_3);
					if (End_Reg1_3 <= 0 && Error == 0)
						{
						System.out.println("PopStruct_3, final population size cannot be null or negative: " + End_Reg1_3);
						JOptionPane.showMessageDialog(null, "PopStruct_3, final population size cannot be null or negative: " + End_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_3, final deme: " + sX_Reg2_3);
					}
        		} 
			else
				{
				if (thisValue0 > 2 && Error == 0)
					{
					System.out.println("PopStruct_3, final deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_3, final deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_PopStruct_3 = TextMultPopStructProteinEvolverABC_3.getText();
			int Control_3 = 0;
			if (sX_PopStruct_3.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_PopStruct_3.length(); i++) // check integer
    					{
        				char c = sX_PopStruct_3.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_3 = Control_3 + 1; // ok
        					}
        				
						}
					}
				if (Error == 0)
					{
					if (Control_3 < 1 && Error == 0)
						{
						System.out.println("PopStruct_3: Incorrect time");
						JOptionPane.showMessageDialog(null, "PopStruct_3: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_3: " + sX_PopStruct_3);
					}
        		} 
			else
				{
				if (thisValue0 > 2 && Error == 0)
					{
					System.out.println("PopStruct_3 must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_3 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
		
		
			// PopStruct_4
			int Init_Reg1_4 = 0;
			int End_Reg1_4 = 0;
			Init_Reg1_4 = 0;
			End_Reg1_4 = 0;
			String sX_Reg1_4 = TextMultPopStruct_Reg1_4.getText();
			if (sX_Reg1_4.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_4.length(); i++) // check integer
    					{
        				char c = sX_Reg1_4.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_4, initial deme incorrect: " + sX_Reg1_4);
								JOptionPane.showMessageDialog(null, "PopStruct_4, initial deme incorrect: " + sX_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_4 = Integer.parseInt(sX_Reg1_4);
					if (Init_Reg1_4 <= 0 && Error == 0)
						{
						System.out.println("PopStruct_4, initial deme cannot be null or negative: " + Init_Reg1_4);
						JOptionPane.showMessageDialog(null, "PopStruct_4, initial deme cannot be null or negative: " + Init_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_4, initial deme: " + sX_Reg1_4);
					}
        		} 
			else
				{
				if (thisValue0 > 3 && Error == 0)
					{
					System.out.println("PopStruct_4, initial deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_4, initial deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_4 = TextMultPopStruct_Reg2_4.getText();
			if (sX_Reg2_4.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_4.length(); i++) // check integer
    					{
        				char c = sX_Reg2_4.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_4, final deme incorrect: " + sX_Reg2_4);
								JOptionPane.showMessageDialog(null, "PopStruct_4, final deme incorrect: " + sX_Reg2_4, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_4 = Integer.parseInt(sX_Reg2_4);
					if (End_Reg1_4 <= 0 && Error == 0)
						{
						System.out.println("PopStruct_4, final deme cannot be null or negative: " + End_Reg1_4);
						JOptionPane.showMessageDialog(null, "PopStruct_4, final deme cannot be null or negative: " + End_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_4, final deme: " + sX_Reg2_4);
					}
        		} 
			else
				{
				if (thisValue0 > 3 && Error == 0)
					{
					System.out.println("PopStruct_4, final deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_4, finaldeme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_PopStruct_4 = TextMultPopStructProteinEvolverABC_4.getText();
			int Control_4 = 0;
			if (sX_PopStruct_4.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_PopStruct_4.length(); i++) // check integer
    					{
        				char c = sX_PopStruct_4.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_4 = Control_4 + 1; // ok
        					}
        				
						}
					}
				if (Error == 0)
					{
					if (Control_4 < 1 && Error == 0)
						{
						System.out.println("PopStruct_4: Incorrect time");
						JOptionPane.showMessageDialog(null, "PopStruct_4: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_4: " + sX_PopStruct_4);
					}
        		} 
			else
				{
				if (thisValue0 > 3 && Error == 0)
					{
					System.out.println("PopStruct_4 must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_4 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
		
	
		// PopStruct_5
			int Init_Reg1_5 = 0;
			int End_Reg1_5 = 0;
			Init_Reg1_5 = 0;
			End_Reg1_5 = 0;
			String sX_Reg1_5 = TextMultPopStruct_Reg1_5.getText();
			if (sX_Reg1_5.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_5.length(); i++) // check integer
    					{
        				char c = sX_Reg1_5.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_5, initial deme incorrect: " + sX_Reg1_5);
								JOptionPane.showMessageDialog(null, "PopStruct_5, initial deme incorrect: " + sX_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_5 = Integer.parseInt(sX_Reg1_5);
					if (Init_Reg1_5 <= 0)
						{
						System.out.println("PopStruct_5, initial deme cannot be null or negative: " + Init_Reg1_5);
						JOptionPane.showMessageDialog(null, "PopStruct_5, initialdeme cannot be null or negative: " + Init_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_5, initial deme: " + sX_Reg1_5);
					}
        		} 
			else
				{
				if (thisValue0 > 4 && Error == 0)
					{
					System.out.println("PopStruct_5, initial deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_5, initial deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_5 = TextMultPopStruct_Reg2_5.getText();
			if (sX_Reg2_5.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_5.length(); i++) // check integer
    					{
        				char c = sX_Reg2_5.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_5, final deme incorrect: " + sX_Reg2_5);
								JOptionPane.showMessageDialog(null, "PopStruct_5, final deme incorrect: " + sX_Reg2_5, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_5 = Integer.parseInt(sX_Reg2_5);
					if (End_Reg1_5 <= 0 && Error == 0)
						{
						System.out.println("PopStruct_5, final deme cannot be null or negative: " + End_Reg1_5);
						JOptionPane.showMessageDialog(null, "PopStruct_5, final deme cannot be null or negative: " + End_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_5, final deme: " + sX_Reg2_5);
					}
        		} 
			else
				{
				if (thisValue0 > 4 && Error == 0)
					{
					System.out.println("PopStruct_5, final deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_5, final deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_PopStruct_5 = TextMultPopStructProteinEvolverABC_5.getText();
			int Control_5 = 0;
			if (sX_PopStruct_5.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_PopStruct_5.length(); i++) // check integer
    					{
        				char c = sX_PopStruct_5.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_5 = Control_5 + 1; // ok
        					}
        				
						}
					}
				if (Error == 0)
					{
					if (Control_5 < 1 && Error == 0)
						{
						System.out.println("PopStruct_5: Incorrect time");
						JOptionPane.showMessageDialog(null, "PopStruct_5: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_5: " + sX_PopStruct_5);
					}
        		} 
			else
				{
				if (thisValue0 > 4 && Error == 0)
					{
					System.out.println("PopStruct_5 must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_5 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// PopStruct_6
			int Init_Reg1_6 = 0;
			int End_Reg1_6 = 0;
			Init_Reg1_6 = 0;
			End_Reg1_6 = 0;
			String sX_Reg1_6 = TextMultPopStruct_Reg1_6.getText();
			if (sX_Reg1_6.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_6.length(); i++) // check integer
    					{
        				char c = sX_Reg1_6.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_6, initial deme incorrect: " + sX_Reg1_6);
								JOptionPane.showMessageDialog(null, "PopStruct_6, initial deme incorrect: " + sX_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_6 = Integer.parseInt(sX_Reg1_6);
					if (Init_Reg1_6 <= 0 && Error == 0)
						{
						System.out.println("PopStruct_6, initial deme cannot be null or negative: " + Init_Reg1_6);
						JOptionPane.showMessageDialog(null, "PopStruct_6, initial deme cannot be null or negative: " + Init_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_6, initial deme: " + sX_Reg1_6);
					}
        		} 
			else
				{
				if (thisValue0 > 5 && Error == 0)
					{
					System.out.println("PopStruct_6, initial deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_6, initial deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_6 = TextMultPopStruct_Reg2_6.getText();
			if (sX_Reg2_6.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_6.length(); i++) // check integer
    					{
        				char c = sX_Reg2_6.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_6, final deme incorrect: " + sX_Reg2_6);
								JOptionPane.showMessageDialog(null, "PopStruct_6, final deme incorrect: " + sX_Reg2_6, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_6 = Integer.parseInt(sX_Reg2_6);
					if (End_Reg1_6 <= 0 && Error == 0)
						{
						System.out.println("PopStruct_6, final deme cannot be null or negative: " + End_Reg1_6);
						JOptionPane.showMessageDialog(null, "PopStruct_6, final deme cannot be null or negative: " + End_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_6, final deme: " + sX_Reg2_6);
					}
        		} 
			else
				{
				if (thisValue0 > 5 && Error == 0)
					{
					System.out.println("PopStruct_6, final deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_6, final deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_PopStruct_6 = TextMultPopStructProteinEvolverABC_6.getText();
			int Control_6 = 0;
			if (sX_PopStruct_6.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_PopStruct_6.length(); i++) // check integer
    					{
        				char c = sX_PopStruct_6.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_6 = Control_6 + 1; // ok
        					}
        				
						}
					}
				if (Error == 0)
					{
					if (Control_6 < 1 && Error == 0)
						{
						System.out.println("PopStruct_6: Incorrect time");
						JOptionPane.showMessageDialog(null, "PopStruct_6: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_6: " + sX_PopStruct_6);
					}
        		} 
			else
				{
				if (thisValue0 > 5 && Error == 0)
					{
					System.out.println("PopStruct_6 must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_6 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// PopStruct_7
			int Init_Reg1_7 = 0;
			int End_Reg1_7 = 0;
			Init_Reg1_7 = 0;
			End_Reg1_7 = 0;
			String sX_Reg1_7 = TextMultPopStruct_Reg1_7.getText();
			if (sX_Reg1_7.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_7.length(); i++) // check integer
    					{
        				char c = sX_Reg1_7.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_7, initial deme incorrect: " + sX_Reg1_7);
								JOptionPane.showMessageDialog(null, "PopStruct_7, initial deme incorrect: " + sX_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_7 = Integer.parseInt(sX_Reg1_7);
					if (Init_Reg1_7 <= 0 && Error == 0)
						{
						System.out.println("PopStruct_7, initial deme cannot be null or negative: " + Init_Reg1_7);
						JOptionPane.showMessageDialog(null, "PopStruct_7, initial deme cannot be null or negative: " + Init_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_7, initial deme: " + sX_Reg1_7);
					}
        		} 
			else
				{
				if (thisValue0 > 6 && Error == 0)
					{
					System.out.println("PopStruct_7, initial deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_7, initial deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_7 = TextMultPopStruct_Reg2_7.getText();
			if (sX_Reg2_7.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_7.length(); i++) // check integer
    					{
        				char c = sX_Reg2_7.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_7, final deme incorrect: " + sX_Reg2_7);
								JOptionPane.showMessageDialog(null, "PopStruct_7, final deme incorrect: " + sX_Reg2_7, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_7 = Integer.parseInt(sX_Reg2_7);
					if (End_Reg1_7 <= 0)
						{
						System.out.println("PopStruct_7, final deme cannot be null or negative: " + End_Reg1_7);
						JOptionPane.showMessageDialog(null, "PopStruct_7, final deme cannot be null or negative: " + End_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_7, final deme: " + sX_Reg2_7);
					}
        		} 
			else
				{
				if (thisValue0 > 6 && Error == 0)
					{
					System.out.println("PopStruct_7, final deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_7, final deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_PopStruct_7 = TextMultPopStructProteinEvolverABC_7.getText();
			int Control_7 = 0;
			if (sX_PopStruct_7.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_PopStruct_7.length(); i++) // check integer
    					{
        				char c = sX_PopStruct_7.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_7 = Control_7 + 1; // ok
        					}
        				}
					}
				if (Error == 0)
					{
					if (Control_7 < 1 && Error == 0)
						{
						System.out.println("PopStruct_7: Incorrect time");
						JOptionPane.showMessageDialog(null, "PopStruct_7: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_7: " + sX_PopStruct_7);
					}
        		} 
			else
				{
				if (thisValue0 > 6 && Error == 0)
					{
					System.out.println("PopStruct_7 must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_7 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// PopStruct_8
			int Init_Reg1_8 = 0;
			int End_Reg1_8 = 0;
			Init_Reg1_8 = 0;
			End_Reg1_8 = 0;
			String sX_Reg1_8 = TextMultPopStruct_Reg1_8.getText();
			if (sX_Reg1_8.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_8.length(); i++) // check integer
    					{
        				char c = sX_Reg1_8.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_8, initial deme incorrect: " + sX_Reg1_8);
								JOptionPane.showMessageDialog(null, "PopStruct_8, initial deme incorrect: " + sX_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_8 = Integer.parseInt(sX_Reg1_8);
					if (Init_Reg1_8 <= 0)
						{
						System.out.println("PopStruct_8, initial deme cannot be null or negative: " + Init_Reg1_8);
						JOptionPane.showMessageDialog(null, "PopStruct_8, initial deme cannot be null or negative: " + Init_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_8, initial deme: " + sX_Reg1_8);
					}
        		} 
			else
				{
				if (thisValue0 > 7 && Error == 0)
					{
					System.out.println("PopStruct_8, initial deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_8, initial deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_8 = TextMultPopStruct_Reg2_8.getText();
			if (sX_Reg2_8.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_8.length(); i++) // check integer
    					{
        				char c = sX_Reg2_8.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_8, final deme incorrect: " + sX_Reg2_8);
								JOptionPane.showMessageDialog(null, "PopStruct_8, final deme incorrect: " + sX_Reg2_8, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_8 = Integer.parseInt(sX_Reg2_8);
					if (End_Reg1_8 <= 0)
						{
						System.out.println("PopStruct_8, final deme cannot be null or negative: " + End_Reg1_8);
						JOptionPane.showMessageDialog(null, "PopStruct_8, final deme cannot be null or negative: " + End_Reg1_8, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_8, final deme: " + sX_Reg2_8);
					}
        		} 
			else
				{
				if (thisValue0 > 7 && Error == 0)
					{
					System.out.println("PopStruct_8, final deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_8, final deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_PopStruct_8 = TextMultPopStructProteinEvolverABC_8.getText();
			int Control_8 = 0;
			if (sX_PopStruct_8.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_PopStruct_8.length(); i++) // check integer
    					{
        				char c = sX_PopStruct_8.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_8 = Control_8 + 1; // ok
        					}
						}
					}
				if (Error == 0)
					{
					if (Control_8 < 1 && Error == 0)
						{
						System.out.println("PopStruct_8: Incorrect time");
						JOptionPane.showMessageDialog(null, "PopStruct_8: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_8: " + sX_PopStruct_8);
					}
        		} 
			else
				{
				if (thisValue0 > 7 && Error == 0)
					{
					System.out.println("PopStruct_8 must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_8 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}


			// PopStruct_9
			int Init_Reg1_9 = 0;
			int End_Reg1_9 = 0;
			Init_Reg1_9 = 0;
			End_Reg1_9 = 0;
			String sX_Reg1_9 = TextMultPopStruct_Reg1_9.getText();
			if (sX_Reg1_9.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_9.length(); i++) // check integer
    					{
        				char c = sX_Reg1_9.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_9, initial deme incorrect: " + sX_Reg1_9);
								JOptionPane.showMessageDialog(null, "PopStruct_9, initial deme incorrect: " + sX_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_9 = Integer.parseInt(sX_Reg1_9);
					if (Init_Reg1_9 <= 0 && Error == 0)
						{
						System.out.println("PopStruct_9, initial deme cannot be null or negative: " + Init_Reg1_9);
						JOptionPane.showMessageDialog(null, "PopStruct_9, initial deme cannot be null or negative: " + Init_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_9, initial deme: " + sX_Reg1_9);
					}
        		} 
			else
				{
				if (thisValue0 > 8 && Error == 0)
					{
					System.out.println("PopStruct_9, initial deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_9, initial deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_9 = TextMultPopStruct_Reg2_9.getText();
			if (sX_Reg2_9.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_9.length(); i++) // check integer
    					{
        				char c = sX_Reg2_9.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_9, final deme incorrect: " + sX_Reg2_9);
								JOptionPane.showMessageDialog(null, "PopStruct_9, final deme incorrect: " + sX_Reg2_9, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_9 = Integer.parseInt(sX_Reg2_9);
					if (End_Reg1_9 <= 0 && Error == 0)
						{
						System.out.println("PopStruct_9, final deme cannot be null or negative: " + End_Reg1_9);
						JOptionPane.showMessageDialog(null, "PopStruct_9, final deme cannot be null or negative: " + End_Reg1_9, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_9, final deme: " + sX_Reg2_9);
					}
        		} 
			else
				{
				if (thisValue0 > 8 && Error == 0)
					{
					System.out.println("PopStruct_9, final deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_9, final deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_PopStruct_9 = TextMultPopStructProteinEvolverABC_9.getText();
			int Control_9 = 0;
			if (sX_PopStruct_9.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_PopStruct_9.length(); i++) // check integer
    					{
        				char c = sX_PopStruct_9.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_9 = Control_9 + 1; // ok
        					}
						}
					}
				if (Error == 0)
					{
					if (Control_9 < 1 && Error == 0)
						{
						System.out.println("PopStruct_9: Incorrect time");
						JOptionPane.showMessageDialog(null, "PopStruct_9: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_9: " + sX_PopStruct_9);
					}
        		} 
			else
				{
				if (thisValue0 > 8 && Error == 0)
					{
					System.out.println("PopStruct_9 must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_9 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
				
			// PopStruct_10
			int Init_Reg1_10 = 0;
			int End_Reg1_10 = 0;
			Init_Reg1_10 = 0;
			End_Reg1_10 = 0;
			String sX_Reg1_10 = TextMultPopStruct_Reg1_10.getText();
			if (sX_Reg1_10.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_10.length(); i++) // check integer
    					{
        				char c = sX_Reg1_10.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_10, initial deme incorrect: " + sX_Reg1_10);
								JOptionPane.showMessageDialog(null, "PopStruct_10, initial deme incorrect: " + sX_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					Init_Reg1_10 = Integer.parseInt(sX_Reg1_10);
					if (Init_Reg1_10 <= 0)
						{
						System.out.println("PopStruct_10, initial deme cannot be null or negative: " + Init_Reg1_10);
						JOptionPane.showMessageDialog(null, "PopStruct_10, initial deme cannot be null or negative: " + Init_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_10, initial population size: " + sX_Reg1_10);
					}
        		} 
			else
				{
				if (thisValue0 > 9 && Error == 0)
					{
					System.out.println("PopStruct_10, initial deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_10, initial deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
			String sX_Reg2_10 = TextMultPopStruct_Reg2_10.getText();
			if (sX_Reg2_10.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_10.length(); i++) // check integer
    					{
        				char c = sX_Reg2_10.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("PopStruct_10, final deme incorrect: " + sX_Reg2_10);
								JOptionPane.showMessageDialog(null, "PopStruct_10, final deme incorrect: " + sX_Reg2_10, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					End_Reg1_10 = Integer.parseInt(sX_Reg2_10);
					if (End_Reg1_10 <= 0)
						{
						System.out.println("PopStruct_10, final deme cannot be null or negative: " + End_Reg1_10);
						JOptionPane.showMessageDialog(null, "PopStruct_10, final deme cannot be null or negative: " + End_Reg1_10, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_10, final deme: " + sX_Reg2_10);
					}
        		} 
			else
				{
				if (thisValue0 > 9 && Error == 0)
					{
					System.out.println("PopStruct_10, final deme must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_10, final deme must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			
			String sX_PopStruct_10 = TextMultPopStructProteinEvolverABC_10.getText();
			int Control_10 = 0;
			if (sX_PopStruct_10.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX_PopStruct_10.length(); i++) // check integer
    					{
        				char c = sX_PopStruct_10.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			Control_10 = Control_10 + 1; // ok
        					}
						}
					}
				if (Error == 0)
					{
					if (Control_10 < 1 && Error == 0)
						{
						System.out.println("PopStruct_10: Incorrect time");
						JOptionPane.showMessageDialog(null, "PopStruct_10: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("PopStruct_10: " + sX_PopStruct_10);
					}
        		} 
			else
				{
				if (thisValue0 > 9 && Error == 0)
					{
					System.out.println("PopStruct_10 must be introduced");
					JOptionPane.showMessageDialog(null, "PopStruct_10 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
				
		// Checking
		if (thisValue0 >= NumberOfDemes)
			{
			System.out.println("The number of convergence events (" + thisValue0 + ") should be lower than the number of demes introduced in the migration model ("+ NumberOfDemes + ")");
			JOptionPane.showMessageDialog(null, "The number of convergence events should be lower than the number of demes introduced in the migration model: " + NumberOfDemes ," ", JOptionPane. INFORMATION_MESSAGE);
			Error = Error + 1;
			}


		// Checking			
			if (Error == 0)
				{
				String Here1_1 = TextMultPopStruct_Reg1_1.getText();
				String Here2_1 = TextMultPopStruct_Reg2_1.getText();
				String Here3_1 = TextMultPopStructProteinEvolverABC_1.getText();
				ProteinEvolverABC_InputPopStruct_Mult1 =  Here1_1 + " " + Here2_1 + " " + Here3_1;
				
				String Here1_2 = TextMultPopStruct_Reg1_2.getText();
				String Here2_2 = TextMultPopStruct_Reg2_2.getText();
				String Here3_2 = TextMultPopStructProteinEvolverABC_2.getText();
				ProteinEvolverABC_InputPopStruct_Mult2 = Here1_2 + " " + Here2_2 + " " + Here3_2;
				
				String Here1_3 = TextMultPopStruct_Reg1_3.getText();
				String Here2_3 = TextMultPopStruct_Reg2_3.getText();
				String Here3_3 = TextMultPopStructProteinEvolverABC_3.getText();
				ProteinEvolverABC_InputPopStruct_Mult3 = Here1_3 + " " + Here2_3 + " " + Here3_3;
				
				String Here1_4 = TextMultPopStruct_Reg1_4.getText();
				String Here2_4 = TextMultPopStruct_Reg2_4.getText();
				String Here3_4 = TextMultPopStructProteinEvolverABC_4.getText();
				ProteinEvolverABC_InputPopStruct_Mult4 = Here1_4 + " " + Here2_4 + " " + Here3_4;
				
				String Here1_5 = TextMultPopStruct_Reg1_5.getText();
				String Here2_5 = TextMultPopStruct_Reg2_5.getText();
				String Here3_5 = TextMultPopStructProteinEvolverABC_5.getText();
				ProteinEvolverABC_InputPopStruct_Mult5 = Here1_5 + " " + Here2_5 + " " + Here3_5;
				
				String Here1_6 = TextMultPopStruct_Reg1_6.getText();
				String Here2_6 = TextMultPopStruct_Reg2_6.getText();
				String Here3_6 = TextMultPopStructProteinEvolverABC_6.getText();
				ProteinEvolverABC_InputPopStruct_Mult6 = Here1_6 + " " + Here2_6 + " " + Here3_6;
				
				String Here1_7 = TextMultPopStruct_Reg1_7.getText();
				String Here2_7 = TextMultPopStruct_Reg2_7.getText();
				String Here3_7 = TextMultPopStructProteinEvolverABC_7.getText();
				ProteinEvolverABC_InputPopStruct_Mult7 = Here1_7 + " " + Here2_7 + " " + Here3_7;
				
				String Here1_8 = TextMultPopStruct_Reg1_8.getText();
				String Here2_8 = TextMultPopStruct_Reg2_8.getText();
				String Here3_8 = TextMultPopStructProteinEvolverABC_8.getText();
				ProteinEvolverABC_InputPopStruct_Mult8 = Here1_8 + " " + Here2_8 + " " + Here3_8;
				
				String Here1_9 = TextMultPopStruct_Reg1_9.getText();
				String Here2_9 = TextMultPopStruct_Reg2_9.getText();
				String Here3_9 = TextMultPopStructProteinEvolverABC_9.getText();
				ProteinEvolverABC_InputPopStruct_Mult9 = Here1_9 + " " + Here2_9 + " " + Here3_9;
				
				String Here1_10 = TextMultPopStruct_Reg1_10.getText();
				String Here2_10 = TextMultPopStruct_Reg2_10.getText();
				String Here3_10 = TextMultPopStructProteinEvolverABC_10.getText();
				ProteinEvolverABC_InputPopStruct_Mult10 = Here1_10 + " " + Here2_10 + " " + Here3_10;
				
				System.out.println("PopStruct_1: " + ProteinEvolverABC_InputPopStruct_Mult1);
				System.out.println("PopStruct_2: " + ProteinEvolverABC_InputPopStruct_Mult2);
				System.out.println("PopStruct_3: " + ProteinEvolverABC_InputPopStruct_Mult3);
				System.out.println("PopStruct_4: " + ProteinEvolverABC_InputPopStruct_Mult4);
				System.out.println("PopStruct_5: " + ProteinEvolverABC_InputPopStruct_Mult5);
				System.out.println("PopStruct_6: " + ProteinEvolverABC_InputPopStruct_Mult6);
				System.out.println("PopStruct_7: " + ProteinEvolverABC_InputPopStruct_Mult7);
				System.out.println("PopStruct_8: " + ProteinEvolverABC_InputPopStruct_Mult8);
				System.out.println("PopStruct_9: " + ProteinEvolverABC_InputPopStruct_Mult9);
				System.out.println("PopStruct_10: " + ProteinEvolverABC_InputPopStruct_Mult10);
				
				if (thisValue0 == 0)
					{
					System.out.println("Strange error in PopStruct. thisValue0 = " + thisValue0);
					JOptionPane.showMessageDialog(null, "Strange error in PopStruct. thisValue0 = " + thisValue0 ," ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					}
				if (thisValue0 == 1)
					{
					ProteinEvolverABC_ConvDemes = "Species/populationsTree=" + sX0 + " " + ProteinEvolverABC_InputPopStruct_Mult1;
					}
				if (thisValue0 == 2 && Error == 0)
					{
					ProteinEvolverABC_ConvDemes = "Species/populationsTree=" + sX0 + " " + ProteinEvolverABC_InputPopStruct_Mult1 + " " + ProteinEvolverABC_InputPopStruct_Mult2;
					}
				if (thisValue0 == 3 && Error == 0)
					{
					ProteinEvolverABC_ConvDemes = "Species/populationsTree=" + sX0 + " " + ProteinEvolverABC_InputPopStruct_Mult1 + " " + ProteinEvolverABC_InputPopStruct_Mult2 + " " + ProteinEvolverABC_InputPopStruct_Mult3;
					}
				if (thisValue0 == 4 && Error == 0)
					{
					ProteinEvolverABC_ConvDemes = "Species/populationsTree=" + sX0 + " " + ProteinEvolverABC_InputPopStruct_Mult1 + " " + ProteinEvolverABC_InputPopStruct_Mult2 + " " + ProteinEvolverABC_InputPopStruct_Mult3 + " " + ProteinEvolverABC_InputPopStruct_Mult4;
					}
				if (thisValue0 == 5 && Error == 0)
					{
					ProteinEvolverABC_ConvDemes = "Species/populationsTree=" + sX0 + " " + ProteinEvolverABC_InputPopStruct_Mult1 + " " + ProteinEvolverABC_InputPopStruct_Mult2 + " " + ProteinEvolverABC_InputPopStruct_Mult3 + " " + ProteinEvolverABC_InputPopStruct_Mult4 + " " + ProteinEvolverABC_InputPopStruct_Mult5;
					}
				if (thisValue0 == 6 && Error == 0)
					{
					ProteinEvolverABC_ConvDemes = "Species/populationsTree=" + sX0 + " " + ProteinEvolverABC_InputPopStruct_Mult1 + " " + ProteinEvolverABC_InputPopStruct_Mult2 + " " + ProteinEvolverABC_InputPopStruct_Mult3 + " " + ProteinEvolverABC_InputPopStruct_Mult4 + " " + ProteinEvolverABC_InputPopStruct_Mult5 + " " + ProteinEvolverABC_InputPopStruct_Mult6;
					}
				if (thisValue0 == 7 && Error == 0)
					{
					ProteinEvolverABC_ConvDemes = "Species/populationsTree=" + sX0 + " " + ProteinEvolverABC_InputPopStruct_Mult1 + " " + ProteinEvolverABC_InputPopStruct_Mult2 + " " + ProteinEvolverABC_InputPopStruct_Mult3 + " " + ProteinEvolverABC_InputPopStruct_Mult4 + " " + ProteinEvolverABC_InputPopStruct_Mult5 + " " + ProteinEvolverABC_InputPopStruct_Mult6 + " " + ProteinEvolverABC_InputPopStruct_Mult7;
					}
				if (thisValue0 == 8 && Error == 0)
					{
					ProteinEvolverABC_ConvDemes = "Species/populationsTree=" + sX0 + " " + ProteinEvolverABC_InputPopStruct_Mult1 + " " + ProteinEvolverABC_InputPopStruct_Mult2 + " " + ProteinEvolverABC_InputPopStruct_Mult3 + " " + ProteinEvolverABC_InputPopStruct_Mult4 + " " + ProteinEvolverABC_InputPopStruct_Mult5 + " " + ProteinEvolverABC_InputPopStruct_Mult6 + " " + ProteinEvolverABC_InputPopStruct_Mult7 + " " + ProteinEvolverABC_InputPopStruct_Mult8;
					}
				if (thisValue0 == 9 && Error == 0)
					{
					ProteinEvolverABC_ConvDemes = "Species/populationsTree=" + sX0 + " " + ProteinEvolverABC_InputPopStruct_Mult1 + " " + ProteinEvolverABC_InputPopStruct_Mult2 + " " + ProteinEvolverABC_InputPopStruct_Mult3 + " " + ProteinEvolverABC_InputPopStruct_Mult4 + " " + ProteinEvolverABC_InputPopStruct_Mult5 + " " + ProteinEvolverABC_InputPopStruct_Mult6 + " " + ProteinEvolverABC_InputPopStruct_Mult7 + " " + ProteinEvolverABC_InputPopStruct_Mult8 + " " + ProteinEvolverABC_InputPopStruct_Mult9;
					}
				if (thisValue0 == 10 && Error == 0)
					{
					ProteinEvolverABC_ConvDemes = "Species/populationsTree=" + sX0 + " " + ProteinEvolverABC_InputPopStruct_Mult1 + " " + ProteinEvolverABC_InputPopStruct_Mult2 + " " + ProteinEvolverABC_InputPopStruct_Mult3 + " " + ProteinEvolverABC_InputPopStruct_Mult4 + " " + ProteinEvolverABC_InputPopStruct_Mult5 + " " + ProteinEvolverABC_InputPopStruct_Mult6 + " " + ProteinEvolverABC_InputPopStruct_Mult7 + " " + ProteinEvolverABC_InputPopStruct_Mult8 + " " + ProteinEvolverABC_InputPopStruct_Mult9 + " " + ProteinEvolverABC_InputPopStruct_Mult10;
					}
	
				
				if (Error == 0)
					{
					NumberOfConvDemes = thisValue0;
					SavedMultPopStruct = 1;
					label4eeeM.setText("Tree was saved");
					label4eeeM.setVisible(true); // Dated tips saved
					System.out.println("ProteinEvolverABC_ConvDemes: " + ProteinEvolverABC_ConvDemes);
					MultPopStructWindow.setVisible(false);
					MultPopStructWindow.dispose();
					System.out.println("SavedMultPopStruct: " + SavedMultPopStruct);
					}
				}

			}
		}




	
	// runButtonMultMigrationRatesExitHandler button // Migration rates
	public class runButtonMultMigrationRatesExitHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			SavedMultMigrationRates = 0;
			label4eeeSD.setText("");
			label4eeeSD.setVisible(false); // MigrationRates not saved

			MultMigrationRatesWindow.setVisible(false);
			MultMigrationRatesWindow.dispose();
			ProteinEvolverABC_MigrationRate = "#MigrationRate=1 0.005";

			// set 1 MigrationRate
			MigrationRate_Cte.setSelected(true);
			TextMigrationRateProteinEvolverABC.setText("0.002");
			TextMigrationRateProteinEvolverABC.setEditable(true);
			TextMigrationRateProteinEvolverABC.setVisible(true);
			System.out.println("Migration rate is no saved ");
			System.out.println("SavedMultMigrationRates: " + SavedMultMigrationRates);
			System.out.println("ProteinEvolverABC_MigrationRate: " + ProteinEvolverABC_MigrationRate);
			}
		}


	// runButtonMultMigrationRatesSaveNextHandler button
	public class runButtonMultMigrationRatesSaveNextHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			Error = 0;
			ProteinEvolverABC_MigrationRate = "#MigrationRate=1 0.005";

			// Number Of MigrationRates
			String sX0 = TextNumberOfMultMigrationRatesProteinEvolverABC.getText();
			int thisValue0 = 0;
			if (sX0.trim().length() != 0) 
				{
				if (Error == 0)
					{
					for (int i=0; i < sX0.length(); i++) // check integer
    					{
        				char c = sX0.charAt(i);
      		  			if (c >= '0' && c <= '9')
        					{
      		      			; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("Number of migration rates is incorrect: " + sX0);
								JOptionPane.showMessageDialog(null, "Number of migration rates is incorrect: " + sX0, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}
				if (Error == 0)
					{
					thisValue0 = Integer.parseInt(sX0);
					if (thisValue0 <= 0)
						{
						System.out.println("Number of migration rates cannot be null or negative: " + thisValue0);
						JOptionPane.showMessageDialog(null, "Number of migration rates cannot be null or negative: " + thisValue0, " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					System.out.println("Number of migration rates: " + sX0);
					}
        		} 
			else
				{
				System.out.println("Number of migration rates must be introduced");
				JOptionPane.showMessageDialog(null, "Number of migration rates must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
				Error = Error + 1;
				//System.exit(0);
				}



			// MigrationRate_1
			if (thisValue0 == 1)
				{
				double par1 = 0;
				String sX_Reg1_1 = TextMultMigrationRates_Reg1_1.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_1.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg1_1.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_1, migration rate incorrect: " + sX_Reg1_1);
							JOptionPane.showMessageDialog(null, "MigrationRate_1, migration rate incorrect: " + sX_Reg1_1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par1 = Double.parseDouble(sX_Reg1_1);
					if ((par1 < 0 || par1 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_1 value is out of range (0-1): " + par1);
						JOptionPane.showMessageDialog(null, "MigrationRate_1 value is out of range (0-1): " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				if (SampleSize == NumberOfConvDemes + 1)
					{
					; // species tree ok, no problem if mig rate = 0
					}
				else
					{
					// checking mig rates
					if (par1 == 0)
						{
						System.out.println("If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation: " + par1);
						JOptionPane.showMessageDialog(null, "If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation: " + par1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					}

				if (Error == 0)
					{
					ProteinEvolverABC_MigrationRate = "MigrationRate=1 " + sX_Reg1_1;
					System.out.println("ProteinEvolverABC_MigrationRate: " + ProteinEvolverABC_MigrationRate);
					}
				}

			// MigrationRate_2
			if (thisValue0 == 2)
				{
				double par2_1 = 0, par2_2 = 0;
				String sX_Reg1_2 = TextMultMigrationRates_Reg1_2.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_2.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg1_2.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_1_2, migration rate incorrect: " + sX_Reg1_2);
							JOptionPane.showMessageDialog(null, "MigrationRate_1_2, migration rate incorrect: " + sX_Reg1_2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par2_1 = Double.parseDouble(sX_Reg1_2);
					if ((par2_1 < 0 || par2_1 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_1_2 value is out of range (0-1): " + par2_1);
						JOptionPane.showMessageDialog(null, "MigrationRate_1_2 value is out of range (0-1): " + par2_1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg2_2 = TextMultMigrationRates_Reg2_2.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_2.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg2_2.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_2_2, migration rate incorrect: " + sX_Reg2_2);
							JOptionPane.showMessageDialog(null, "MigrationRate_2_2, migration rate incorrect: " + sX_Reg2_2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par2_2 = Double.parseDouble(sX_Reg2_2);
					if ((par2_2 < 0 || par2_2 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_2_2 value is out of range (0-1): " + par2_2);
						JOptionPane.showMessageDialog(null, "MigrationRate_2_2 value is out of range (0-1): " + par2_2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				if (SampleSize == NumberOfConvDemes + 1)
					{
					; // species tree ok, no problem if mig rate = 0
					}
				else
					{
					// checking mig rates
					if (par2_1 == 0 && par2_2 == 0)
						{
						System.out.println("If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation ");
						JOptionPane.showMessageDialog(null, "If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation: ", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					}


				String sX_RegT1_2 = TextMultMigrationRatesTime_Reg1_2.getText();
				int Control_2 = 0;
				if (sX_RegT1_2.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT1_2.length(); i++) // check integer
    						{
       		 				char c = sX_RegT1_2.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			Control_2 = Control_2 + 1; // ok
        						}
							}
						}
					if (Error == 0)
						{
						if (Control_2 < 1 && Error == 0)
							{
							System.out.println("Time_1_2: Incorrect time");
							JOptionPane.showMessageDialog(null, "Time_1_2: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
							//System.exit(0);
							Error = Error + 1;
							}
						System.out.println("Time_1_2: " + sX_RegT1_2);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_1_2 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_1_2 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}	

				if (Error == 0)
					{
					ProteinEvolverABC_MigrationRate = "MigrationRate=2 " + sX_RegT1_2 + " " + sX_Reg1_2 + " " + sX_Reg2_2;
					System.out.println("ProteinEvolverABC_MigrationRate: " + ProteinEvolverABC_MigrationRate);
					}
				}

			// MigrationRate_3
			if (thisValue0 == 3)
				{
				double par3_1 = 0, par3_2 = 0, par3_3 = 0;
				String sX_Reg1_3 = TextMultMigrationRates_Reg1_3.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_3.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg1_3.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_1_3, migration rate incorrect: " + sX_Reg1_3);
							JOptionPane.showMessageDialog(null, "MigrationRate_1_3, migration rate incorrect: " + sX_Reg1_3, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par3_1 = Double.parseDouble(sX_Reg1_3);
					if ((par3_1 < 0 || par3_1 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_1_3 value is out of range (0-1): " + par3_1);
						JOptionPane.showMessageDialog(null, "MigrationRate_1_3 value is out of range (0-1): " + par3_1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg2_3 = TextMultMigrationRates_Reg2_3.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_3.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg2_3.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_2_3, migration rate incorrect: " + sX_Reg2_3);
							JOptionPane.showMessageDialog(null, "MigrationRate_2_3, migration rate incorrect: " + sX_Reg2_3, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par3_2 = Double.parseDouble(sX_Reg2_3);
					if ((par3_2 < 0 || par3_2 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_2_3 value is out of range (0-1): " + par3_2);
						JOptionPane.showMessageDialog(null, "MigrationRate_2_3 value is out of range (0-1): " + par3_2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg3_3 = TextMultMigrationRates_Reg3_3.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg3_3.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg3_3.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_3_3, migration rate incorrect: " + sX_Reg3_3);
							JOptionPane.showMessageDialog(null, "MigrationRate_3_3, migration rate incorrect: " + sX_Reg3_3, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par3_3 = Double.parseDouble(sX_Reg3_3);
					if ((par3_3 < 0 || par3_3 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_3_3 value is out of range (0-1): " + par3_3);
						JOptionPane.showMessageDialog(null, "MigrationRate_3_3 value is out of range (0-1): " + par3_3, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				if (SampleSize == NumberOfConvDemes + 1)
					{
					; // species tree ok, no problem if mig rate = 0
					}
				else
					{
					// checking mig rates
					if (par3_1 == 0 && par3_2 == 0 && par3_3 == 0)
						{
						System.out.println("If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation ");
						JOptionPane.showMessageDialog(null, "If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation: ", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					}



				int A1 = 0;
				int A2 = 0;
				String sX_RegT1_3 = TextMultMigrationRatesTime_Reg1_3.getText();
				if (sX_RegT1_3.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT1_3.length(); i++) // check integer
    						{
       		 				char c = sX_RegT1_3.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_1_3: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_1_3: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_1_3: " + sX_RegT1_3);
						A1 = Integer.parseInt(sX_RegT1_3);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_1_3 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_1_3 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}	

				String sX_RegT2_3 = TextMultMigrationRatesTime_Reg2_3.getText();
				if (sX_RegT2_3.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT2_3.length(); i++) // check integer
    						{
       		 				char c = sX_RegT2_3.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_2_3: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_2_3: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_2_3: " + sX_RegT2_3);
						A2 = Integer.parseInt(sX_RegT2_3);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_2_3 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_2_3 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
				
				if (A1 > A2)	
					{
					System.out.println("The first times must be lower, check times order");
					JOptionPane.showMessageDialog(null, "The first times must be lower, check times order", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}

				if (Error == 0)
					{
					ProteinEvolverABC_MigrationRate = "MigrationRate=3 " + sX_RegT1_3 + " " + sX_RegT2_3 + " " + sX_Reg1_3 + " " + sX_Reg2_3 + " " + sX_Reg3_3;
					System.out.println("ProteinEvolverABC_MigrationRate: " + ProteinEvolverABC_MigrationRate);
					}
				}


			// MigrationRate_4
			if (thisValue0 == 4)
				{
				double par4_1 = 0, par4_2 = 0, par4_3 = 0, par4_4 = 0;
				String sX_Reg1_4 = TextMultMigrationRates_Reg1_4.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_4.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg1_4.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_1_4, migration rate incorrect: " + sX_Reg1_4);
							JOptionPane.showMessageDialog(null, "MigrationRate_1_4, migration rate incorrect: " + sX_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par4_1 = Double.parseDouble(sX_Reg1_4);
					if ((par4_1 < 0 || par4_1 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_1_4 value is out of range (0-1): " + sX_Reg1_4);
						JOptionPane.showMessageDialog(null, "MigrationRate_1_4 value is out of range (0-1): " + sX_Reg1_4, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg2_4 = TextMultMigrationRates_Reg2_4.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_4.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg2_4.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_2_4, migration rate incorrect: " + sX_Reg2_4);
							JOptionPane.showMessageDialog(null, "MigrationRate_2_4, migration rate incorrect: " + sX_Reg2_4, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par4_2 = Double.parseDouble(sX_Reg2_4);
					if ((par4_2 < 0 || par4_2 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_2_4 value is out of range (0-1): " + par4_2);
						JOptionPane.showMessageDialog(null, "MigrationRate_2_4 value is out of range (0-1): " + par4_2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg3_4 = TextMultMigrationRates_Reg3_4.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg3_4.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg3_4.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_3_4, migration rate incorrect: " + sX_Reg3_4);
							JOptionPane.showMessageDialog(null, "MigrationRate_3_4, migration rate incorrect: " + sX_Reg3_4, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par4_3 = Double.parseDouble(sX_Reg3_4);
					if ((par4_3 < 0 || par4_3 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_3_4 value is out of range (0-1): " + par4_3);
						JOptionPane.showMessageDialog(null, "MigrationRate_3_4 value is out of range (0-1): " + par4_3, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg4_4 = TextMultMigrationRates_Reg4_4.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg4_4.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg4_4.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_4_4, migration rate incorrect: " + sX_Reg4_4);
							JOptionPane.showMessageDialog(null, "MigrationRate_4_4, migration rate incorrect: " + sX_Reg4_4, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par4_4 = Double.parseDouble(sX_Reg4_4);
					if ((par4_4 < 0 || par4_4 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_4_4 value is out of range (0-1): " + par4_4);
						JOptionPane.showMessageDialog(null, "MigrationRate_4_4 value is out of range (0-1): " + par4_4, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}


				if (SampleSize == NumberOfConvDemes + 1)
					{
					; // species tree ok, no problem if mig rate = 0
					}
				else
					{
					// checking mig rates
					if (par4_1 == 0 && par4_2 == 0 && par4_3 == 0 && par4_4 == 0)
						{
						System.out.println("If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation ");
						JOptionPane.showMessageDialog(null, "If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation: ", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					}



				int A1 = 0;
				int A2 = 0;
				int A3 = 0;
				String sX_RegT1_4 = TextMultMigrationRatesTime_Reg1_4.getText();
				if (sX_RegT1_4.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT1_4.length(); i++) // check integer
    						{
       		 				char c = sX_RegT1_4.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_1_4: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_1_4: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_1_4: " + sX_RegT1_4);
						A1 = Integer.parseInt(sX_RegT1_4);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_1_4 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_1_4 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}	

				String sX_RegT2_4 = TextMultMigrationRatesTime_Reg2_4.getText();
				if (sX_RegT2_4.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT2_4.length(); i++) // check integer
    						{
       		 				char c = sX_RegT2_4.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_2_4: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_2_4: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_2_4: " + sX_RegT2_4);
						A2 = Integer.parseInt(sX_RegT2_4);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_2_4 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_2_4 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_RegT3_4 = TextMultMigrationRatesTime_Reg3_4.getText();
				if (sX_RegT3_4.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT3_4.length(); i++) // check integer
    						{
       		 				char c = sX_RegT3_4.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_3_4: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_3_4: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_3_4: " + sX_RegT3_4);
						A3 = Integer.parseInt(sX_RegT3_4);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_3_4 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_3_4 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				if (A1 > A2 || A1 > A3 || A2 > A3)	
					{
					System.out.println("The first times must be lower, check times order");
					JOptionPane.showMessageDialog(null, "The first times must be lower, check times order", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}

				if (Error == 0)
					{
					ProteinEvolverABC_MigrationRate = "MigrationRate=4 " + sX_RegT1_4 + " " + sX_RegT2_4 + " " + sX_RegT3_4 + " " + sX_Reg1_4 + " " + sX_Reg2_4 + " " + sX_Reg3_4 + " " + sX_Reg4_4;
					System.out.println("ProteinEvolverABC_MigrationRate: " + ProteinEvolverABC_MigrationRate);
					}
				}


			// MigrationRate_5
			if (thisValue0 == 5)
				{
				double par5_1 = 0, par5_2 = 0, par5_3 = 0, par5_4 = 0, par5_5 = 0;
				String sX_Reg1_5 = TextMultMigrationRates_Reg1_5.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_5.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg1_5.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_1_5, migration rate incorrect: " + sX_Reg1_5);
							JOptionPane.showMessageDialog(null, "MigrationRate_1_5, migration rate incorrect: " + sX_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par5_1 = Double.parseDouble(sX_Reg1_5);
					if ((par5_1 < 0 || par5_1 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_1_5 value is out of range (0-1): " + sX_Reg1_5);
						JOptionPane.showMessageDialog(null, "MigrationRate_1_5 value is out of range (0-1): " + sX_Reg1_5, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg2_5 = TextMultMigrationRates_Reg2_5.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_5.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg2_5.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_2_5, migration rate incorrect: " + sX_Reg2_5);
							JOptionPane.showMessageDialog(null, "MigrationRate_2_5, migration rate incorrect: " + sX_Reg2_5, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par5_2 = Double.parseDouble(sX_Reg2_5);
					if ((par5_2 < 0 || par5_2 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_2_5 value is out of range (0-1): " + par5_2);
						JOptionPane.showMessageDialog(null, "MigrationRate_2_5 value is out of range (0-1): " + par5_2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg3_5 = TextMultMigrationRates_Reg3_5.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg3_5.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg3_5.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_3_5, migration rate incorrect: " + sX_Reg3_5);
							JOptionPane.showMessageDialog(null, "MigrationRate_3_5, migration rate incorrect: " + sX_Reg3_5, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par5_3 = Double.parseDouble(sX_Reg3_5);
					if ((par5_3 < 0 || par5_3 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_3_5 value is out of range (0-1): " + par5_3);
						JOptionPane.showMessageDialog(null, "MigrationRate_3_5 value is out of range (0-1): " + par5_3, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg4_5 = TextMultMigrationRates_Reg4_5.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg4_5.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg4_5.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_4_5, migration rate incorrect: " + sX_Reg4_5);
							JOptionPane.showMessageDialog(null, "MigrationRate_4_5, migration rate incorrect: " + sX_Reg4_5, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par5_4 = Double.parseDouble(sX_Reg4_5);
					if ((par5_4 < 0 || par5_4 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_4_5 value is out of range (0-1): " + par5_4);
						JOptionPane.showMessageDialog(null, "MigrationRate_4_5 value is out of range (0-1): " + par5_4, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg5_5 = TextMultMigrationRates_Reg5_5.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg5_5.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg5_5.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_5_5, migration rate incorrect: " + sX_Reg5_5);
							JOptionPane.showMessageDialog(null, "MigrationRate_5_5, migration rate incorrect: " + sX_Reg5_5, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par5_5 = Double.parseDouble(sX_Reg5_5);
					if ((par5_5 < 0 || par5_5 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_5_5 value is out of range (0-1): " + par5_5);
						JOptionPane.showMessageDialog(null, "MigrationRate_5_5 value is out of range (0-1): " + par5_5, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}


				if (SampleSize == NumberOfConvDemes + 1)
					{
					; // species tree ok, no problem if mig rate = 0
					}
				else
					{
					// checking mig rates
					if (par5_1 == 0 && par5_2 == 0 && par5_3 == 0 && par5_4 == 0 && par5_5 == 0)
						{
						System.out.println("If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation ");
						JOptionPane.showMessageDialog(null, "If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation: ", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					}

				int A1 = 0;
				int A2 = 0;
				int A3 = 0;
				int A4 = 0;
				String sX_RegT1_5 = TextMultMigrationRatesTime_Reg1_5.getText();
				if (sX_RegT1_5.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT1_5.length(); i++) // check integer
    						{
       		 				char c = sX_RegT1_5.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_1_5: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_1_5: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_1_5: " + sX_RegT1_5);
						A1 = Integer.parseInt(sX_RegT1_5);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_1_5 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_1_5 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}	

				String sX_RegT2_5 = TextMultMigrationRatesTime_Reg2_5.getText();
				if (sX_RegT2_5.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT2_5.length(); i++) // check integer
    						{
       		 				char c = sX_RegT2_5.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_2_5: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_2_5: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_2_5: " + sX_RegT2_5);
						A2 = Integer.parseInt(sX_RegT2_5);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_2_5 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_2_5 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_RegT3_5 = TextMultMigrationRatesTime_Reg3_5.getText();
				if (sX_RegT3_5.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT3_5.length(); i++) // check integer
    						{
       		 				char c = sX_RegT3_5.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_3_5: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_3_5: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_3_5: " + sX_RegT3_5);
						A3 = Integer.parseInt(sX_RegT3_5);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_3_5 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_3_5 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_RegT4_5 = TextMultMigrationRatesTime_Reg4_5.getText();
				if (sX_RegT4_5.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT4_5.length(); i++) // check integer
    						{
       		 				char c = sX_RegT4_5.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_4_5: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_4_5: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_4_5: " + sX_RegT4_5);
						A4 = Integer.parseInt(sX_RegT4_5);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_4_5 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_4_5 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				if (A1 > A2 || A1 > A3 || A1 > A4 || A2 > A3 || A2 > A4 || A3 > A4)	
					{
					System.out.println("The first times must be lower, check times order");
					JOptionPane.showMessageDialog(null, "The first times must be lower, check times order", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}

				if (Error == 0)
					{
					ProteinEvolverABC_MigrationRate = "MigrationRate=5 " + sX_RegT1_5 + " " + sX_RegT2_5 + " " + sX_RegT3_5 + " " + sX_RegT4_5 + " " + sX_Reg1_5 + " " + sX_Reg2_5 + " " + sX_Reg3_5 + " " + sX_Reg4_5 + " " + sX_Reg5_5;
					System.out.println("ProteinEvolverABC_MigrationRate: " + ProteinEvolverABC_MigrationRate);
					}
				}

			
/*			// MigrationRate_6
			if (thisValue0 == 6)
				{
				double par6_1 = 0, par6_2 = 0, par6_3 = 0, par6_4 = 0, par6_5 = 0, par6_6 = 0;
				String sX_Reg1_6 = TextMultMigrationRates_Reg1_6.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_6.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg1_6.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_1_6, migration rate incorrect: " + sX_Reg1_6);
							JOptionPane.showMessageDialog(null, "MigrationRate_1_6, migration rate incorrect: " + sX_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par6_1 = Double.parseDouble(sX_Reg1_6);
					if ((par6_1 < 0 || par6_1 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_1_6 value is out of range (0-1): " + sX_Reg1_6);
						JOptionPane.showMessageDialog(null, "MigrationRate_1_6 value is out of range (0-1): " + sX_Reg1_6, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg2_6 = TextMultMigrationRates_Reg2_6.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_6.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg2_6.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_2_6, migration rate incorrect: " + sX_Reg2_6);
							JOptionPane.showMessageDialog(null, "MigrationRate_2_6, migration rate incorrect: " + sX_Reg2_6, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par6_2 = Double.parseDouble(sX_Reg2_6);
					if ((par6_2 < 0 || par6_2 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_2_6 value is out of range (0-1): " + par6_2);
						JOptionPane.showMessageDialog(null, "MigrationRate_2_6 value is out of range (0-1): " + par6_2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg3_6 = TextMultMigrationRates_Reg3_6.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg3_6.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg3_6.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_3_6, migration rate incorrect: " + sX_Reg3_6);
							JOptionPane.showMessageDialog(null, "MigrationRate_3_6, migration rate incorrect: " + sX_Reg3_6, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par6_3 = Double.parseDouble(sX_Reg3_6);
					if ((par6_3 < 0 || par6_3 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_3_6 value is out of range (0-1): " + par6_3);
						JOptionPane.showMessageDialog(null, "MigrationRate_3_6 value is out of range (0-1): " + par6_3, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg4_6 = TextMultMigrationRates_Reg4_6.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg4_6.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg4_6.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_4_6, migration rate incorrect: " + sX_Reg4_6);
							JOptionPane.showMessageDialog(null, "MigrationRate_4_6, migration rate incorrect: " + sX_Reg4_6, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par6_4 = Double.parseDouble(sX_Reg4_6);
					if ((par6_4 < 0 || par6_4 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_4_6 value is out of range (0-1): " + par6_4);
						JOptionPane.showMessageDialog(null, "MigrationRate_4_6 value is out of range (0-1): " + par6_4, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg5_6 = TextMultMigrationRates_Reg5_6.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg5_6.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg5_6.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_5_6, migration rate incorrect: " + sX_Reg5_6);
							JOptionPane.showMessageDialog(null, "MigrationRate_5_6, migration rate incorrect: " + sX_Reg5_6, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par6_5 = Double.parseDouble(sX_Reg5_6);
					if ((par6_5 < 0 || par6_5 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_5_6 value is out of range (0-1): " + par6_5);
						JOptionPane.showMessageDialog(null, "MigrationRate_5_6 value is out of range (0-1): " + par6_5, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg6_6 = TextMultMigrationRates_Reg6_6.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg6_6.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg6_6.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_6_6, migration rate incorrect: " + sX_Reg6_6);
							JOptionPane.showMessageDialog(null, "MigrationRate_6_6, migration rate incorrect: " + sX_Reg6_6, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par6_6 = Double.parseDouble(sX_Reg6_6);
					if ((par6_6 < 0 || par6_6 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_6_6 value is out of range (0-1): " + par6_6);
						JOptionPane.showMessageDialog(null, "MigrationRate_6_6 value is out of range (0-1): " + par6_6, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				if (SampleSize == NumberOfConvDemes + 1)
					{
					; // species tree ok, no problem if mig rate = 0
					}
				else
					{
					// checking mig rates
					if (par6_1 == 0 && par6_2 == 0 && par6_3 == 0 && par6_4 == 0 && par6_5 == 0 && par6_6 == 0)
						{
						System.out.println("If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation ");
						JOptionPane.showMessageDialog(null, "If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation: ", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					}

				int A1 = 0;
				int A2 = 0;
				int A3 = 0;
				int A4 = 0;
				int A5 = 0;
				String sX_RegT1_6 = TextMultMigrationRatesTime_Reg1_6.getText();
				if (sX_RegT1_6.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT1_6.length(); i++) // check integer
    						{
       		 				char c = sX_RegT1_6.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_1_6: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_1_6: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_1_6: " + sX_RegT1_6);
						A1 = Integer.parseInt(sX_RegT1_6);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_1_6 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_1_6 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}	

				String sX_RegT2_6 = TextMultMigrationRatesTime_Reg2_6.getText();
				if (sX_RegT2_6.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT2_6.length(); i++) // check integer
    						{
       		 				char c = sX_RegT2_6.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_2_6: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_2_6: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_2_6: " + sX_RegT2_6);
						A2 = Integer.parseInt(sX_RegT2_6);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_2_6 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_2_6 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_RegT3_6 = TextMultMigrationRatesTime_Reg3_6.getText();
				if (sX_RegT3_6.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT3_6.length(); i++) // check integer
    						{
       		 				char c = sX_RegT3_6.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_3_6: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_3_6: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_3_6: " + sX_RegT3_6);
						A3 = Integer.parseInt(sX_RegT3_6);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_3_6 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_3_6 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_RegT4_6 = TextMultMigrationRatesTime_Reg4_6.getText();
				if (sX_RegT4_6.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT4_6.length(); i++) // check integer
    						{
       		 				char c = sX_RegT4_6.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_4_6: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_4_6: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_4_6: " + sX_RegT4_6);
						A4 = Integer.parseInt(sX_RegT4_6);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_4_6 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_4_6 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_RegT5_6 = TextMultMigrationRatesTime_Reg5_6.getText();
				if (sX_RegT5_6.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT5_6.length(); i++) // check integer
    						{
       		 				char c = sX_RegT5_6.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_5_6: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_5_6: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_5_6: " + sX_RegT5_6);
						A5 = Integer.parseInt(sX_RegT5_6);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_5_6 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_5_6 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				if (A1 > A2 || A1 > A3 || A1 > A4 || A1 > A5 || A2 > A3 || A2 > A4 || A2 > A5 || A3 > A4 || A3 > A5 || A4 > A5)	
					{
					System.out.println("The first times must be lower, check times order");
					JOptionPane.showMessageDialog(null, "The first times must be lower, check times order", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}

				if (Error == 0)
					{
					ProteinEvolverABC_MigrationRate = "MigrationRate=6 " + sX_RegT1_6 + " " + sX_RegT2_6 + " " + sX_RegT3_6 + " " + sX_RegT4_6 + " " + sX_RegT5_6 + " " + sX_Reg1_6 + " " + sX_Reg2_6 + " " + sX_Reg3_6 + " " + sX_Reg4_6 + " " + sX_Reg5_6 + " " + sX_Reg6_6;
					System.out.println("ProteinEvolverABC_MigrationRate: " + ProteinEvolverABC_MigrationRate);
					}
				}


			// MigrationRate_7
			if (thisValue0 == 7)
				{
				double par7_1 = 0, par7_2 = 0, par7_3 = 0, par7_4 = 0, par7_5 = 0, par7_6 = 0, par7_7 = 0;
				String sX_Reg1_7 = TextMultMigrationRates_Reg1_7.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg1_7.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg1_7.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_1_7, migration rate incorrect: " + sX_Reg1_7);
							JOptionPane.showMessageDialog(null, "MigrationRate_1_7, migration rate incorrect: " + sX_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par7_1 = Double.parseDouble(sX_Reg1_7);
					if ((par7_1 < 0 || par7_1 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_1_7 value is out of range (0-1): " + sX_Reg1_7);
						JOptionPane.showMessageDialog(null, "MigrationRate_1_7 value is out of range (0-1): " + sX_Reg1_7, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg2_7 = TextMultMigrationRates_Reg2_7.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg2_7.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg2_7.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_2_7, migration rate incorrect: " + sX_Reg2_7);
							JOptionPane.showMessageDialog(null, "MigrationRate_2_7, migration rate incorrect: " + sX_Reg2_7, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par7_2 = Double.parseDouble(sX_Reg2_7);
					if ((par7_2 < 0 || par7_2 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_2_7 value is out of range (0-1): " + par7_2);
						JOptionPane.showMessageDialog(null, "MigrationRate_2_7 value is out of range (0-1): " + par7_2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg3_7 = TextMultMigrationRates_Reg3_7.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg3_7.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg3_7.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_3_7, migration rate incorrect: " + sX_Reg3_7);
							JOptionPane.showMessageDialog(null, "MigrationRate_3_7, migration rate incorrect: " + sX_Reg3_7, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par7_3 = Double.parseDouble(sX_Reg3_7);
					if ((par7_3 < 0 || par7_3 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_3_7 value is out of range (0-1): " + par7_3);
						JOptionPane.showMessageDialog(null, "MigrationRate_3_7 value is out of range (0-1): " + par7_3, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg4_7 = TextMultMigrationRates_Reg4_7.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg4_7.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg4_7.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_4_7, migration rate incorrect: " + sX_Reg4_7);
							JOptionPane.showMessageDialog(null, "MigrationRate_4_7, migration rate incorrect: " + sX_Reg4_7, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par7_4 = Double.parseDouble(sX_Reg4_7);
					if ((par7_4 < 0 || par7_4 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_4_7 value is out of range (0-1): " + par7_4);
						JOptionPane.showMessageDialog(null, "MigrationRate_4_7 value is out of range (0-1): " + par7_4, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg5_7 = TextMultMigrationRates_Reg5_7.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg5_7.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg5_7.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_5_7, migration rate incorrect: " + sX_Reg5_7);
							JOptionPane.showMessageDialog(null, "MigrationRate_5_7, migration rate incorrect: " + sX_Reg5_7, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par7_5 = Double.parseDouble(sX_Reg5_7);
					if ((par7_5 < 0 || par7_5 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_5_7 value is out of range (0-1): " + par7_5);
						JOptionPane.showMessageDialog(null, "MigrationRate_5_7 value is out of range (0-1): " + par7_5, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg6_7 = TextMultMigrationRates_Reg6_7.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg6_7.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg6_7.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_6_7, migration rate incorrect: " + sX_Reg6_7);
							JOptionPane.showMessageDialog(null, "MigrationRate_6_7, migration rate incorrect: " + sX_Reg6_7, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par7_6 = Double.parseDouble(sX_Reg6_7);
					if ((par7_6 < 0 || par7_6 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_6_7 value is out of range (0-1): " + par7_6);
						JOptionPane.showMessageDialog(null, "MigrationRate_6_7 value is out of range (0-1): " + par7_6, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_Reg7_7 = TextMultMigrationRates_Reg7_7.getText();
				if (Error == 0)
					{
					for (int i=0; i < sX_Reg7_7.length(); i++) // // numbers, ., e, -
						{
						char c = sX_Reg7_7.charAt(i);
	      				if ((c >= '0' && c <= '9') || (c == '.' && i > 0) || (c == 'e' && i > 0) || (c == 'E' && i > 0) || (c == '-' && i > 0)) // ok
							{
	      					; // ok
	        				}
						else
							{
							System.out.println("MigrationRate_7_7, migration rate incorrect: " + sX_Reg7_7);
							JOptionPane.showMessageDialog(null, "MigrationRate_7_7, migration rate incorrect: " + sX_Reg7_7, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							break;
							}
						}
					
					par7_7 = Double.parseDouble(sX_Reg7_7);
					if ((par7_7 < 0 || par7_7 > 1) && (Error == 0))
						{
						System.out.println("MigrationRate_6_7 value is out of range (0-1): " + par7_7);
						JOptionPane.showMessageDialog(null, "MigrationRate_6_7 value is out of range (0-1): " + par7_7, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}


				if (SampleSize == NumberOfConvDemes + 1)
					{
					; // species tree ok, no problem if mig rate = 0
					}
				else
					{
					// checking mig rates
					if (par7_1 == 0 && par7_2 == 0 && par7_3 == 0 && par7_4 == 0 && par7_5 == 0 && par7_6 == 0)
						{
						System.out.println("If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation ");
						JOptionPane.showMessageDialog(null, "If a population/species tree is not completely defined, migration cannot be 0 (otherwise the simulation is infinite), see documentation: ", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						}
					}


				int A1 = 0;
				int A2 = 0;
				int A3 = 0;
				int A4 = 0;
				int A5 = 0;
				int A6 = 0;
				String sX_RegT1_7 = TextMultMigrationRatesTime_Reg1_7.getText();
				if (sX_RegT1_7.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT1_7.length(); i++) // check integer
    						{
       		 				char c = sX_RegT1_7.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_1_7: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_1_7: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_1_7: " + sX_RegT1_7);
						A1 = Integer.parseInt(sX_RegT1_7);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_1_7 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_1_7 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}	

				String sX_RegT2_7 = TextMultMigrationRatesTime_Reg2_7.getText();
				if (sX_RegT2_7.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT2_7.length(); i++) // check integer
    						{
       		 				char c = sX_RegT2_7.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_2_7: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_2_7: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_2_7: " + sX_RegT2_7);
						A2 = Integer.parseInt(sX_RegT2_7);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_2_7 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_2_7 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_RegT3_7 = TextMultMigrationRatesTime_Reg3_7.getText();
				if (sX_RegT3_7.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT3_7.length(); i++) // check integer
    						{
       		 				char c = sX_RegT3_7.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_3_7: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_3_7: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_3_7: " + sX_RegT3_7);
						A3 = Integer.parseInt(sX_RegT3_7);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_3_7 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_3_7 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_RegT4_7 = TextMultMigrationRatesTime_Reg4_7.getText();
				if (sX_RegT4_7.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT4_7.length(); i++) // check integer
    						{
       		 				char c = sX_RegT4_7.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_4_7: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_4_7: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_4_7: " + sX_RegT4_7);
						A4 = Integer.parseInt(sX_RegT4_7);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_4_7 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_4_7 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_RegT5_7 = TextMultMigrationRatesTime_Reg5_7.getText();
				if (sX_RegT5_7.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT5_7.length(); i++) // check integer
    						{
       		 				char c = sX_RegT5_7.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_5_7: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_5_7: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_5_7: " + sX_RegT5_7);
						A5 = Integer.parseInt(sX_RegT5_7);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_5_7 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_5_7 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}

				String sX_RegT6_7 = TextMultMigrationRatesTime_Reg6_7.getText();
				if (sX_RegT6_7.trim().length() != 0) 
					{
					if (Error == 0)
						{
						for (int i=0; i < sX_RegT6_7.length(); i++) // check integer
    						{
       		 				char c = sX_RegT6_7.charAt(i);
      			  			if (c >= '0' && c <= '9')
       	 						{
      			   	   			; // ok
        						}
							else
								{
								System.out.println("Time_6_7: Incorrect time");
								JOptionPane.showMessageDialog(null, "Time_6_7: Incorrect time", " ", JOptionPane. INFORMATION_MESSAGE);
								//System.exit(0);
								Error = Error + 1;
								}
							}
						}
					if (Error == 0)
						{
						System.out.println("Time_6_7: " + sX_RegT6_7);
						A6 = Integer.parseInt(sX_RegT6_7);
						}
        			} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Time_6_7 must be introduced");
						JOptionPane.showMessageDialog(null, "Time_6_7 must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
		
				if (A1 > A2 || A1 > A3 || A1 > A4 || A1 > A5 || A1 > A6 || A2 > A3 || A2 > A4 || A2 > A5 || A2 > A6 || A3 > A4 || A3 > A5 || A3 > A6 || A4 > A5 || A4 > A6 || A5 > A6)	
					{
					System.out.println("The first times must be lower, check times order");
					JOptionPane.showMessageDialog(null, "The first times must be lower, check times order", " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}

				if (Error == 0)
					{
					ProteinEvolverABC_MigrationRate = "MigrationRate=7 " + sX_RegT1_7 + " " + sX_RegT2_7 + " " + sX_RegT3_7 + " " + sX_RegT4_7 + " " + sX_RegT5_7 + " " + sX_RegT6_7 + " " + sX_Reg1_7 + " " + sX_Reg2_7 + " " + sX_Reg3_7 + " " + sX_Reg4_7 + " " + sX_Reg5_7 + " " + sX_Reg6_7 + " " + sX_Reg7_7;
					System.out.println("ProteinEvolverABC_MigrationRate: " + ProteinEvolverABC_MigrationRate);
					}
				}
*/


			//System.out.println("SavedMultMigrationRates: " + SavedMultMigrationRates);
			if (Error == 0)
				{
				label4eeeSD.setText("Migration rates were saved");
				label4eeeSD.setVisible(true); // migration rates saved 
				SavedMultMigrationRates = 1;
				
				MultMigrationRatesWindow.setVisible(false);
				MultMigrationRatesWindow.dispose();
				}
			}
		}



	// RunButton5 - Regions
    class runButton5Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;

			
			}
    	}


	// RunButton6 - Nucleotide substitution model
    class runButton6Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;

			
			}
		}




	
	// RunButton7 - substitution model I
    class runButton7Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;


			/*** Substitution rate ***/
				String s4x = TextSubstitutionRateProteinEvolverABC.getText();
				if (s4x.trim().length() != 0) 
					{
					/*if (Error == 0)
						{
						for (int i=0; i < s4x.length(); i++) // // numbers all; fix, unif, norm(t), exp(t), gamma(t), beta(t)
    						{
        					char c = s4x.charAt(i);
      				  		if (s4x.length() > 4 && ((c >= '0' && c <= '9' && i > 3) || (c == '.' && i > 4) || (c == ' ' && i > 2) || (c == 't' && i > 4) || (c == 'e' && i > 4) || (c == '-' && i > 4) || (i == 0 && (c == 'f' || c == 'u' || c == 'n' || c == 'e' || c == 'g' || c == 'b'))  || (i == 1 && (c == 'i' || c == 'n' || c == 'o' || c == 'x' || c == 'a' || c == 'e')) || (i == 2 && (c == 'x' || c == 'i' || c == 'r' || c == 'p' || c == 'm' || c == 't')) || (i == 3 && (c == ' ' || c == 'f' || c == 'm' || c == 'a')) || (i == 4 && c == 'a'))) // fix, unif, norm(t), exp(t), gamma(t), beta(t) 
								{
      				    		; // ok
        						}
							else
								{
								if (Error == 0)
									{
									System.out.println("Substitution rate is incorrect: " + s4x);
									JOptionPane.showMessageDialog(null, "Substitution rate is incorrect: " + s4x, " ", JOptionPane. INFORMATION_MESSAGE);
									// System.exit(0);
									Error = Error + 1;
									}
								}
							}
						}*/
					if (Error == 0)
						{
						CoalSubsRate = "*SubstitutionRate=" + s4x;
						System.out.println("Substitution rate: " + CoalSubsRate);
						}
	        		} 
				else
					{
					if (Error == 0)
						{
						System.out.println("Substitution rate must be introduced (e.g., fix 1.0e-6) (e.g., gamma 1.5e-6 1.0e-5)");
						JOptionPane.showMessageDialog(null, "Substitution rate must be introduced (e.g., fix 1.0e-6) (e.g., gamma 1.5e-6 1.0e-5)", " ", JOptionPane. INFORMATION_MESSAGE);
						//System.exit(0);
						Error = Error + 1;
						}
					}


			/*** Subs rate ***/
			String s5_d = TextProteinSubstitutionModel.getText();
			if (s5_d.trim().length() != 0) 
				{
				/*if (Error == 0)
					{
					for (int i=0; i < s5_d.length(); i++) // // numbers all; fix, unif, norm(t), exp(t), gamma(t), beta(t)
    					{
        				char c = s5_d.charAt(i);
      				  	if (s5_d.length() > 4 && ((c >= '0' && c <= '9' && i > 3) || (c == '.' && i > 4) || (c == ' ' && i > 2) || (c == 't' && i > 4) || (c == 'e' && i > 4) || (c == '-' && i > 4) || (i == 0 && (c == 'f' || c == 'u' || c == 'n' || c == 'e' || c == 'g' || c == 'b'))  || (i == 1 && (c == 'i' || c == 'n' || c == 'o' || c == 'x' || c == 'a' || c == 'e')) || (i == 2 && (c == 'x' || c == 'i' || c == 'r' || c == 'p' || c == 'm' || c == 't')) || (i == 3 && (c == ' ' || c == 'f' || c == 'm' || c == 'a')) || (i == 4 && c == 'a'))) // fix, unif, norm(t), exp(t), gamma(t), beta(t) 
							{
      				    	; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("dN/dS (M0) is incorrect: " + s5_d);
								JOptionPane.showMessageDialog(null, "dN/dS (M0) is incorrect: " + s5_d, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}*/
				if (Error == 0)
					{
					ProteinSubstitutionModel_Str = "*SubstitutionModel=" + s5_d;
					System.out.println("SubstitutionModel: " + ProteinSubstitutionModel_Str);
					}
        		} 
			else
				{
				if (Error == 0)
					{
					System.out.println("Substitution model must be introduced" );
					JOptionPane.showMessageDialog(null, "Substitution model must be introduced", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}
				}



			/*** Amino acid frequencies ProteinEvolverABC ***/
			if (ProteinEvolverABCTypeOfAAFreqs == "Yes") 	
				{
				System.out.println("Amino acid frequencies (normal), ProteinEvolverABCNormalAAFreqs: " + ProteinEvolverABCNormalAAFreqs);
				}	 
			else
				{
				System.out.println("Do not amino acid frequencies (normal), ProteinEvolverABCNormalAAFreqs: " + ProteinEvolverABCNormalAAFreqs);
				}
    	    	 

			/*** AA +I ProteinEvolverABC ***/
			String s8 = TextAA_I_ProteinEvolverABC.getText();
			if (s8.trim().length() != 0) 
				{
				/*if (Error == 0)
					{
					for (int i=0; i < s8.length(); i++) // // numbers all; fix, unif, norm(t), exp(t), gamma(t), beta(t)
    					{
        				char c = s8.charAt(i);
      				  	if (s8.length() > 4 && ((c >= '0' && c <= '9' && i > 3) || (c == '.' && i > 4) || (c == ' ' && i > 2) || (c == 't' && i > 4) || (c == 'e' && i > 4) || (c == '-' && i > 4) || (i == 0 && (c == 'f' || c == 'u' || c == 'n' || c == 'e' || c == 'g' || c == 'b'))  || (i == 1 && (c == 'i' || c == 'n' || c == 'o' || c == 'x' || c == 'a' || c == 'e')) || (i == 2 && (c == 'x' || c == 'i' || c == 'r' || c == 'p' || c == 'm' || c == 't')) || (i == 3 && (c == ' ' || c == 'f' || c == 'm' || c == 'a')) || (i == 4 && c == 'a'))) // fix, unif, norm(t), exp(t), gamma(t), beta(t) 
							{
      			    		; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("+I is incorrect: " + s8);
								JOptionPane.showMessageDialog(null, "+I is incorrect: " + s8, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}*/
				if (Error == 0)
					{
					ProteinEvolverABC_AA_I = "PropInvSites=" + s8;
					System.out.println("+I: " + ProteinEvolverABC_AA_I);
					}
	        	} 
			else
				{
				System.out.println("Do not +I: " + ProteinEvolverABC_AA_I);
				}

			
			/*** AA +Gsites ProteinEvolverABC ***/
			String s7 = TextAA_Gsites_ProteinEvolverABC.getText();
			if (s7.trim().length() != 0) 
				{
				/*if (Error == 0)
					{
					for (int i=0; i < s7.length(); i++) // // numbers all; fix, unif, norm(t), exp(t), gamma(t), beta(t)
    					{
        				char c = s7.charAt(i);
      				  	if (s7.length() > 4 && ((c >= '0' && c <= '9' && i > 3) || (c == '.' && i > 4) || (c == ' ' && i > 2) || (c == 't' && i > 4) || (c == 'e' && i > 4) || (c == '-' && i > 4) || (i == 0 && (c == 'f' || c == 'u' || c == 'n' || c == 'e' || c == 'g' || c == 'b'))  || (i == 1 && (c == 'i' || c == 'n' || c == 'o' || c == 'x' || c == 'a' || c == 'e')) || (i == 2 && (c == 'x' || c == 'i' || c == 'r' || c == 'p' || c == 'm' || c == 't')) || (i == 3 && (c == ' ' || c == 'f' || c == 'm' || c == 'a')) || (i == 4 && c == 'a'))) // fix, unif, norm(t), exp(t), gamma(t), beta(t) 
							{
      			    		; // ok
        					}
						else
							{
							if (Error == 0)
								{
								System.out.println("+G sites is incorrect: " + s7);
								JOptionPane.showMessageDialog(null, "+G sites is incorrect: " + s7, " ", JOptionPane. INFORMATION_MESSAGE);
								// System.exit(0);
								Error = Error + 1;
								}
							}
						}
					}*/
				if (Error == 0)
					{
					ProteinEvolverABC_AA_Gamongsites = "RateHetSites=" + s7;
					System.out.println("+G: " + ProteinEvolverABC_AA_Gamongsites);
					}
	        	} 
			else
				{
				System.out.println("Do not +G: " + ProteinEvolverABC_AA_Gamongsites);
				}

			

			/*** Next tab ***/
			if (Error == 0)
				{
				tabbedPane.remove(scroll8);
				tabbedPane.remove(scroll9);
				tabbedPane.remove(scroll10);
				tabbedPane.remove(scroll11);
				tabbedPane.remove(scroll12);
				tabbedPane.remove(scroll13);
				tabbedPane.remove(scroll14);
				tabbedPane.remove(scroll15);
				tabbedPane.remove(scroll16);
				tabbedPane.remove(scroll17);
				tabbedPane.remove(scroll18);
				tabbedPane.remove(scroll19);
				tabbedPane.remove(scroll20);
				tabbedPane.remove(scroll21);
				tabbedPane.remove(scroll22);
				tabbedPane.remove(scroll23);
				tabbedPane.remove(scroll24);
				tabbedPane.remove(scroll25);
				tabbedPane.remove(scroll26);
				tabbedPane.remove(scroll27);
				tabbedPane.remove(scroll28);
				tabbedPane.remove(scroll29);
				tabbedPane.remove(scroll30);
				tabbedPane.remove(scroll31);
				tabbedPane.remove(scroll32);
				tabbedPane.remove(scroll33);
				tabbedPane.remove(scroll34);
				tabbedPane.remove(scroll35);
                tabbedPane.remove(scroll40);
                tabbedPane.remove(scroll41);
                tabbedPane.remove(scroll42);

				createPage15();
				tabbedPane.addTab( "ABC Settings", scroll15);
				scroll15.setVisible(true);
				//tabbedPane.remove(scroll7);
				tabbedPane.setSelectedComponent(scroll15); //go to that tab
				}
			else
				{
				if (Error == 0)
					{
					System.out.println("Settings in substitution model are incorrect ");
					JOptionPane.showMessageDialog(null, "Settings in substitution model are incorrect ", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}
				}

			}
		}



	// runButtonAA_normal_Freqs_ProteinEvolverABCSaveNextHandler button
	public class runButtonAA_normal_Freqs_ProteinEvolverABCSaveNextHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			Error = 0;
			//label7e.setVisible(false); /* CAT saved */
            // A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V

			ProteinEvolverABCNormalAAFreqs = "#AminoacidFrequencies=fix 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05";
			
			String seletedKindOf_Here_1 = (String) ProteinEvolverABCTypeOfAAFreqs_FixDir1_.getSelectedItem();
			System.out.println("seletedKindOf_Here_1: " + seletedKindOf_Here_1);

			/*** AA A ***/
			String s1 = TextAAFreqsProteinEvolverABC_1A.getText();
			if (s1.trim().length() != 0) 
				{
				if (Error == 0)
					{
					double parValue_A = 0.0;
					parValue_A = Double.parseDouble(s1);
					if ((parValue_A > 1000000000 || parValue_A < 0 || (parValue_A > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
						{
						System.out.println("The value (A) is out of range: " + s1);
						JOptionPane.showMessageDialog(null, "The value (A) is out of range: " + s1, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
        		} 

			/*** AA R ***/
			String s2 = TextAAFreqsProteinEvolverABC_1R.getText();
			if (s2.trim().length() != 0) 
				{
				if (Error == 0)
					{
					double parValue_C = 0.0;
					parValue_C = Double.parseDouble(s2);
					if ((parValue_C > 1000000000 || parValue_C < 0 || (parValue_C > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
						{
						System.out.println("The value (R) is out of range: " + s2);
						JOptionPane.showMessageDialog(null, "The value (R) is out of range: " + s2, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
        		} 

			/*** AA N ***/
			String s3 = TextAAFreqsProteinEvolverABC_1N.getText();
			if (s3.trim().length() != 0) 
				{
				if (Error == 0)
					{
					double parValue_G = 0.0;
					parValue_G = Double.parseDouble(s3);
					if ((parValue_G > 1000000000 || parValue_G < 0 || (parValue_G > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
						{
						System.out.println("The value (N) is out of range: " + s3);
						JOptionPane.showMessageDialog(null, "The value (N) is out of range: " + s3, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
        		} 
						
			/*** AA D ***/
			String s4 = TextAAFreqsProteinEvolverABC_1D.getText();
			if (s4.trim().length() != 0) 
				{
				if (Error == 0)
					{
					double parValue_T = 0.0;
					parValue_T = Double.parseDouble(s4);
					if ((parValue_T > 1000000000 || parValue_T < 0 || (parValue_T > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
						{
						System.out.println("The value (D) is out of range: " + s4);
						JOptionPane.showMessageDialog(null, "The value (D) is out of range: " + s4, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
        		} 

			/*** AA C ***/
			String s11 = TextAAFreqsProteinEvolverABC_1C.getText();
			if (s11.trim().length() != 0) 
				{
				if (Error == 0)
					{
					double parValue_A = 0.0;
					parValue_A = Double.parseDouble(s11);
					if ((parValue_A > 1000000000 || parValue_A < 0 || (parValue_A > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
						{
						System.out.println("The value (C) is out of range: " + s11);
						JOptionPane.showMessageDialog(null, "The value (C) is out of range: " + s11, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
        		} 

			/*** AA Q ***/
			String s12 = TextAAFreqsProteinEvolverABC_1Q.getText();
			if (s12.trim().length() != 0) 
				{
				if (Error == 0)
					{
					double parValue_C = 0.0;
					parValue_C = Double.parseDouble(s12);
					if ((parValue_C > 1000000000 || parValue_C < 0 || (parValue_C > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
						{
						System.out.println("The value (Q) is out of range: " + s12);
						JOptionPane.showMessageDialog(null, "The value (Q) is out of range: " + s12, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
        		} 

			/*** AA E ***/
			String s13 = TextAAFreqsProteinEvolverABC_1E.getText();
			if (s13.trim().length() != 0) 
				{
				if (Error == 0)
					{
					double parValue_G = 0.0;
					parValue_G = Double.parseDouble(s13);
					if ((parValue_G > 1000000000 || parValue_G < 0 || (parValue_G > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
						{
						System.out.println("The value (E) is out of range: " + s13);
						JOptionPane.showMessageDialog(null, "The value (E) is out of range: " + s13, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
        		} 
						
			/*** AA G ***/
			String s14 = TextAAFreqsProteinEvolverABC_1G.getText();
			if (s14.trim().length() != 0) 
				{
				if (Error == 0)
					{
					double parValue_T = 0.0;
					parValue_T = Double.parseDouble(s14);
					if ((parValue_T > 1000000000 || parValue_T < 0 || (parValue_T > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
						{
						System.out.println("The value (G) is out of range: " + s14);
						JOptionPane.showMessageDialog(null, "The value (G) is out of range: " + s14, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
        		} 

			/*** AA H ***/
			String s21 = TextAAFreqsProteinEvolverABC_1H.getText();
			if (s21.trim().length() != 0) 
				{
				if (Error == 0)
					{
					double parValue_A = 0.0;
					parValue_A = Double.parseDouble(s21);
					if ((parValue_A > 1000000000 || parValue_A < 0 || (parValue_A > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
						{
						System.out.println("The value (H) is out of range: " + s21);
						JOptionPane.showMessageDialog(null, "The value (H) is out of range: " + s21, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
        		} 

			/*** AA I ***/
			String s22 = TextAAFreqsProteinEvolverABC_1I.getText();
			if (s22.trim().length() != 0) 
				{
				if (Error == 0)
					{
					double parValue_C = 0.0;
					parValue_C = Double.parseDouble(s22);
					if ((parValue_C > 1000000000 || parValue_C < 0 || (parValue_C > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
						{
						System.out.println("The value (I) is out of range: " + s22);
						JOptionPane.showMessageDialog(null, "The value (I) is out of range: " + s22, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
        		} 

			/*** AA L ***/
			String s23 = TextAAFreqsProteinEvolverABC_1L.getText();
			if (s23.trim().length() != 0) 
				{
				if (Error == 0)
					{
					double parValue_G = 0.0;
					parValue_G = Double.parseDouble(s23);
					if ((parValue_G > 1000000000 || parValue_G < 0 || (parValue_G > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
						{
						System.out.println("The value (L) is out of range: " + s23);
						JOptionPane.showMessageDialog(null, "The value (L) is out of range: " + s23, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
        		} 
						
			/*** AA K ***/
			String s24 = TextAAFreqsProteinEvolverABC_1K.getText();
			if (s24.trim().length() != 0) 
				{
				if (Error == 0)
					{
					double parValue_T = 0.0;
					parValue_T = Double.parseDouble(s24);
					if ((parValue_T > 1000000000 || parValue_T < 0 || (parValue_T > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
						{
						System.out.println("The value (K) is out of range: " + s24);
						JOptionPane.showMessageDialog(null, "The value (K) is out of range: " + s24, " ", JOptionPane. INFORMATION_MESSAGE);
						Error = Error + 1;
						//System.exit(0);
						}
					}
        		}
                
            /*** AA M ***/
            String s25 = TextAAFreqsProteinEvolverABC_1M.getText();
            if (s25.trim().length() != 0)
                {
                if (Error == 0)
                    {
                    double parValue_TT = 0.0;
                    parValue_TT = Double.parseDouble(s25);
                    if ((parValue_TT > 1000000000 || parValue_TT < 0 || (parValue_TT > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
                        {
                        System.out.println("The value (M) is out of range: " + s25);
                        JOptionPane.showMessageDialog(null, "The value (M) is out of range: " + s25, " ", JOptionPane. INFORMATION_MESSAGE);
                        Error = Error + 1;
                        //System.exit(0);
                        }
                    }
                }
                
            /*** AA F ***/
            String s26 = TextAAFreqsProteinEvolverABC_1F.getText();
            if (s26.trim().length() != 0)
                {
                if (Error == 0)
                    {
                    double parValue_TTT = 0.0;
                    parValue_TTT = Double.parseDouble(s26);
                    if ((parValue_TTT > 1000000000 || parValue_TTT < 0 || (parValue_TTT > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
                        {
                        System.out.println("The value (F) is out of range: " + s26);
                        JOptionPane.showMessageDialog(null, "The value (F) is out of range: " + s26, " ", JOptionPane. INFORMATION_MESSAGE);
                        Error = Error + 1;
                        //System.exit(0);
                        }
                    }
                }
                
            /*** AA P ***/
            String s27 = TextAAFreqsProteinEvolverABC_1P.getText();
            if (s27.trim().length() != 0)
                {
                if (Error == 0)
                    {
                    double parValue_TTTT = 0.0;
                    parValue_TTTT = Double.parseDouble(s27);
                    if ((parValue_TTTT > 1000000000 || parValue_TTTT < 0 || (parValue_TTTT > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
                        {
                        System.out.println("The value (P) is out of range: " + s27);
                        JOptionPane.showMessageDialog(null, "The value (P) is out of range: " + s27, " ", JOptionPane. INFORMATION_MESSAGE);
                        Error = Error + 1;
                        //System.exit(0);
                        }
                    }
                }
                
            /*** AA S ***/
            String s28 = TextAAFreqsProteinEvolverABC_1S.getText();
            if (s28.trim().length() != 0)
                {
                if (Error == 0)
                    {
                    double parValue_XX = 0.0;
                    parValue_XX = Double.parseDouble(s28);
                    if ((parValue_XX > 1000000000 || parValue_XX < 0 || (parValue_XX > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
                        {
                        System.out.println("The value (S) is out of range: " + s28);
                        JOptionPane.showMessageDialog(null, "The value (S) is out of range: " + s28, " ", JOptionPane. INFORMATION_MESSAGE);
                        Error = Error + 1;
                        //System.exit(0);
                        }
                    }
                }
                
            /*** AA T ***/
            String s29 = TextAAFreqsProteinEvolverABC_1T.getText();
            if (s29.trim().length() != 0)
                {
                if (Error == 0)
                    {
                    double parValue_XXX = 0.0;
                    parValue_XXX = Double.parseDouble(s29);
                    if ((parValue_XXX > 1000000000 || parValue_XXX < 0 || (parValue_XXX > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
                        {
                        System.out.println("The value (T) is out of range: " + s29);
                        JOptionPane.showMessageDialog(null, "The value (T) is out of range: " + s29, " ", JOptionPane. INFORMATION_MESSAGE);
                        Error = Error + 1;
                        //System.exit(0);
                        }
                    }
                }

            /*** AA W ***/
            String s30 = TextAAFreqsProteinEvolverABC_1W.getText();
            if (s30.trim().length() != 0)
                {
                if (Error == 0)
                    {
                    double parValue_FF = 0.0;
                    parValue_FF = Double.parseDouble(s30);
                    if ((parValue_FF > 1000000000 || parValue_FF < 0 || (parValue_FF > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
                        {
                        System.out.println("The value (W) is out of range: " + s30);
                        JOptionPane.showMessageDialog(null, "The value (W) is out of range: " + s30, " ", JOptionPane. INFORMATION_MESSAGE);
                        Error = Error + 1;
                        //System.exit(0);
                        }
                    }
                }
                
            /*** AA Y ***/
            String s31 = TextAAFreqsProteinEvolverABC_1Y.getText();
            if (s31.trim().length() != 0)
                {
                if (Error == 0)
                    {
                    double parValue_FFF = 0.0;
                    parValue_FFF = Double.parseDouble(s31);
                    if ((parValue_FFF > 1000000000 || parValue_FFF < 0 || (parValue_FFF > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
                        {
                        System.out.println("The value (Y) is out of range: " + s31);
                        JOptionPane.showMessageDialog(null, "The value (Y) is out of range: " + s31, " ", JOptionPane. INFORMATION_MESSAGE);
                        Error = Error + 1;
                        //System.exit(0);
                        }
                    }
                }
                
            /*** AA V ***/
            String s32 = TextAAFreqsProteinEvolverABC_1V.getText();
            if (s32.trim().length() != 0)
                {
                if (Error == 0)
                    {
                    double parValue_FFG = 0.0;
                    parValue_FFG = Double.parseDouble(s32);
                    if ((parValue_FFG > 1000000000 || parValue_FFG < 0 || (parValue_FFG > 1 && seletedKindOf_Here_1 == "fix")) && (Error == 0))
                        {
                        System.out.println("The value (V) is out of range: " + s32);
                        JOptionPane.showMessageDialog(null, "The value (V) is out of range: " + s32, " ", JOptionPane. INFORMATION_MESSAGE);
                        Error = Error + 1;
                        //System.exit(0);
                        }
                    }
                }


			if (Error == 0)
				{
				String ResultsHere1 = "";
				if (seletedKindOf_Here_1 == "fix")
					{
					ResultsHere1 = "fix " + s1 + " " + s2 + " " + s3 + " " + s4 + " " + s11 + " " + s12 + " " + s13 + " " + s14 + " " + s21 + " " + s22 + " " + s23 + " " + s24 + " " + s25 + " " + s26 + " " + s27 + " " + s28 + " " + s29 + " " + s30 + " " + s31 + " " + s32;
					}
				else
					{
					ResultsHere1 = "dirichlet " + s1 + " " + s2 + " " + s3 + " " + s4 + " " + s11 + " " + s12 + " " + s13 + " " + s14 + " " + s21 + " " + s22 + " " + s23 + " " + s24 + " " + s25 + " " + s26 + " " + s27 + " " + s28 + " " + s29 + " " + s30 + " " + s31 + " " + s32;
					}
				

				String LocalDist = ResultsHere1;
				TextAAFreqsNormalProteinEvolverABC.setText(LocalDist); 
				ProteinEvolverABCNormalAAFreqs = "AminoacidFrequencies=" + ResultsHere1;

				AA_normal_Freqs_ProteinEvolverABCWindow.setVisible(false);
				AA_normal_Freqs_ProteinEvolverABCWindow.dispose();
				ProteinEvolverABCTypeOfAAFreqs = "Yes";
				System.out.println("ProteinEvolverABCNormalAAFreqs: " + ProteinEvolverABCNormalAAFreqs);
				TextAAFreqsNormalProteinEvolverABC.setVisible(true);
				}

			}
		}
	
	
	// runButtonAA_normal_Freqs_ProteinEvolverABCSaveNextHandler button
	public class runButtonAA_normal_Freqs_ProteinEvolverABCExitHandler implements ActionListener
		{
		public void actionPerformed(ActionEvent e)
			{
			ProteinEvolverABCNormalAAFreqs = "#AminoacidFrequencies=fix 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05";
			System.out.println("ProteinEvolverABCNormalAAFreqs: " + ProteinEvolverABCNormalAAFreqs);

			AA_normal_Freqs_ProteinEvolverABCWindow.setVisible(false);
			AA_normal_Freqs_ProteinEvolverABCWindow.dispose();
			TextAAFreqsNormalProteinEvolverABC.setVisible(false);
			TextAAFreqsNormalProteinEvolverABC.setText("");
			ProteinEvolverABCTypeOfAAFreqs_NO.setSelected(true);
			ProteinEvolverABCTypeOfAAFreqs = "No";
			}
		}


	


	// RunButton8 - sequence Protein - (I)
    class runButton8Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;

			

			/*** Next tab ***/
			if (Error == 0)
				{
				tabbedPane.remove(scroll9);
				tabbedPane.remove(scroll10);
				tabbedPane.remove(scroll11);
				tabbedPane.remove(scroll12);
				tabbedPane.remove(scroll13);
				tabbedPane.remove(scroll14);
				tabbedPane.remove(scroll15);
				tabbedPane.remove(scroll16);
				tabbedPane.remove(scroll17);
				tabbedPane.remove(scroll18);
				tabbedPane.remove(scroll19);
				tabbedPane.remove(scroll20);
				tabbedPane.remove(scroll21);
				tabbedPane.remove(scroll22);
				tabbedPane.remove(scroll23);
				tabbedPane.remove(scroll24);
				tabbedPane.remove(scroll25);
				tabbedPane.remove(scroll26);
				tabbedPane.remove(scroll27);
				tabbedPane.remove(scroll28);
				tabbedPane.remove(scroll29);
				tabbedPane.remove(scroll30);
				tabbedPane.remove(scroll31);
				tabbedPane.remove(scroll32);
				tabbedPane.remove(scroll33);
				tabbedPane.remove(scroll34);
				tabbedPane.remove(scroll35);
                tabbedPane.remove(scroll40);
                tabbedPane.remove(scroll41);
                tabbedPane.remove(scroll42);
								
				}

				if (Error == 0) // go to: sequence
					{
					createPage11();
					tabbedPane.addTab( "model", scroll11);
					scroll11.setVisible(true);
					tabbedPane.remove(scroll8);
					tabbedPane.setSelectedComponent(scroll11); //go to that tab				
					}
				else 
					{
					if (Error == 0)
						{
						System.out.println("Settings in substitution model are incorrect (end)");
						JOptionPane.showMessageDialog(null, "Settings in substitution model are incorrect (end)", " ", JOptionPane. INFORMATION_MESSAGE);
						// System.exit(0);
						Error = Error + 1;
						}
					}
				

			}
		}	
	


	// RunButton9 - sequence (II)
    class runButton9Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;

			

			/*** Next tab ***/
			if (Error == 0) 
				{
				tabbedPane.remove(scroll10);
				tabbedPane.remove(scroll11);
				tabbedPane.remove(scroll12);
				tabbedPane.remove(scroll13);
				tabbedPane.remove(scroll14);
				tabbedPane.remove(scroll15);
				tabbedPane.remove(scroll16);
				tabbedPane.remove(scroll17);
				tabbedPane.remove(scroll18);
				tabbedPane.remove(scroll19);
				tabbedPane.remove(scroll20);
				tabbedPane.remove(scroll21);
				tabbedPane.remove(scroll22);
				tabbedPane.remove(scroll23);
				tabbedPane.remove(scroll24);
				tabbedPane.remove(scroll25);
				tabbedPane.remove(scroll26);
				tabbedPane.remove(scroll27);
				tabbedPane.remove(scroll28);
				tabbedPane.remove(scroll29);
				tabbedPane.remove(scroll30);
				tabbedPane.remove(scroll31);
				tabbedPane.remove(scroll32);
				tabbedPane.remove(scroll33);
				tabbedPane.remove(scroll34);
				tabbedPane.remove(scroll35);
                tabbedPane.remove(scroll40);
                tabbedPane.remove(scroll41);
                tabbedPane.remove(scroll42);
				
				if (Error == 0) // go to: sequence
					{
					createPage11();
					tabbedPane.addTab( "model", scroll11);
					scroll11.setVisible(true);
					tabbedPane.remove(scroll9);
					tabbedPane.setSelectedComponent(scroll11); //go to that tab				
					}
				else 
					{
					if (Error == 0)
						{
						System.out.println("Settings in substitution model are incorrect (end)");
						JOptionPane.showMessageDialog(null, "Settings in substitution model are incorrect (end)", " ", JOptionPane. INFORMATION_MESSAGE);
						// System.exit(0);
						Error = Error + 1;
						}
					}
				

				}

			}
		}


	
	// RunButton11 - sequence
    class runButton11Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;

			
			/*** Next tab ***/
			if (Error == 0)
				{
				tabbedPane.remove(scroll12);
				tabbedPane.remove(scroll13);
				tabbedPane.remove(scroll14);
				tabbedPane.remove(scroll15);
				tabbedPane.remove(scroll16);
				tabbedPane.remove(scroll17);
				tabbedPane.remove(scroll18);
				tabbedPane.remove(scroll19);
				tabbedPane.remove(scroll20);
				tabbedPane.remove(scroll21);
				tabbedPane.remove(scroll22);
				tabbedPane.remove(scroll23);
				tabbedPane.remove(scroll24);
				tabbedPane.remove(scroll25);
				tabbedPane.remove(scroll26);
				tabbedPane.remove(scroll27);
				tabbedPane.remove(scroll28);
				tabbedPane.remove(scroll29);
				tabbedPane.remove(scroll30);
				tabbedPane.remove(scroll31);
				tabbedPane.remove(scroll32);
				tabbedPane.remove(scroll33);
				tabbedPane.remove(scroll34);
				tabbedPane.remove(scroll35);
                tabbedPane.remove(scroll40);
                tabbedPane.remove(scroll41);
                tabbedPane.remove(scroll42);
				}
			
			if (Error == 0) // finished
				{
				createPage35();
				tabbedPane.addTab( "Make File", scroll35);
				scroll35.setVisible(true);
				tabbedPane.remove(scroll11);
				tabbedPane.setSelectedComponent(scroll35); //go to that tab
				}
			else 
				{
				if (Error == 0)
					{
					System.out.println("Settings in substitution model are incorrect (end2)");
					JOptionPane.showMessageDialog(null, "Settings in substitution model are incorrect (end2)", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}
				}
			}
		}	
	


	// RunButton12 - sequence
    class runButton12Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;

			

			/*** Next tab ***/
			if (Error == 0)
				{
				tabbedPane.remove(scroll13);
				tabbedPane.remove(scroll14);
				tabbedPane.remove(scroll15);
				tabbedPane.remove(scroll16);
				tabbedPane.remove(scroll17);
				tabbedPane.remove(scroll18);
				tabbedPane.remove(scroll19);
				tabbedPane.remove(scroll20);
				tabbedPane.remove(scroll21);
				tabbedPane.remove(scroll22);
				tabbedPane.remove(scroll23);
				tabbedPane.remove(scroll24);
				tabbedPane.remove(scroll25);
				tabbedPane.remove(scroll26);
				tabbedPane.remove(scroll27);
				tabbedPane.remove(scroll28);
				tabbedPane.remove(scroll29);
				tabbedPane.remove(scroll30);
				tabbedPane.remove(scroll31);
				tabbedPane.remove(scroll32);
				tabbedPane.remove(scroll33);
				tabbedPane.remove(scroll34);
				tabbedPane.remove(scroll35);
				tabbedPane.remove(scroll40);
                tabbedPane.remove(scroll41);
                tabbedPane.remove(scroll42);
				}
			
			if (Error == 0) // finished
				{
				createPage35();
				tabbedPane.addTab( "Make File", scroll35);
				scroll35.setVisible(true);
				tabbedPane.remove(scroll12);
				tabbedPane.setSelectedComponent(scroll35); //go to that tab
				}
			else 
				{
				if (Error == 0)
					{
					System.out.println("Settings in substitution model are incorrect (end3)");
					JOptionPane.showMessageDialog(null, "Settings in substitution model are incorrect (end3)", " ", JOptionPane. INFORMATION_MESSAGE);
					// System.exit(0);
					Error = Error + 1;
					}
				}


			}
		}	
	



	// RunButton13 - sequence DNA - ECM
    class runButton13Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;

			
			if (Error == 0) // finished
				{
				tabbedPane.remove(scroll14);
				tabbedPane.remove(scroll15);
				tabbedPane.remove(scroll16);
				tabbedPane.remove(scroll17);
				tabbedPane.remove(scroll18);
				tabbedPane.remove(scroll19);
				tabbedPane.remove(scroll20);
				tabbedPane.remove(scroll21);
				tabbedPane.remove(scroll22);
				tabbedPane.remove(scroll23);
				tabbedPane.remove(scroll24);
				tabbedPane.remove(scroll25);
				tabbedPane.remove(scroll26);
				tabbedPane.remove(scroll27);
				tabbedPane.remove(scroll28);
				tabbedPane.remove(scroll29);
				tabbedPane.remove(scroll30);
				tabbedPane.remove(scroll31);
				tabbedPane.remove(scroll32);
				tabbedPane.remove(scroll33);
				tabbedPane.remove(scroll34);
				tabbedPane.remove(scroll35);
                tabbedPane.remove(scroll40);
                tabbedPane.remove(scroll41);
                tabbedPane.remove(scroll42);

				/*TextTypeOfECMProteinEvolverABC.setEditable(false); 
				ProteinEvolverABCECMFreqs.setEnabled(false);*/

				createPage35();
				tabbedPane.addTab( "Make File", scroll35);
				scroll35.setVisible(true);
				tabbedPane.remove(scroll13);
				tabbedPane.setSelectedComponent(scroll35); //go to that tab

				}

			}
		}



	// RunButton15 - AA substitution model
    class runButton15Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;

			
			/*** Number of ABC iterations ***/
			String s = TextABCIterations.getText(); //String s = "23";
			if (s.trim().length() == 0) // check empty
				{
				System.out.println("Number of ABC iterations out of range: " + s);
				JOptionPane.showMessageDialog(null, "Number of ABC iterations out of range: " + s, " ", JOptionPane. INFORMATION_MESSAGE);
				// System.exit(0);
				Error = Error + 1;
				}
			if (Error == 0)
				{
				for (int i=0; i < s.length(); i++) // check integer
    				{
        			char c = s.charAt(i);
        			if (c >= '0' && c <= '9')
        				{
            			; // ok
        				}
					else
						{
						if (Error == 0)
							{
							System.out.println("Number of ABC iterations out of range: " + s);
							JOptionPane.showMessageDialog(null, "Number of ABC iterations out of range: " + s, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}
				}
			int ABCIterations = Integer.parseInt(s);
			if (Error == 0)
				{
				if ((ABCIterations < 1 || ABCIterations > 1000000000 || s.trim().length() == 0) && (Error == 0))
					{
					System.out.println("Number of ABC iterations out of range: " + ABCIterations);
					JOptionPane.showMessageDialog(null, "Number of ABC iterations out of range: " + ABCIterations, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				if ((ABCIterations > NumberReplicates) && (Error == 0))
					{
					System.out.println("Number of ABC iterations cannot be higher than the number of replicates: " + NumberReplicates);
					JOptionPane.showMessageDialog(null, "Number of ABC iterations cannot be higher than the number of replicates: " + NumberReplicates, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}

				}
			System.out.println(" ");
			System.out.println(" ");
			System.out.println("ABCIterations: " + ABCIterations);
			ABC_Iterations = "*ABCIterations=" + ABCIterations;
			System.out.println("ABC_Iterations: " + ABC_Iterations);


			/*** ABC tolerance ***/
			String s1 = TextABCTolerance.getText();
			if (s1.trim().length() == 0) // check empty
				{
				System.out.println("ABC tolerance out of range: " + s1);
				JOptionPane.showMessageDialog(null, "ABC tolerance out of range: " + s1, " ", JOptionPane. INFORMATION_MESSAGE);
				// System.exit(0);
				Error = Error + 1;
				}
			if (Error == 0)
				{
				for (int i=0; i < s1.length(); i++) // check integer
    				{
        			char c = s1.charAt(i);
        			if (c >= '0' && c <= '9')
        				{
            			; // ok
        				}
					else
						{
						if (Error == 0)
							{
							System.out.println("ABC tolerance out of range: " + s1);
							JOptionPane.showMessageDialog(null, "ABC tolerance out of range: " + s1, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}
				}
			int ABCtolerance = Integer.parseInt(s1);
			if (Error == 0)
				{
				if ((ABCtolerance < 1 || ABCtolerance > 1000000000 || s.trim().length() == 0) && (Error == 0))
					{
					System.out.println("ABC tolerance out of range: " + ABCtolerance);
					JOptionPane.showMessageDialog(null, "ABC tolerance out of range: " + ABCtolerance, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				if ((ABCtolerance >= NumberReplicates) && (Error == 0))
					{
					System.out.println("Number of ABC tolerance cannot be equal or higher than the number of replicates: " + NumberReplicates);
					JOptionPane.showMessageDialog(null, "Number of ABC tolerance cannot be equal or higher than the number of replicates: " + NumberReplicates, " ", JOptionPane. INFORMATION_MESSAGE);
					Error = Error + 1;
					//System.exit(0);
					}
				}
			System.out.println("ABCtolerance: " + ABCtolerance);
			ABC_Tolerance = "*ABCTolerance=" + ABCtolerance;
			System.out.println("ABC_Tolerance: " + ABC_Tolerance);
			System.out.println(" ");


			System.out.println("ABC_Method: " + ABC_Method);
			System.out.println("ABC_Transf: " + ABC_Transf);
			System.out.println("ABC_Corr: " + ABC_Corr);

			
			/*** ABC summary statistics ***/
                ABC_SummaryStatistics = "*SummaryStatistics=" + SS1 + SS2 + SS3 + SS4 + SS5 + SS6 + SS7 + SS8 + SS9 + SS10 + SS11 + SS12 + SS13 + SS14 + SS15 + SS16; // + SS17 + SS18 + SS19 + SS20 + SS21 + SS22 + SS23 + SS24 + SS25 + SS26;
			/*String s2 = TextABCSummaryStatistics.getText();
			if (s2.trim().length() == 0) // check empty
				{
				System.out.println("ABC summary statistics out of range: " + s2);
				JOptionPane.showMessageDialog(null, "ABC summary statistics out of range: " + s2, " ", JOptionPane. INFORMATION_MESSAGE);
				// System.exit(0);
				Error = Error + 1;
				}
			if (Error == 0)
				{
				for (int i=0; i < s2.length(); i++) // check integer
    				{
        			char c = s2.charAt(i);
					if ((c >= '0' && c <= '9') || (c == ' ')) // only numbers or spaces
						{
	      				; // ok
	        			}
					else
						{
						if (Error == 0)
							{
							System.out.println("ABC summary statistics out of range: " + s2);
							JOptionPane.showMessageDialog(null, "ABC summary statistics out of range: " + s2, " ", JOptionPane. INFORMATION_MESSAGE);
							// System.exit(0);
							Error = Error + 1;
							}
						}
					}
				}
			ABC_SummaryStatistics = "*SummaryStatistics=" + s2; */
			System.out.println("ABC_SummaryStatistics: " + ABC_SummaryStatistics);
			
			
			
			System.out.println("ABC_MultiPage: " + ABC_MultiPage);


			
			/*** Next tab ***/
			if (Error == 0) // finished
				{
				tabbedPane.remove(scroll16);
				tabbedPane.remove(scroll17);
				tabbedPane.remove(scroll18);
				tabbedPane.remove(scroll19);
				tabbedPane.remove(scroll20);
				tabbedPane.remove(scroll21);
				tabbedPane.remove(scroll22);
				tabbedPane.remove(scroll23);
				tabbedPane.remove(scroll24);
				tabbedPane.remove(scroll25);
				tabbedPane.remove(scroll26);
				tabbedPane.remove(scroll27);
				tabbedPane.remove(scroll28);
				tabbedPane.remove(scroll29);
				tabbedPane.remove(scroll30);
				tabbedPane.remove(scroll31);
				tabbedPane.remove(scroll32);
				tabbedPane.remove(scroll33);
				tabbedPane.remove(scroll34);
				tabbedPane.remove(scroll35);
                tabbedPane.remove(scroll40);
                tabbedPane.remove(scroll41);
                tabbedPane.remove(scroll42);

				createPage35();
				tabbedPane.addTab( "Make Input file", scroll35);
				scroll35.setVisible(true);
				//tabbedPane.remove(scroll15);
				tabbedPane.setSelectedComponent(scroll35); //go to that tab

				}			

			}
		}




	// RunButton20 - Outputs and Others
    class runButton20Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;

			}
    	}




	// RunButton21 - Evolutionary history
    class runButton21Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;


			
			}
    	}


	// RunButton22 - Regions
    class runButton22Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;

			

			}
    	}


	
	// RunButton23 - Nucleotide substitution model
    class runButton23Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;

			
			
			}
		}

	
    // RunButton34 - Outputs and Others
    class runButton34Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;

			
			
			}
    	}



	// RunButton35 - FINISH - write input file for ProteinEvolverABC
    class runButton35Handler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;
			
			// Date 1
			Calendar currentDate = Calendar.getInstance(); //Get the current date
			SimpleDateFormat formatter= new SimpleDateFormat("yyyy/MMM/dd HH:mm:ss"); //format it as per your requirement
			String dateNow1 = formatter.format(currentDate.getTime());
    		//JOptionPane.showMessageDialog(null, "Date: " + dateNow, " ", JOptionPane. INFORMATION_MESSAGE);
			
			// Date 2
			/*GregorianCalendar calendario = new GregorianCalendar();
			calendario.setTime(new java.util.Date());
			int dayWeek = calendario.get(GregorianCalendar.DAY_OF_WEEK);
			int dayMonth = calendario.get(GregorianCalendar.DAY_OF_MONTH);
			int month = calendario.get(GregorianCalendar.MONTH);
			int year = calendario.get(GregorianCalendar.YEAR);
			int hour = calendario.get(GregorianCalendar.HOUR);*/

			try
				{
 	 			// Create file 
  				//FileWriter fstream = new FileWriter(address2 + "Settings.txt");
                FileWriter fstream = new FileWriter("Settings.txt");
				BufferedWriter out = new BufferedWriter(fstream);
  				out.write("########################################################################################################################## \n");
  				out.write("##### Settings file for ProteinEvolverABC \n");
 	 			out.write("##### Estimation of recombination and substitution rates in proyein sequences by approximate Bayesian computation \n");
  				out.write("##### Arenas, M. \n");
  				out.write("##### (c) 2020 \n");
  				out.write("##### Contact*: miguelmmmab@gmail.com or marenas@uvigo.es \n");
  				out.write("##### \n");
  				out.write("##### Parameters with an \"*\" are mandatory (need to be specified) \n");
  				out.write("##### Text with an \"#\" is not read. Parameter values must be introduced immediately after the \"=\" \n");
	  			out.write("########################################################################################################################## \n");
  				out.write(" \n");
				out.write("# File printed by - ProteinEvolverABC_GUI - \n");
  				out.write("# Date: " + dateNow1 + " \n");
  				out.write("# \n");
  				//out.write("// dayWeek: " + dayWeek + " dayMonth: " + dayMonth + " month: " + month + " year: " + year + " hour: " + hour + "   \n");
  				out.write(" \n");
  				out.write("######################################### \n");
  				out.write("### Settings for the simulation phase ### \n");
  				out.write("######################################### \n");
  				out.write(" \n");
  				out.write("### Prior distributions available: fix #, uniform # #, gamma # # (t) # #, beta # # (t) # #, normal # # (t) # #, exponential # (t) # #, dirichlet n# \n");
  				out.write("### (t) indicates that the distribution can be truncated through the following two (lowest highest) values \n");
  				out.write("### Each parameter may have a particular set of available distributions (indicated for each parameter) \n");
  				out.write("### \n");
  				out.write("###  +----------------+----------------------------------------------------------------------+-----------------------+------------------------------------------------------------+ \n");
  				out.write("###  |  Distribution  |  Description                                                         |  Truncated (low high) |  Examples                                                  | \n");
  				out.write("###  +----------------+----------------------------------------------------------------------+-----------------------+------------------------------------------------------------+ \n");
  				out.write("###  |  fix           |  Fixed value (integer or non integer)                                |  n.a.                 |  fix 4; fix 0.7                    		                 | \n");
  				out.write("###  |  uniform       |  Random between two values (integer or non integer; lowest, highest) |  n.a.                 |  uniform 1.0e-8 1.0e-5; ; unif 2 6                         | \n");
  				out.write("###  |  normal        |  Normal distribution (mean, sd)                                      |  t # #                |  normal 1.0e-8 1.0e-5; norm 1.0e-8 1.0e-5 t 1.0e-9 1.0e-6  | \n");
  				out.write("###  |  exponential   |  Exponential distribution (rate)                                     |  t # #                |  exponential 1.0e-8; exp 1.0e-8 t 1.0e-9 1.0e-6            | \n");
  				out.write("###  |  gamma         |  Gamma distribution (shape, rate \"1/scale\")                          |  t # #                |  gamma 1.0e-7 5.0e-7; gamma 1.0e-7 5.0e-7 t 5.0e-8 1.0e-6  | \n");
  				out.write("###  |  beta          |  Beta  distribution (shape1, shape2)                                 |  t # #                |  beta 1.0e-7 5.0e-7; beta 1.0e-7 5.0e-7 t 1.1e-8 1.0e-6    | \n");
  				out.write("###  |  dirichlet     |  Dirichlet distribution: alpha (vector)                              |  n.a.                 |  dirichlet 1 1 1 1; dirichlet 1 1 1 1 1 1                  | \n");
  				out.write("###  +----------------+----------------------------------------------------------------------+-----------------------+------------------------------------------------------------+ \n");
  				out.write("### \n");
  				out.write(" \n");
  				out.write("### Target MSA file ###		# phylip format, see documentation for details \n");
  				out.write(TargetFile + "\n");
  				out.write(" \n");
  				out.write("### Total number of simulations ### \n");
  				out.write(ProteinEvolverABC_NumberReplicates + "\n");
  				out.write(" \n");
                out.write("# Consideration of indels. 0 (Indels are ignored), 1 (Indels are considered as a new state)\n");
                out.write(Indels + "\n");
                out.write(" \n");
  				out.write("# Number of available processors to run the simulations in parallel. 1 by default \n");
  				out.write(ProteinEvolverABC_NumberProcessors + "\n");
  				out.write(" \n");
  				out.write("# Save simulated data. 0 (No), 1 (Yes, but it requires space in the disk) \n");
  				out.write(SaveSimulations + "\n");
  				out.write(" \n");
                out.write("# Show running information (simulations and summary statistics) on the screen. 0 (No), 1 (Yes, but it slows down the running time) \n");
                out.write(ShowInformationScreen + "\n");
                out.write(" \n");
  				out.write(" \n");
  				out.write("### Demographic settings ###\n");
  				out.write("# Haploid or Diploid data (haploid=1, diploid=2)\n");
  				out.write(ProteinEvolverABC_HapDip + "\n");
  				out.write(" \n");
  				out.write("# Population size (i.e., 1000)\n");
  				out.write("*PopulationSize=" + HerePopSize + " \n");
  				out.write(" \n");
  				/*out.write("# Population growth rate. Incompatible with DemographicPeriods, DemographicsSpeciesTree_ConstantPops and DemographicsSpeciesTree_VariablePops. fix, uniform, gamma, beta, normal, exponential; i.e., gamma 0.02 0.5 t 2.3e-03 5.3e-03 \n");
  				out.write(ProteinEvolverABC_GrowthRate + "\n");
  				out.write(" \n");
  				out.write("# Demographic periods (population size variable with time). Incompatible with GrowthRate, DemographicsSpeciesTree_ConstantPops and DemographicsSpeciesTree_VariablePops. See documentation for details\n");
  				out.write(ProteinEvolverABC_DemogPeriods + "\n");
  				out.write(" \n");
  				out.write("# Constant Population size for each population/species of a species/populations tree. Incompatible with GrowthRate, DemographicPeriods and DemographicsSpeciesTree_VariablePops. Requires Species/populationsTree (below). See documentation for details\n");
  				out.write(ProteinEvolverABC_DemogPeriodsStructPop_CTE + "\n");
  				out.write(" \n");
  				out.write("# Variable Population size for each population/species of a species/populations tree. Incompatible with GrowthRate, DemographicPeriods and DemographicsSpeciesTree_ConstantPops. Requires Species/populationsTree (below). See documentation for details \n");
  				out.write(ProteinEvolverABC_DemogPeriodsStructPop_VARY + "\n");
  				out.write(" \n");
  				out.write(" \n");*/
  				out.write("# Logitudinal sampling. Requires GenerationTime. See documentation for details \n");
  				out.write(ProteinEvolverABC_DatedTips + "\n");
  				out.write(" \n");
  				out.write("# Generation time. fix, uniform; i.e., uniform 500 1000 \n");
  				out.write(ProteinEvolverABC_GenerationTime + "\n");
  				out.write(" \n");
  				/*out.write(" \n");
  				out.write("# Migration model. See documentation for details \n");
				if (SavedMultIsland == 0 && SavedMultSteppStone == 0 && SavedMultContIsland == 0)
					{
  					out.write("#MigrationModel=1 4 12 10 3 4\n");
					}
				if (SavedMultIsland != 0)
					{
  					out.write(ProteinEvolverABC_IslandModel + "\n");
					}
				if (SavedMultSteppStone != 0)
					{
  					out.write(ProteinEvolverABC_SteppStoneModel + "\n");
					}
				if (SavedMultContIsland != 0)
					{
  					out.write(ProteinEvolverABC_ContIslandModel + "\n");
					}
  				out.write(" \n");
  				out.write("# Migration rate (may vary according to temporal periods). See documentation for details \n");
  				out.write(ProteinEvolverABC_MigrationRate + "\n");
  				out.write(" \n");
  				out.write("# Species/population tree. Requires a migration model although the migration rate can be set to 0. See documentation for details\n");
  				out.write(ProteinEvolverABC_ConvDemes + "\n");
				out.write("\n");
				out.write("\n");*/
				out.write("#Recombination rate per site. fix, uniform, gamma, beta, normal, exponential; i.e., gamma 0.02 0.5 t 1.3e-07 9.3e-07. -PARAMETER TO BE ESTIMATED-\n");
				out.write(CoalHomogRecRate + "\n");
				out.write("\n");
				out.write("\n");
				out.write("### Protein substitution model settings ###\n");
				out.write("#Amino acid substitution rate. fix, uniform, gamma, beta, normal, exponential; i.e., fix 7.0e-6. -PARAMETER TO BE ESTIMATED-\n");
				out.write(CoalSubsRate + "\n");
                out.write("\n");
                out.write("# Substitution model of protein evolution\n");
                out.write(ProteinSubstitutionModel_Str + "\n");
                out.write("\n");
				out.write("# Amino acid frequencies. 1x20, fix or dirichlet. By default equally distributed frequencies; i.e., fix 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05\n");
				out.write(ProteinEvolverABCNormalAAFreqs + "\n");
				out.write("\n");
                out.write("# Rate of heteregeneity across amino acid sites, +G. fix, uniform, gamma, beta, normal, exponential; i.e., fix 0.6\n");
				out.write(ProteinEvolverABC_AA_Gamongsites + "\n");
				out.write("\n");
				out.write("# Proportion of invariable amino acid sites, +I. fix, uniform, gamma, beta, normal, exponential; i.e., exponential 0.002 t 0 1.0\n");
				out.write(ProteinEvolverABC_AA_I + "\n");
				out.write("\n");
				out.write("\n");
				out.write("\n");
				out.write("#########################################\n");
				out.write("### Settings for the estimation phase ###\n");
				out.write("#########################################\n");
				out.write("\n");
				out.write("### ABC settings ###\n");
				out.write("#ABC iterations. Number of simulations to consider (Iterations <= NumberOfSimulations)\n");
				out.write(ABC_Iterations + "\n");
				out.write("\n");
				out.write("#ABC tolerance. Number of simulations clostest to real data to retain in the ABC procedure (Tolerance < NumberOfSimulations)\n");
				out.write(ABC_Tolerance + "\n");
				out.write("\n");
				out.write("#ABC method (rejection, loclinear). See documentation for details\n");
				out.write(ABC_Method + "\n");
				out.write("\n");
				out.write("#ABC transformation (none, log, logit). See documentation for details\n");
				out.write(ABC_Transf + "\n");
				out.write("\n");
				out.write("#ABC correction. Correct for heteroscedastic variance (no=0, yes=1). See documentation for details\n");
				out.write(ABC_Corr + "\n");
				out.write("\n");
				out.write("#Summary statistics to use. See documentation for details\n");
				out.write(ABC_SummaryStatistics + "\n");
				out.write("\n");
				out.write("### Graphical settings ###\n");
				out.write("#Multiple pages. PDF documents with multiple pages (no=0, yes=1)\n");
				out.write(ABC_MultiPage + "\n");
				out.write("\n");
				out.write("\n");
				out.write("\n");

				//Close the output stream
  				out.close();

                TextSettingsFile.setText("Settings.txt");
                    
                System.out.println(" ");
				System.out.println("A file \"Settings.txt\" was successfully saved in the working directory!");
				JOptionPane.showMessageDialog(null, "A file \"Settings.txt\" was successfully saved in the working directory!", " ", JOptionPane. INFORMATION_MESSAGE);
  				}
			catch (Exception f)	
				{//Catch exception if any
                System.out.println(" ");
  				System.err.println("Error. It could not create the file \"Settings.txt\": " + f.getMessage());
                TextSettingsFile.setText("");
  				}
			//System.exit(0);
			}		
		} // end button 35


	// RunButton35b - FINISH - write script for ProteinEvolverABC
    class runButton35bHandler implements ActionListener
		{
        public void actionPerformed(ActionEvent e)
			{
			Error = 0;
			
			// Date 1
			Calendar currentDate = Calendar.getInstance(); //Get the current date
			SimpleDateFormat formatter= new SimpleDateFormat("yyyy/MMM/dd HH:mm:ss"); //format it as per your requirement
			String dateNow1 = formatter.format(currentDate.getTime());
    		//JOptionPane.showMessageDialog(null, "Date: " + dateNow, " ", JOptionPane. INFORMATION_MESSAGE);
			
			// Date 2
			/*GregorianCalendar calendario = new GregorianCalendar();
			calendario.setTime(new java.util.Date());
			int dayWeek = calendario.get(GregorianCalendar.DAY_OF_WEEK);
			int dayMonth = calendario.get(GregorianCalendar.DAY_OF_MONTH);
			int month = calendario.get(GregorianCalendar.MONTH);
			int year = calendario.get(GregorianCalendar.YEAR);
			int hour = calendario.get(GregorianCalendar.HOUR);*/

			try
				{
 	 			// Create file 
  				FileWriter fstream = new FileWriter("RunFull_ProteinEvolverABC.sh");
				BufferedWriter out = new BufferedWriter(fstream);
  			/*	out.write("#!/bin/sh\n");
  				out.write("\n"); */
  				out.write("## Script printed by - ProteinEvolverABC_GUI - \n");
  				out.write("## Date: " + dateNow1 + " \n");
				out.write("##\n");
  				out.write("## This shell script can run the entire ProteinEvolverABC process into a single step \n");
				out.write("##\n");
  				out.write("## This script must be placed in the directory of the ProteinEvolverABC perl scripts (i.e., ProteinEvolverABC_Phase1.pl) and input files \n");
  				out.write("## Run this script in a Linux machine by: ./RunFull_ProteinEvolverABC.sh \n");
  				out.write("## Note that ProteinEvolverABC requires Perl and R (including libraries: lattice, MCMCpack, ape, graphics and abc) \n");
				out.write("#\n");
				out.write("\n");
  				out.write("# Compile the simulator ProteinEvolver \n");
				out.write("make all\n");
				out.write("\n");
  				out.write("# Read input settings, compute summary statistics from the target MSA and prepare the simulations \n");
                out.write("perl ProteinEvolverABC_Phase1.pl Settings.txt\n");
                out.write("\n");
                out.write("# Run the simulations (can run in parallel)\n");
                out.write("perl ProteinEvolverABC_Phase2.pl Settings.txt\n");
                out.write("\n");
                out.write("# Compute summary statistics from the simulation (can run in parallel)\n");
                out.write("perl ProteinEvolverABC_Phase3.pl Settings.txt\n");
                out.write("\n");
                out.write("# Perform ABC estimations \n");
                out.write("perl ProteinEvolverABC_Phase4.pl Settings.txt\n");
                out.write("\n");
  				/*out.write("perl ProteinEvolverABC_Phase1.pl " + address2 + "Settings.txt\n");
                out.write("\n");
  				out.write("# Run the simulations (can run in parallel)\n");
  				out.write("perl ProteinEvolverABC_Phase2.pl " + address2 + "Settings.txt\n");
				out.write("\n");
  				out.write("# Compute summary statistics from the simulation (can run in parallel)\n");
  				out.write("perl ProteinEvolverABC_Phase3.pl " + address2 + "Settings.txt\n");
				out.write("\n");
  				out.write("# Perform ABC estimations \n");
  				out.write("perl ProteinEvolverABC_Phase4.pl " + address2 + "Settings.txt\n");
				out.write("\n");*/

				//Close the output stream
  				out.close();

				System.out.println("A shell script \"RunFull_ProteinEvolverABC.sh\" was successfully saved in the working directory!");
				JOptionPane.showMessageDialog(null, "A file \"RunFull_ProteinEvolverABC.sh\" was successfully saved in the working directory!", " ", JOptionPane. INFORMATION_MESSAGE);
  				}
			catch (Exception f)	
				{//Catch exception if any
  				System.err.println("Error. It could not create the file \"RunFull_ProteinEvolverABC.sh\": " + f.getMessage());
  				}

			//System.exit(0);
			}		
		} // end button 35b
        
        
        // RunButton35d - Next run
        class runButton35dHandler implements ActionListener
        {
            public void actionPerformed(ActionEvent e)
            {
                Error = 0;
                
                /* Printed Settings.txt? */
                String s = TextSettingsFile.getText(); //String s = "23";
                if (s.trim().length() == 0) // check empty
                    {
                    System.out.println("Settings file not printed " + s);
                    JOptionPane.showMessageDialog(null, "Settings file not printed " + s, " ", JOptionPane. INFORMATION_MESSAGE);
                    // System.exit(0);
                    Error = Error + 1;
                    }
                
                System.out.println(" ");
                System.out.println("Settings file: " + s);
                System.out.println("ABC_Iterations: " + s);
                
                /*** Next tab ***/
                if (Error == 0) // finished
                {
                    tabbedPane.remove(scroll16);
                    tabbedPane.remove(scroll17);
                    tabbedPane.remove(scroll18);
                    tabbedPane.remove(scroll19);
                    tabbedPane.remove(scroll20);
                    tabbedPane.remove(scroll21);
                    tabbedPane.remove(scroll22);
                    tabbedPane.remove(scroll23);
                    tabbedPane.remove(scroll24);
                    tabbedPane.remove(scroll25);
                    tabbedPane.remove(scroll26);
                    tabbedPane.remove(scroll27);
                    tabbedPane.remove(scroll28);
                    tabbedPane.remove(scroll29);
                    tabbedPane.remove(scroll30);
                    tabbedPane.remove(scroll31);
                    tabbedPane.remove(scroll32);
                    tabbedPane.remove(scroll33);
                    tabbedPane.remove(scroll34);
                    //tabbedPane.remove(scroll35);
                    tabbedPane.remove(scroll40);
                    tabbedPane.remove(scroll41);
                    tabbedPane.remove(scroll42);
                    
                    createPage40();
                    tabbedPane.addTab( "Run ProteinEvolverABC 1", scroll40);
                    scroll40.setVisible(true);
                    //tabbedPane.remove(scroll15);
                    tabbedPane.setSelectedComponent(scroll40); //go to that tab
                    
                }			
                
            }
        } // end button 35d

        
        // RunButton40 - Run Phase 1
        /* https://www.rgagnon.com/javadetails/java-0014.html */
        public class runButton40Handler implements ActionListener
            {            
            public void actionPerformed(ActionEvent e)
                {
                System.out.println("Running Phase 1 (shell + perl + R).. ");

                // textArea.setText(System.setOut);
                
                    PrintStream printStream = new PrintStream(new CustomOutputStream(textAreaOut_1));
                    // keeps reference of standard output stream
                    standardOut = System.out;
                    // re-assigns standard output stream and error output stream
                    System.setOut(printStream);
                    System.setErr(printStream);
                    
                    
                    System.out.println("Running Phase 1 (shell + perl + R).. ");
                    
                
                try {
                    String cmd = "java";  // Set shell command
                    Process p = Runtime.getRuntime().exec("perl ProteinEvolverABC_Phase1.pl Settings.txt");
                    //Process p = Runtime.getRuntime().exec("cmd /c dir");

                    
                    InputStream lsOut = p.getInputStream();
                    InputStreamReader r = new InputStreamReader(lsOut);
                    BufferedReader in = new BufferedReader(r);
                    
                    String line;
                    while ((line = in.readLine()) != null) {
                        System.out.println(line);
                        
                        //textAreaOut_1.setText("RUNNING IN1");

                        
                  //      textAreaOut_1.setText(line);
                  //      textAreaOut_1.append(String.valueOf((char)line));

                        // textAreaOut_1.append(String.valueOf((char)b));
                        // You should set JtextArea
                    }
                    
                textAreaOut_1.selectAll();
                textAreaOut_1.setCaretPosition(textAreaOut_1.getDocument().getLength());
                scrolltextAreaOut_1.setVisible(true);

                // clears the text area
                /*try {
                    textArea.getDocument().remove(0,
                                                      textArea.getDocument().getLength());
                    standardOut.println("Text area cleared");
                } catch (BadLocationException ex) {
                    ex.printStackTrace();
                }*/
                    
                    
                    
                    //textAreaOut_1.setText("RUNNING IN2");
                System.out.println("Done.");
                    
                }
                catch (Exception err) {
                    err.printStackTrace();
                    }
                
                //System.out.println("Perl done.");
                    
                    /*
                     try {
                     String line;
                     OutputStream stdin = null;
                     InputStream stderr = null;
                     InputStream stdout = null;
                     
                     // launch EXE and grab stdin/stdout and stderr
                     Process process = Runtime.getRuntime ().exec ("perl ProteinEvolverABC_Phase1.pl Settings.txt");
                     stdin = process.getOutputStream ();
                     stderr = process.getErrorStream ();
                     stdout = process.getInputStream ();
                     
                     // "write" the parms into stdin
                     line = "ProteinEvolverABC_Phase1.pl" + "Settings.txt" + "\n";
                     stdin.write(line.getBytes() );
                     stdin.flush();
                     
                     stdin.close();
                     
                     // clean up if any output in stdout
                     BufferedReader brCleanUp =
                     new BufferedReader (new InputStreamReader (stdout));
                     while ((line = brCleanUp.readLine ()) != null) {
                     //System.out.println ("[Stdout] " + line);
                     }
                     brCleanUp.close();
                     
                     // clean up if any output in stderr
                     brCleanUp =
                     new BufferedReader (new InputStreamReader (stderr));
                     while ((line = brCleanUp.readLine ()) != null) {
                     //System.out.println ("[Stderr] " + line);
                     }
                     brCleanUp.close();
                     }
                     catch (Exception err) {
                     err.printStackTrace();
                     }
                     */
                    
                    // OK!
                    
                    
                    
                Error = 0;
                }
            }
        
        public class CustomOutputStream extends OutputStream {
            private JTextArea textAreaOut_1;
            
            public CustomOutputStream(JTextArea textAreaOut_1) {
                this.textAreaOut_1 = textAreaOut_1;
            }
            
            @Override
            public void write(int b) throws IOException {
                //textAreaOut_1.append(new String(new byte[] { (byte) b }));
                // redirects data to the text area
                textAreaOut_1.append(String.valueOf((char)b));
                // scrolls the text area to the end of data
                textAreaOut_1.setCaretPosition(textAreaOut_1.getDocument().getLength());
            }
        }
        
        
        
        
        // RunButton40d - Next run
        class runButton40dHandler implements ActionListener
        {
            public void actionPerformed(ActionEvent e)
            {
                Error = 0;
                
                /* Printed Settings.txt? */
                String s = TextSettingsFile.getText(); //String s = "23";
                if (s.trim().length() == 0) // check empty
                    {
                    System.out.println("Settings file not printed " + s);
                    JOptionPane.showMessageDialog(null, "Settings file not printed " + s, " ", JOptionPane. INFORMATION_MESSAGE);
                    // System.exit(0);
                    Error = Error + 1;
                    }
                
                System.out.println(" ");
                System.out.println("Settings file: " + s);
                System.out.println("ABC_Iterations: " + s);
                
                /*** Next tab ***/
                if (Error == 0) // finished
                {
                    tabbedPane.remove(scroll16);
                    tabbedPane.remove(scroll17);
                    tabbedPane.remove(scroll18);
                    tabbedPane.remove(scroll19);
                    tabbedPane.remove(scroll20);
                    tabbedPane.remove(scroll21);
                    tabbedPane.remove(scroll22);
                    tabbedPane.remove(scroll23);
                    tabbedPane.remove(scroll24);
                    tabbedPane.remove(scroll25);
                    tabbedPane.remove(scroll26);
                    tabbedPane.remove(scroll27);
                    tabbedPane.remove(scroll28);
                    tabbedPane.remove(scroll29);
                    tabbedPane.remove(scroll30);
                    tabbedPane.remove(scroll31);
                    tabbedPane.remove(scroll32);
                    tabbedPane.remove(scroll33);
                    tabbedPane.remove(scroll34);
                    //tabbedPane.remove(scroll35);
                    //tabbedPane.remove(scroll40);
                    tabbedPane.remove(scroll41);
                    tabbedPane.remove(scroll42);
                    
                    createPage41();
                    tabbedPane.addTab( "Run ProteinEvolverABC 2", scroll41);
                    scroll41.setVisible(true);
                    //tabbedPane.remove(scroll15);
                    tabbedPane.setSelectedComponent(scroll41); //go to that tab
                    
                }
                
            }
        } // end button 40d
        
        
        
        // RunButton41 - Run Phase 2
        public class runButton41Handler implements ActionListener
        {
            public void actionPerformed(ActionEvent e)
            {
                System.out.println("Running Phase 2 (shell + perl + R).. ");
                
                // textArea.setText(System.setOut);
                
                PrintStream printStream = new PrintStream(new CustomOutputStream_2(textAreaOut_2));
                // keeps reference of standard output stream
                standardOut = System.out;
                // re-assigns standard output stream and error output stream
                System.setOut(printStream);
                System.setErr(printStream);
                
                System.out.println("Running Phase 2 (shell + perl + R).. ");
                
                try {
                    String cmd = "java";  // Set shell command
                    Process p = Runtime.getRuntime().exec("perl ProteinEvolverABC_Phase2.pl Settings.txt");
                    //Process p = Runtime.getRuntime().exec("cmd /c dir");
                    
                    InputStream lsOut = p.getInputStream();
                    InputStreamReader r = new InputStreamReader(lsOut);
                    BufferedReader in = new BufferedReader(r);
                    
                    String line;
                    while ((line = in.readLine()) != null) {
                        System.out.println(line);
                    }
                    
                    textAreaOut_2.selectAll();
                    textAreaOut_2.setCaretPosition(textAreaOut_2.getDocument().getLength());
                    scrolltextAreaOut_2.setVisible(true);
                    
                    System.out.println("Done.");
                }
                catch (Exception err) {
                    err.printStackTrace();
                }
                
                Error = 0;
            }
        }
        
        public class CustomOutputStream_2 extends OutputStream {
            private JTextArea textAreaOut_2;
            
            public CustomOutputStream_2(JTextArea textAreaOut_2) {
                this.textAreaOut_2 = textAreaOut_2;
            }
            
            @Override
            public void write(int b) throws IOException {
                // redirects data to the text area
                textAreaOut_2.append(String.valueOf((char)b));
                // scrolls the text area to the end of data
                textAreaOut_2.setCaretPosition(textAreaOut_2.getDocument().getLength());
            }
        }
        
        


        // RunButton41d - Next run
        class runButton41dHandler implements ActionListener
        {
            public void actionPerformed(ActionEvent e)
            {
                Error = 0;
                
                /* Printed Settings.txt? */
                String s = TextSettingsFile.getText(); //String s = "23";
                if (s.trim().length() == 0) // check empty
                {
                    System.out.println("Settings file not printed " + s);
                    JOptionPane.showMessageDialog(null, "Settings file not printed " + s, " ", JOptionPane. INFORMATION_MESSAGE);
                    // System.exit(0);
                    Error = Error + 1;
                }
                
                System.out.println(" ");
                System.out.println("Settings file: " + s);
                System.out.println("ABC_Iterations: " + s);
                
                /*** Next tab ***/
                if (Error == 0) // finished
                {
                    tabbedPane.remove(scroll16);
                    tabbedPane.remove(scroll17);
                    tabbedPane.remove(scroll18);
                    tabbedPane.remove(scroll19);
                    tabbedPane.remove(scroll20);
                    tabbedPane.remove(scroll21);
                    tabbedPane.remove(scroll22);
                    tabbedPane.remove(scroll23);
                    tabbedPane.remove(scroll24);
                    tabbedPane.remove(scroll25);
                    tabbedPane.remove(scroll26);
                    tabbedPane.remove(scroll27);
                    tabbedPane.remove(scroll28);
                    tabbedPane.remove(scroll29);
                    tabbedPane.remove(scroll30);
                    tabbedPane.remove(scroll31);
                    tabbedPane.remove(scroll32);
                    tabbedPane.remove(scroll33);
                    tabbedPane.remove(scroll34);
                    //tabbedPane.remove(scroll35);
                    //tabbedPane.remove(scroll40);
                    //tabbedPane.remove(scroll41);
                    tabbedPane.remove(scroll42);
                    
                    createPage42();
                    tabbedPane.addTab( "Run ProteinEvolverABC 3", scroll42);
                    scroll42.setVisible(true);
                    //tabbedPane.remove(scroll15);
                    tabbedPane.setSelectedComponent(scroll42); //go to that tab
                                      
                }
                                      
            }
        } // end button 42d
                                      

        
        
       


	} // END

